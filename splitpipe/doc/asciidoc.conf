#
# asciidoc.conf
#
# Asciidoc global configuration file.
# Contains backend independent configuration settings that are applied to all
# AsciiDoc documents.
#

[miscellaneous]
tabsize=8
textwidth=70
newline=\r\n

[attributes]
empty=
amp=&
lt=<
gt=>
brvbar=|
nbsp=&#160;
backslash=\
# Attribute and AttributeList element patterns.
attributeentry-pattern=^:(?P<attrname>[a-zA-Z].*?):(?P<attrvalue>.*)$
attributelist-pattern=(^\[\[(?P<id>[\w\-_]+)\]\]$)|(^\[(?P<attrlist>.*)\]$)

[titles]
subs=specialcharacters,quotes,replacements,macros,attributes
# Double-line title pattern and underlines.
# DEPRECATED: title args.
sectiontitle=^(?P<title>.*?)($|(\s*\[\[(?P<args>.*)\]\]$))
underlines="==","--","~~","^^","++"
# Single-line title patterns.
sect0=^= (?P<title>[\S].*)$
sect1=^== (?P<title>[\S].*)$
sect2=^=== (?P<title>[\S].*)$
sect3=^==== (?P<title>[\S].*)$
sect4=^===== (?P<title>[\S].*)$
# BlockTitle cannot start or end with characters that could match a table
# ruler, consequently the title must be 2 or more chars.
blocktitle=^\.(?P<title>[^\s\.\-~_].*[^\-~_])$

[specialcharacters]
&=&amp;
<=&lt;
>=&gt;

[quotes]
# Don't use "double-quote" characters -- they interfere with quoted element
# attribute values (see ``alternative'' below).
*=strong
'=emphasis
`=monospaced
``|''=quoted

[specialwords]
emphasizedwords=
strongwords=
monospacedwords=

[replacements]
\#NEW\#=image:{imagesdir=images}/smallnew.png[New!]
# (C) Copyright (entity reference &copy;)
\(C\)=&#169;
# (TM) Trademark (entity reference &trade;)
\(TM\)=&#8482;
# -- Em dash (entity reference &mdash;)
(^|\s+)--($|\s+)=\1&#8212;\2
# ... Ellipsis (entity reference &hellip;)
\.\.\.=&#8230;
# (R) registered trade mark (entity reference &reg;
\(R\)=&#174;
##
# The following require non-standard embedded fonts in PDF files so are not
# enabled.
# -> right arrow
#-&gt;=&#8594;
# => right double arrow
#=&gt;=&#8658;
# <- left arrow
#&lt;-=&#8592;
# <= left double arrow
#&lt;\==&#8656;

# Paragraphs.
[paradef-default]
delimiter=(?s)(?P<text>\S.*)
template=paragraph

[paradef-literal]
delimiter=(?s)(?P<text>\s+.*)
template=literalparagraph
presubs=specialcharacters,callouts
options=listelement

[paradef-note]
delimiter=(?s)^\s*NOTE:\s+(?P<text>.+)
template=noteparagraph

[paradef-tip]
delimiter=(?s)^\s*TIP:\s+(?P<text>.+)
template=tipparagraph

[paradef-important]
delimiter=(?s)^\s*IMPORTANT:\s+(?P<text>.+)
template=importantparagraph

[paradef-warning]
delimiter=(?s)^\s*WARNING:\s+(?P<text>.+)
template=warningparagraph

[paradef-caution]
delimiter=(?s)^\s*CAUTION:\s+(?P<text>.+)
template=cautionparagraph

[macros]
# Inline macros.
# Backslash prefix required for escape processing.
# (?s) re flag for line spanning.
(?s)[\\]?(?P<name>\w(\w|-)*?):(?P<target>\S*?)(\[(?P<attrlist>.*?)\])=
# Anchor: [[[id]]]. Bibliographic anchor.
(?s)[\\]?\[\[\[(?P<attrlist>[\w][\w-]*?)\]\]\]=anchor3
# Anchor: [[id,xreflabel]]
(?s)[\\]?\[\[(?P<attrlist>[\w"].*?)\]\]=anchor2
# Link: <<id,text>>
(?s)[\\]?&lt;&lt;(?P<attrlist>[\w"].*?)&gt;&gt;=xref2
# Index term: ++primary,secondar,tertiary++
(?s)(?<!\S)[\\]?\+\+(?P<attrlist>.+?)\+\+(?!\+)=indexterm
# Index term: +primary+
# Follows ++...++ macro otherwise it will match them.
(?<!\S)[\\]?\+(?P<attrlist>[^\s\+].*?)\+(?!\+)=indexterm2
# Callout
[\\]?&lt;(?P<index>\d+)&gt;=callout

# Block macros.
^(?P<name>\w(\w|-)*?)::(?P<target>\S*?)(\[(?P<attrlist>.*?)\])$=#
^\#UNDER-CONSTRUCTION\#$=#under-construction
^'{3,}$=#ruler

# Intrinsic macros.
^(?P<name>\w(\w|-)*?)::(?P<target>\S*?)(\[(?P<attrlist>.*?)\])$=+

# Delimited blocks.
[blockdef-comment]
delimiter=^/{3,}
options=skip

[blockdef-sidebar]
# DEPRECATED: delimiter args.
delimiter=^\*{3,}(\[(?P<args>.*)\])?\**$
template=sidebarblock
# DEPRECATED: argsline option.
options=section,argsline

[blockdef-backend]
# DEPRECATED: delimiter args.
delimiter=^\+{3,}(\[(?P<args>.*)\])?\+*$
template=backendblock
presubs=attributes,macros

[blockdef-listing]
# DEPRECATED: delimiter args.
delimiter=^-{3,}(\[(?P<args>.*)\])?-*$
template=listingblock
presubs=specialcharacters,callouts

[blockdef-literal]
# DEPRECATED: delimiter args.
delimiter=^\.{3,}(\[(?P<args>.*)\])?\.*$
template=literalblock
presubs=specialcharacters,callouts

[blockdef-quote]
# DEPRECATED: delimiter args.
delimiter=^_{3,}(\[(?P<args>.*)\])?_*$
template=quoteblock
# DEPRECATED: argsline option.
options=section,argsline

[blockdef-example]
delimiter=^\={3,}$
template=exampleblock
options=section,variants

# Lists.
[listdef-bulleted]
type=bulleted
delimiter=^\s*- +(?P<text>.+)$
listtag=ilist
itemtag=ilistitem
texttag=ilisttext

[listdef-bulleted2]
type=bulleted
delimiter=^\s*\* +(?P<text>.+)$
listtag=ilist
itemtag=ilistitem
texttag=ilisttext

[listdef-numbered]
type=numbered
delimiter=^\s*(?P<index>\d*)\. +(?P<text>.+)$
listtag=olist
itemtag=olistitem
texttag=olisttext

[listdef-numbered2]
type=numbered
delimiter=^\s*(?P<index>[.a-z])\. +(?P<text>.+)$
listtag=olist2
itemtag=olistitem
texttag=olisttext

[listdef-vlabeled]
type=labeled
delimiter=^\s*(?P<label>[\S].*)::$
listtag=vlist
itemtag=vlistitem
texttag=vlisttext
entrytag=vlistentry
labeltag=vlistterm

[listdef-vlabeled2]
type=labeled
delimiter=^\s*(?P<label>[\S].*);;$
listtag=vlist
itemtag=vlistitem
texttag=vlisttext
entrytag=vlistentry
labeltag=vlistterm

[listdef-hlabeled]
type=labeled
delimiter=^\s*(?P<label>[\S].*)::\s+(?P<text>.+)$
listtag=hlist
itemtag=hlistitem
texttag=hlisttext
entrytag=hlistentry
labeltag=hlistterm

[listdef-hlabeled2]
type=labeled
delimiter=^\s*(?P<label>[\S].*);;\s+(?P<text>.+)$
listtag=hlist
itemtag=hlistitem
texttag=hlisttext
entrytag=hlistentry
labeltag=hlistterm


# Question and Answer list.
[listdef-qanda]
type=labeled
delimiter=^\s*(?P<label>[\S].*)\?\?$
listtag=qlist
itemtag=qlistitem
texttag=qlisttext
entrytag=qlistentry
labeltag=qlistterm

# Bibliography list.
[listdef-bibliography]
type=bulleted
delimiter=^\+ +(?P<text>.+)$
listtag=blist
itemtag=blistitem
texttag=blisttext

# Glossary list.
[listdef-glossary]
type=labeled
delimiter=^(?P<label>[\S].*):-$
listtag=glist
itemtag=glistitem
texttag=glisttext
entrytag=glistentry
labeltag=glistterm

# Callout list.
[listdef-callout]
type=callout
delimiter=^<?(?P<index>\d*)> +(?P<text>.+)$
listtag=colist
itemtag=colistitem
texttag=colisttext

# Tables.
[tabledef-default]
fillchar=-
format=fixed

[tabledef-csv]
fillchar=~
format=csv

[tabledef-dsv]
fillchar=_
format=dsv
