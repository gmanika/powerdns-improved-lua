dnl intro
AC_INIT(receiver.cc)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(pdns, 2.9)
AM_CONFIG_HEADER(config.h)
CXXFLAGS="-Wall -pthread -O2"

AC_PREFIX_DEFAULT(/opt/pdns)
AC_PROG_CC
AC_PROG_CXX
AC_PROG_YACC
AM_PROG_LEX
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AM_PROG_LIBTOOL 
AC_LANG_CPLUSPLUS


#dnl Replace `main' with a function in -ldl:
#AC_CHECK_LIB(dl, main)
#dnl Replace `main' with a function in -lpthread:
#AC_CHECK_LIB(pthread, main)

#CPPFLAGS="$CPPFLAGS -I/usr/include/postgresql"
#LDFLAGS="$LDFLAGS -L/usr/local/lib"

AC_CHECK_LIB(gnugetopt,getopt_long,LIBS="$LIBS -lgnugetopt")

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h getopt.h limits.h strings.h sys/time.h syslog.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

dnl Checks for library functions.
AC_FUNC_SETVBUF_REVERSED
AC_TYPE_SIGNAL
AC_FUNC_STRFTIME
AC_CHECK_FUNCS(gethostname gettimeofday mkdir mktime select socket strerror)



# #
# # Check if we have libresolv. XXX If we do not have libresolv then we
# # cannot build the 'resolver'. Is it possible to remove that target
# # conditionally?
# #
# 
# AC_CHECK_LIB(resolv, res_mkquery, RESOLV_LIBS="-l resolv")
# AC_MSG_CHECKING("for resolver library")
# if test -f /usr/lib/libresolv.so -o -f /lib/libresolv.o
# then
#   AC_MSG_RESULT("yes")
#   LIBS="$LIBS -lresolv"
# else
#   AC_MSG_RESULT("no")
# fi

#
# Check for libresolv
#

my_save_LIBS="$LIBS"
LIBS=""
AC_CHECK_LIB(resolv,res_mkquery)
LIBRESOLV=$LIBS
LIBS="$my_save_LIBS"
AC_SUBST(LIBRESOLV)

#
# Check for libdl
#

my_save_LIBS="$LIBS"
LIBS=""
AC_CHECK_LIB(dl,dlopen)
LIBDL=$LIBS
LIBS="$my_save_LIBS"
AC_SUBST(LIBDL)


#
# The following code checks for the right pthreads library and linker
# flags. It was taken from MySQL, so we should have the same platform
# support as they have.
#
# XXX Dit is nog niet correct. Als dit matched dan moet de rest van de
# XXX thread checks niet. Fixen als we solaris hebben.
#

#AC_MSG_CHECKING("for Solaris threads")
#if test -f /usr/lib/libpthread.so -a -f /usr/lib/libthread.so
#then
#  with_named_thread="-lpthread -lthread"
#  AC_MSG_RESULT("yes")
#else
#  AC_MSG_RESULT("no")
#fi

# pthread_create is in standard libraries (As in BSDI 3.0)
AC_MSG_CHECKING("for pthread_create in -libc");
AC_TRY_LINK(
[#include <pthread.h>],
[ (void) pthread_create((pthread_t*) 0,(pthread_attr_t*) 0, 0, 0); ],
with_posix_threads=yes, with_posix_threads=no)
AC_MSG_RESULT("$with_posix_threads")
if test "$with_posix_threads" = "no"
then
  AC_MSG_CHECKING("for pthread_create in -lpthread");
  ac_save_LIBS="$LIBS"
  LIBS="$LIBS -lpthread"
  AC_TRY_LINK(
  [#include <pthread.h>],
  [ (void) pthread_create((pthread_t*) 0,(pthread_attr_t*) 0, 0, 0); ],
  with_posix_threads=yes, with_posix_threads=no)
  AC_MSG_RESULT("$with_posix_threads")
  if test "$with_posix_threads" = "no"
  then
    LIBS=" $ac_save_LIBS -lpthreads"
    AC_MSG_CHECKING("for pthread_create in -lpthreads");
    AC_TRY_LINK(
    [#include <pthread.h>],
    [ pthread_create((pthread_t*) 0,(pthread_attr_t*) 0, 0, 0); ],
    with_posix_threads=yes, with_posix_threads=no)
    AC_MSG_RESULT("$with_posix_threads")
    if test "$with_posix_threads" = "no"
    then
	  # This is for FreeBSD
	  LIBS="$ac_save_LIBS -pthread"
	  AC_MSG_CHECKING("for pthread_create in -pthread");
	  AC_TRY_LINK(
	  [#include <pthread.h>],
	  [ pthread_create((pthread_t*) 0,(pthread_attr_t*) 0, 0, 0); ],
	  with_posix_threads=yes, with_posix_threads=no)
      AC_MSG_RESULT("$with_posix_threads")
      if test "$with_posix_threads" = "no"
	  then
	    with_mit_threads="yes"
	    LIBS="$ac_save_LIBS"
	  fi
	fi
  fi
fi

case "$host_os" in
solaris2*) AC_DEFINE(NEED_POSIX_TYPEDEF)
	;;
*)
	;;
esac

AC_CHECK_HEADER(sstream,dontneedstl=1)

if test "$dontneedstl" != "1" 
then

AC_ARG_WITH(stl-includes, [  --with-stl-includes=PATH Specify location of STL headers],
[ if test x"$withval" = x"no"; then
    search_stl=0
  else
    #if test x"$withval" != x"yes"; then
    if test -d "$withval"; then
      STL_INCLUDES="-I$withval"
      search_stl=0
      has_stl=1
    fi
  fi
])


AC_ARG_WITH(stl-libs, [  --with-stl-libs=PATH    Specify location of STL libs],
[ if test x"$withval" = x"no"; then
    search_stl=0
  else
    #if test x"$withval" != x"yes"; then
    if test -d "$withval"; then
      STL_LIBS="$LIBS -L$withval -lstlport_gcc"
      search_stl=0
      has_stl=1
    fi
  fi
])

AC_DEFUN(AC_CHECK_STL,
[ if test x"$search_stl" != x"0"; then
    if test -f "$1/$2"; then
      AC_MSG_RESULT($5)
      STL_LIBS="$3"
      STL_INCLUDES="$4"
      search_stl=0
      has_stl=1
    fi
  fi
])

AC_DEFUN(AC_SEARCH_STL,
[ AC_MSG_CHECKING("location of sstream")
  AC_CHECK_STL(/usr/include, sstream, -lstlport_gcc,, "found in /usr/include")
  AC_CHECK_STL(/usr/include/stlport, sstream, -lstlport_gcc, -I/usr/include/stlport, "found in /usr/include/stlport")
  AC_CHECK_STL(/usr/local/include, sstream, -L/usr/local/lib -lstlport_gcc, -I/usr/local/include, "found in /usr/local")
  AC_CHECK_STL(/usr/local/include/stl, sstream, -L/usr/local/lib -L/usr/local/lib/stl -lstlport_gcc, -I/usr/local/include/stl, "found in /usr/local/include/stl")
  AC_CHECK_STL(/home/ahu/download/STLport-4.0/stlport, sstream,-L/home/ahu/download/STLport-4.0/lib/ -lstlport_gcc, -I/home/ahu/download/STLport-4.0/stlport/, "found in /home/ahu/download/STLport-4.0/stlport")
  AC_CHECK_STL($HOME/STLport-4.0/stlport, sstream,-L$HOME/STLport-4.0/lib/ -lstlport_gcc, -I$HOME/STLport-4.0/stlport/, "found in $HOME/STLport-4.0/stlport")
])

if test x"$search_stl" != x"0"; then
  AC_SEARCH_STL()
fi

if test x"$has_stl" = x"1"; then
	echo Found sstream include file, assuming working and compliant STL
else
	echo
	echo Did not find sstream include file, this probably means that your STL is not
	echo compliant - the default gcc libstdc++ isn\'t. Download STLport-4.0 from
	echo http://www.stlport.org, or use --with-stl-includes and --with-stl-libs
	echo to specify the location of your STL.
	echo
	exit 1 
fi

CPPFLAGS="$CPPFLAGS $STL_INCLUDES"
LIBS="$LIBS $STL_LIBS" 
fi

AC_MSG_CHECKING(whether we will be doing verbose logging)
AC_ARG_ENABLE(verbose-logging, 
 [  --enable-verbose-logging	Do verbose logging],enable_verbose_logging=yes ,enable_verbose_logging=no)

if test $enable_verbose_logging = yes; then AC_DEFINE(VERBOSELOG, 1) 
fi
AC_MSG_RESULT($enable_verbose_logging)

AC_MSG_CHECKING(whether we should build static binaries)
AC_ARG_ENABLE(static-binaries, 
 [  --enable-static-binaries	Build static binaries],enable_static_binaries=yes ,enable_static_binaries=no)

if test $enable_static_binaries = yes; 
then 
	LDFLAGS="-all-static $LD_FLAGS"
fi
AC_MSG_RESULT($enable_static_binaries)



AC_OUTPUT(Makefile codedocs/Makefile backends/bind/Makefile \
backends/Makefile \
pdns.conf-dist buildroot.sh \
showvar pdns mkbindist)
