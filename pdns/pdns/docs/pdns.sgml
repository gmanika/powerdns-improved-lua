<!DOCTYPE Book PUBLIC "-//OASIS//DTD DocBook V4.1//EN">

<Book>
  
  <BookInfo>
    
    <Title>PowerDNS manual</Title>
    <AUTHOR>
      <affiliation>
        <orgname>PowerDNS BV</orgname>
        <address>
          <email>pdns@powerdns.com</email>
        </address>
	
      </affiliation>
    </author>
    
    <PubDate>v2.1 $Date: 2002/12/10 13:36:26 $</PubDate>
    
    <Abstract>
	<para>	
	<blockquote>
	  <LITERALLAYOUT>
	    It is a book about a Spanish guy called Manual. You should read it.
	       -- Dilbert
	  </LITERALLAYOUT>

	</BLOCKQUOTE>
      </para>
    </Abstract>

    
  </BookInfo>
  
  <Chapter id="powerdns">
    <Title>The PowerDNS dynamic nameserver</Title>

    <Para>
      The PowerDNS daemon is a versatile nameserver which supports a large number
      of backends. These backends can either be <link linkend="bindbackend">plain zonefiles</link> or be 
      <link linkend="pipebackend">more dynamic</link> in nature. 
    </Para>
    
    <Para>
      Prime examples of backends include relational databases, but also
      loadbalancing and failover algorithms. 
    </Para>
    <para>
      The company is called PowerDNS BV, the nameserver daemon is called PDNS.
    </para>

    <sect1 id="function-design"><title>Function &amp; design of PDNS</title>
      <para>
	PDNS is an authoritative only nameserver. It will answer questions about domains it knows about, 
	but will not go out on the net to resolve queries about other domains. However, it can use a 
	<link linkend="recursion">recursing backend</link> to provide that functionality.
      </para>
      <para>
	When PDNS answers a question, it comes out of the database, and can be trusted as being authoritative. There is
	no way to pollute the cache or to confuse the daemon. 
      </para>
      <para>
	PDNS has been designed to serve both the needs of small installations by being easy to setup, as well as 
	for serving very large query volumes on large numbers of domains.
      </para>
      <para>
	Another prime goal is <link linkend="security">security</link>. By the use of language features, the PDNS source code 
	is very small (in the order of  10.000 lines) which makes auditing easy. In the same way, library features have been used 
	to mitigate the risks of buffer overflows.
      </para>
      <para>
	Finally, PDNS is able to give a lot of <link linkend="monitoring">statistics</link> on its operation which is both helpful in 
	determining the scalability of an installation as well as for spotting problems.
      </para>
    </sect1>
    <sect1 id="about"><title>About this document</title>
      <para>
	If you are reading this document from disk, you may want to check <ulink url="http://doc.powerdns.com">http://doc.powerdns.com</ulink>
	for updates. The PDF version is available on <ulink url="http://doc.powerdns.com/pdf">http://doc.powerdns.com/pdf</ulink>, a text file is
	on <ulink url="http://doc.powerdns.com/txt">http://doc.powerdns.com/txt/</ulink>. 
      </para>
    <sect1 id="changelog">
      <title>Release notes</title>
      <para>
	Before proceeding, it is advised to check the release notes for your PDNS version, as specified in the name of the distribution
	file.
      </para>
      <sect2 id="changelog-2-9-1"><title>Version 2.9.1</title>	
	<para>
	  Thanks to the great enthusiasm from around the world, powerdns is now available for Solaris and FreeBSD users again! 
	  Furthermore, the Windows build is back. We are very grateful for the help of:
	</para>
	<para>	
	  <itemizedlist>
	    <listitem><para>Michel Stol</para></listitem>
	    <listitem><para>Wichert Akkerman</para></listitem>
	    <listitem><para>Edvard Tuinder</para></listitem>
	    <listitem><para>Koos van den Hout</para></listitem>
	    <listitem><para>Niels Bakker</para></listitem>
	    <listitem><para>Erik Bos</para></listitem>
	    <listitem><para>Alex Bleker</para></listitem>
	    <listitem><para>steven stillaway</para></listitem>
	    <listitem><para>Roel van der Made</para></listitem>
	    <listitem><para>Steven Van Steen</para></listitem>
	  </itemizedlist>
	</para>
	<para>
	  We are happy to have been able to work with the open source community to improve PowerDNS!
	</para>
	<para>
	  Changes:
	  <itemizedlist>
	    <listitem>
	      <para>
		The monitor command <command>set</command> no longer allows the changing of non-existant variables.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		IBM Universal Database DB2 backend now included in source distribution (untested!)
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Oracle backend now included in source distribution (sligthly tested!)
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		configure script now searches for postgresql and mysql includes
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Bind parser now no longer dies on records with a ' in them (Erik Bos)
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		The pipebackend was accidentally left out of 2.9
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		FreeBSD fixes (with help from Erik Bos, Alex Bleeker, Niels Bakker)
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Heap of Solaris work (with help from Edvard Tuinder, Stefan Van Steen, Koos van den Hout, Roel van der Made and 
		especially Mark Bakker).
		Now compiles in 2.7 and 2.8. May be a bit dysfunctional on 2.7 though - it won't do IPv6 and it won't serve AAAA. Patches
		welcome!
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Windows 32 build is back! Michel Stol updated his earlier work to the current version.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		S/Linux (Linux on Sparc) build works now (with help from steven stillaway).
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Silly debugging message ('sd.ttl from cache') removed
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		.debs are back, hopefully in 'sid' soon! (Wichert Akkerman)
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Removal of bzero and other less portable constructs. Discovered that recent Linux glibc's need -D_GNU_SOURCE (Wichert Akkerman).
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
      </sect2>
      <sect2 id="changelog-2-9"><title>Version 2.9</title>	
	<para>
	Open source release. Do not deploy unless you know what you are
doing. Stability is expected to return with 2.9.1, as are the binary builds.
	</para>
	<para>	
	<itemizedlist>
	<listitem>
	<para>
	License changed to the GNU General Public License version 2.
	</para>
	</listitem>
	<listitem>
	<para>
		Cleanups by Erik Bos @ xs4all.
	</para>
	</listitem>
	<listitem>
	<para>
		Build improvements by Wichert Akkerman
	</para>
	</listitem>
	<listitem>
	<para>
		Lots of work on the build system, entirely revamped. By PowerDNS.
	</para>
	</listitem>
	</itemizedlist>
	</sect2>
	
      <sect2 id="changelog-2-8"><title>Version 2.8</title>	
	<para>
	  From this release onwards, we'll concentrate on stabilising for the 3.0 release. So if you have any must-have features,
	  let us know soonest. The 2.8 release fixes a bunch of small stability issues and add two new features. In the spirit of the move to 
	  stability, this release has already been running 24 hours on our servers before release. 
	</para>
	<para>
	  <itemizedlist>
	    <listitem>
	      <para>
		pipe backend gains the ability to restricts its invocation to a limited number of requests. This allows a very busy nameserver
		to still serve packets from a slow perl backend. 
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		pipe backend now honors query-logging, which also documents which queries were blocked by the regex.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		pipe backend now has its own backend chapter.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		An incoming AXFR timeout at the wrong moment had the ability to crash the binary, forcing a reload. Thanks to our bug spotting
		champions Mike Benoit and Simon Kirby of NetNation for reporting this.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
      </sect2>
      <sect2 id="changelog-2-7"><title>Version 2.7 and 2.7.1</title>	
	<para>
	  This version fixes some very long standing issues and adds a few new features. If you are still running 2.6, upgrade yesterday. If you
	  were running 2.6.1, an upgrade is still strongly advised.
	</para>
	<para>
	  Features:
	  <itemizedlist>
	    <listitem>
	      <para>
		The controlsocket is now readable and writable by the 'setgid' user. This allows for non-root
		access to PDNS which is nice for mrtg or cricket graphs.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		MySQL backend (the non-generic one) gains the ability to read from a different table using the
		<command>mysql-table</command> setting.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		pipe backend now has a configurable timeout using the <command>pipe-timeout</command> setting. Thanks fo Steve Bromwich
		for pointing out the need for this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Experimental backtraces. If PowerDNS crashes, it will log a lot of numbers and sometimes more to the syslog.
		If you see these, please report them to us. Only available under Linux.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Bugs:
	  <itemizedlist>
	    <listitem>
	      <para>
		2.7 briefly broke the mysql backend, so don't use it if you use that. 2.7.1 fixes this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		SOA records could sometimes have the wrong TTL. Thanks to Jonas Daugaard for reporting this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		An ANY query might lead to duplicate SOA records being returned under exceptional circumstances. 
		Thanks to Jonas Daugaard for reporting this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Underlying the above bug, packet compression could sometimes suddenly be turned off, leading to
		overly large responses and non-removal of duplicate records.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		The <command>allow-axfr-ips</command> setting did not accept IP ranges (1.2.3.0/24) which the 
		documentation claimed it did (thanks to Florus Both of Ascio technologies for being sufficiently persistent in reporting this).
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Killed backends were not being respawned, leading to suboptimal behaviour on intermittent database errors. Thanks to Steve Bromwich for
		reporting this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Corrupt packets during an incoming AXFR when acting as a slave would cause a PowerDNS reload instead of just failing that AXFR. 
		Thanks to Mike Benoit and Simon Kirby of NetNation for reporting this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Label compression in incoming AXFR had problems with large offsets, causing the above mentioned errors. Thanks to Mike Benoit
		and Simon Kirby of NetNation for reporting this.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
      </sect2>
	      
      <sect2 id="changelog-2-6-1"><title>Version 2.6.1</title>	
	<para>
	  Quick fix release for a big cache problem. 
	</para>
      </sect2>
      <sect2 id="changelog-2-6"><title>Version 2.6</title>
	<para>
	  Performance release. A lot of work has been done to raise PDNS performance to staggering levels in order to take part
	  in benchmarketing efforts. Together with our as yet unnamed partner, PDNS has been benchmarked at 60.000 mostly cached queries/second
	  on off the shelf PC hardware. Uncached performance was 17.000 uncached DNS queries/second on the .ORG domain.
	</para>
	<para>
	  Performance has been increased by both making PDNS itself quicker but also by lowering the number of backend queries typically needed. Operators
	  will typically see PDNS taking less CPU and the backend seeing less load.
	</para>
	<para>
	  Furthermore, some real bugs were fixed. A couple of undocumented performance switches may appear in --help output but you are advised to stay
	  away from these.
	</para>
	<para>
	  Developers: this version needs the pdns-2.5.1 development kit, available on <ulink url="http://downloads.powerdns.com/releases/dev">
	    http://downloads.powerdns.com/releases/dev</ulink>. See also <xref linkend="backend-writers-guide">.
	</para>
	<para>
	  Performance:
	  <itemizedlist>
	    <listitem>
	      <para>
		A big error in latency calculations - cached packets were weighed 50 times less, leading to inflated latency reporting. Latency calculations
		are now correct and way lower - often in the microseconds range.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		It is now possible to run with 0 second cache TTLs. This used to cause very frequent cache cleanups, leading
		to performance degradation.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Many tiny performance improvements, removing duplicate cache key calculations, etc. The cache itself has also been reworked 
		to be more efficient.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		First 'CNAME' backend query replaced by an 'ANY' query, which most of the time returns the actual record,
		preventing the need for a separate CNAME lookup, halving query load.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Much of the same for same-level-NS records on queries needing delegation.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Bugs fixed:
	  <itemizedlist>
	    <listitem>
	      <para>
		Incidentally, the cache count would show 'unknown' packets, which was harmless but confusing. Thanks to Mike and Simon of
		NetNation for reporting this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		SOA hostmaster with a . in the local-part would be cached wrongly, leading to a stray backslash
		in case of multiple successively SOA queries. Thanks to Ascio Techologies for spotting this bug.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		zone2sql did not parse Verisign zonefiles correctly as these contained a $TTL statement in mid-record.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Sometimes packets would not be accounted, leading to 'udp-queries' and 'udp-answers' divergence.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Features:
	  <itemizedlist>
	    <listitem>
	      <para>
		'cricket' command added to init.d scripts that provides unadorned output for parsing by 'Cricket'.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
      </sect2>
      <sect2 id="changelog-2-5-1"><title>Version 2.5.1</title>
	<para>
	  <ulink url="http://www.tuxedo.org/~esr/jargon/html/entry/brown-paper-bag-bug.html">Brown paper bag</ulink> release fixing 
	    a huge memory leak in the new Query Cache.
	</para>
	<para>
	  Developers: this version needs the new pdns-2.5.1 development kit, available on <ulink url="http://downloads.powerdns.com/releases/dev">
	    http://downloads.powerdns.com/releases/dev</ulink>. See also <xref linkend="backend-writers-guide">.
	</para>
	<para>
	  And some small changes:
	  <itemizedlist>
	    <listitem>
	      <para>
		Added support for RFC2038 compliant negative-answer caching. This allows remotes to cache the fact that 
		a domain does not exist and will not exist for a while. Thanks to Chris Thompson for <ulink url="http://ops.ietf.org/lists/namedroppers/namedroppers.2002/msg01697.html">pointing out how tiny our minds are</ulink>. This feature may cause a noticeable reduction
		in query load.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Small speedup to non-packet-cached queries, incidentally fixing the huge memory leak.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<command>pdns_control ccounts</command> command outputs statistics on what is in the cache, which is
		useful to help optimize your caching strategy.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
      </sect2>
      <sect2 id="changelog-2-5"><title>Version 2.5</title>
	<para>
	  An important release which has seen quite a lot of trial and error testing. As a result, PDNS can now run with a huge cache
	  and concurrent invalidations. This is useful when running of a slower database or under high traffic load with a fast database.
	</para>
	<para>
	  Furthermore, the gpgsql2 backend has been validated for use and will soon supplant the gpgsql backend entirely. This also bodes 
	  well for the gmysql backend which is the same code.
	</para>
	<para>
	  Also, a large amount of issues biting large scale slave operators were addressed. Most of these issues would only show up 
	  after prolonged uptime.
	</para>
	<para>
	  New features:
	  <itemizedlist>
	    <listitem>
	      <para>
		Query cache. The old Packet Cache only cached entire questions and their answers. This is very CPU efficient but
		does not lead to maximum hitrate. Two packets both needing to resolve smtp.you.com internally would not benefit 
		from any caching. Furthermore, many different DNS queries lead to the same backend queries, like 'SOA for .COM?'.
	      </para>
	      <para>
		PDNS now also caches backend queries, but only those having no answer (the majority) and those having one answer 
		(almost the rest). 
	      </para>
	      <para>
		In tests, these additional caches appear to halve the database backend load numerically and perhaps even more in terms
		of CPU load. Often, queries with no answer are more expensive than those having one.
	      </para>
	      <para>
		The default <command>ttl</command>s for the query-cache and negquery-cache are set to safe values (20 and 60 seconds
		respectively), you should be seeing an improvement in behaviour without sacrificing a lot in terms of quick updates.
	      </para>
	      <para>
		The webserver also displays the efficiency of the new Query Cache.
	      </para>
	      <para>
		The old Packet Cache is still there (and useful) but see <xref linkend="performance"> for more details.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		There is now the ability to shut off some logging at a very early stage. High performance sites doing thousands of 
		queries/second may in fact spend most of their CPU time on attempting to write out logging, even though it is ignored
		by syslog. The new flag <command>log-dns-details</command>, on by default, allows the operator to kill most 
		informative-only logging before it takes any cpu.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Flags which can be switched 'on' and 'off' can now also be set to 'off' instead of only to 'no' to turn them off.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Enhancements:
	  <itemizedlist>
	    <listitem>
	      <para>
		Packet Cache is now case insensitive, leading to a higher hitrate because identical queries only differing in case
		now both match. Care is taken to restore the proper case in the answer sent out.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Packet Cache stores packets more efficiently now, savings are estimated at 50%. 
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		The Packet Cache is now asynchronous which means that PDNS continues to answer questions while the cache
		is busy being purged or queried. Incidentally this will mean a cache miss where previously the question would
		wait until the cache became available again. 
	      </para>
	      <para>
		The upshot of this is that operators can call <command>pdns_control purge</command> as often as desired without
		fearing performance loss. Especially the full, non-specific, purge was speeded up tremendously. 
	      </para>
	      <para>
		This optimization is of little merit for small sites but is very important when running with a large packetcache, such
		as when using recursion under high load.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		AXFR log messages now all contain the word 'AXFR' to ease grepping.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Linux static version now compiled with gcc 3.2 which is known to output better and faster code than the previously
		used 3.0.4.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Bugs fixed:
	  <itemizedlist>
	    <listitem>
	      <para>
		Packetcache would sometimes send packets back with slightly modified flags if these differed from the flags
		of the cached copy.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Resolver code did bad things with filedescriptors leading to fd exhaustion after prolonged uptimes and many slave
		SOA currency checks. 
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Resolver code failed to properly log some errors, leading to operator uncertainty regarding to AXFR problems with
		remote masters.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		After prolonged uptime, slave code would try to use privileged ports for originating queries, leading to bad
		replication efficiency.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Masters sending back answers in differing case from questions would lead to bogus 
		'Master tried to sneak in out-of-zone data' errors and failing AXFRs.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
      </sect2>
      <sect2 id="changelog-2-4"><title>Version 2.4</title>
	<para>
	  Developers: this version is compatible with the pdns-2.1 development kit, available on <ulink url="http://downloads.powerdns.com/releases/dev">
	    http://downloads.powerdns.com/releases/dev</ulink>. See also <xref linkend="backend-writers-guide">.
	</para>
	<para>
	  This version fixes some stability issues with malformed or malcrafted packets. An upgrade is advised. Furthermore, there are interesting new 
	  features.
	</para>
	<para>
	  New features:
	</para>
	<para>
	  <itemizedlist>
	    <listitem>
	      <para>
		Recursive queries are now also cached, but in a separate namespace so non-recursive queries don't get recursed answers and
		vice versa. This should mean way lower database load for sites running with the current default lazy-recursion. Up to now,
		each and every recursive query would lead to a large amount of SQL queries.
	      </para>
	      <para>
		To prevent the packetcache from becoming huge, a separate <command>recursive-cache-ttl</command> can be specified.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		The ability to change parameters at runtime was added. Currently, only the new <command>query-logging</command> flag
		can be changed.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Added <command>query-logging</command> flag which hints a backend that it should output a textual representation of queries
		it receives. Currently only gmysql and gpgsql2 honor this flag.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Gmysql backend can now also talk to PgSQL, leading to less code. Currently, the old postgresql driver ('gpgsql') is still the default,
		the new driver is available as 'gpgsql2' and has the benefit that it does query logging. In the future, gpgsql2 will become the default
		gpgsql driver.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		DNS recursing proxy is now more verbose in logging odd events which may be caused by buggy recursing backends.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Webserver now displays peak queries/second 1 minute average.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Bugs fixed:
	  <itemizedlist>
	    <listitem>
	      <para>
		Failure to connect to database in master/slave communicator thread could lead to an unclean reload, fixed.
	      </para>
	    </listitem>
	  </itemizedlist>
	<para>
	  Documentation: added details for <command>strict-rfc-axfrs</command>. This feature can be used if very old clients need to be able
	  to do zone transfers with PDNS. Very slow.
	</para>
	
      </sect2>
      <sect2 id="changelog-2-3"><title>Version 2.3</title>
	<para>
	  Developers: this version is compatible with the pdns-2.1 development kit, available on <ulink url="http://downloads.powerdns.com/releases/dev">
	    http://downloads.powerdns.com/releases/dev</ulink>. See also <xref linkend="backend-writers-guide">.
	</para>
	<para>
	  This release adds the Generic MySQL backend which allows full master/slave semantics with MySQL and InnoDB tables (or other tables that support
	  transactions). See <xref linkend="generic-mypgsql-backends">.
	</para>
	<para>
	  Other new features:
	</para>
	<para>
	  <itemizedlist>
	    <listitem>
	      <para>
		Improved error messages in master/slave communicator will help down track problems.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<command>slave-cycle-interval</command> setting added. Very large sites with thousands of slave domains may need to raise this value
		above the default of 60. Every cycle, domains in undeterminate state are checked for their condition. Depending on the health of the masters,
		this may entail many SOA queries or attempted AXFRs.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Bugs fixed:
	</para>
	<para>
	  <itemizedlist>
	    <listitem>
	      <para>
		'pdns_control purge <userinput>domain</userinput>' and  'pdns_control purge <userinput>domain$</userinput>' were broken in version 2.2 and 
		did not in fact purge the cache. There is a slight risk that domain-specific purge commands could force a reload in previous version.
		Thanks to Mike Benoit of NetNation for discovering this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Master/slave communicator thread got confused in case of delayed answers from slow masters. While not causing harm, this caused inefficient 
		behaviour when testing large amounts of slave domains because additional 'cycles' had to pass before all domains would have their status
		ascertained. 
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Backends implementing special SOA semantics (currently only the undocumented 'pdns express backend', or homegrown backends) would 
		under some circumstances not answer the SOA record in case of an ANY query. This should put an end to the last DENIC problems. Thanks to
		DENIC for helping us find the problem.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
      </sect2>
      <sect2 id="changelog-2-2"><title>Version 2.2</title>
	<para>
	  Developers: this version is compatible with the pdns-2.1 development kit, available on <ulink url="http://downloads.powerdns.com/releases/dev">
	    http://downloads.powerdns.com/releases/dev</ulink>. See also <xref linkend="backend-writers-guide">.
	</para>
	<para>
	  Again a big release. PowerDNS is seeing some larger deployments in more demanding environments and these are helping shake out remaining issues,
	  especially with recursing backends.
	</para>
	<para>
	  The big news is that wildcard CNAMEs are now supported, an oft requested feature and nearly the only part in which PDNS differed from BIND in 
	  authoritative capabilities.
	</para>
	<para>
	  If you were seeing signal 6 errors in PDNS causing reloads and intermittent service disruptions, please upgrade to this version.
	</para>
	<para>
	  For operators of PowerDNS Express trying to host .DE domains, the very special <command>soa-serial-offset</command> feature has been added
	  to placate the new DENIC requirement that the SOA serial be at least six digits. PowerDNS Express uses the SOA serial as an actual serial and 
	  not to insert dates and hence often has single digit soa serial numbers, causing big problems with .DE redelegations.
	</para>
	<para>
	  Bugs fixed:
	  <itemizedlist>
	    <listitem>
	      <para>
		Malformed or shortened TCP recursion queries would cause a signal 6 and a reload. Same for EOF from the TCP recursing backend.
		Thanks to Simon Kirby and Mike Benoit of NetNation for helping debug this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Timeouts on the TCP recursing backend were far too long, leading to possible exhaustion of TCP resolving threads.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<command>pdns_control purge domain</command> accidentally cleaned all packets with that name as a prefix. Thanks to Simon Kirby 
		for spotting this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Improved exception error logging - in some circumstances PDNS would not properly log the cause of an exception, which hampered problem
		resolution.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>	
	<para>
	  New features:
	  <itemizedlist>
	    <listitem>
	      <para>
		Wildcard CNAMEs now work as expected!
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<command>pdns_control purge</command> can now also purge based on suffix, allowing operators to 
		purge an entire domain from the packet cache instead of only specific records. See also <xref linkend="pdnscontrol">
		Thanks to Mike Benoit for this suggestion. 
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<command>soa-serial-offset</command> for installations with small SOA serial numbers wishing to register .DE domains
		with DENIC which demands six-figure SOA serial numbers. See also <xref linkend="all-settings">.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
      </sect2>
      <sect2 id="changelog-2-1"><title>Version 2.1</title>
	<para>
	  This is a somewhat bigger release due to pressing demands from customers. An upgrade is advised for installations using Recursion. 
	  If you are using recursion, it is vital that you are aware of changes in semantics. Basically, local data will now override data in your
	  recursing backend under most circumstances. Old behaviour can be restored by turning <command>lazy-recursion</command> off.
	</para>
	<para>
	  Developers: this version has a new pdns-2.1 development kit, available on <ulink url="http://downloads.powerdns.com/releases/dev">
	    http://downloads.powerdns.com/releases/dev</ulink>. See also <xref linkend="backend-writers-guide">.
	</para>
	<para>
	  <warning>
	    <para>
	      Most users will run a static version of PDNS which has no dependencies on external libraries. However, some may need to run the dynamic version.
	      This warning applies to these users.
	    </para>
	    <para>
	      To run the dynamic version of PDNS, which is needed for backend drivers which are only available in source form, gcc 3.0 is required.
	      RedHat 7.2 comes with gcc 3.0 as an optional component, RedHat 7.3 does not. However, the RedHat 7.2 Update gcc rpms install just fine
	      on RedHat 7.3. For Debian, we suggest running 'woody' and installing the g++-3.0 package. We expect to release a FreeBSD dynamic version
	      shortly.
	    </para>
	  </warning>
	</para>
	      
	<para>
	  Bugs fixed:
	  <itemizedlist>
	    <listitem>
	      <para>
		RPM releases sometimes overwrote previous configuration files. Thanks to Jorn Ekkelenkamp of Hubris/ISP Services for reporting this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		TCP recursion sent out overly large responses due to a byteorder mistake, confusing some clients.  Thanks to the capable engineers 
		of NetNation for bringing this to our attention.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		TCP recursion in combination with a recursing backend on a non-standard port did not work, leading to a
		non-functioning TCP listener. Thanks to the capable engineers of NetNation for bringing this to our attention.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Unexpected behaviour:
	  <itemizedlist>
	    <listitem>
	      <para>
		Wildcard URL records where not implemented because they are a performance penalty. To turn these on, enable 
		<command>wildcard-url</command> in the configuration.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Unlike other nameservers, local data did not override the internet for recursing queries. This has mostly been brought into conformance
		with user expectations. If a recursive question can be answered entirely from local data, it is. To restore old behaviour, disable
		<command>lazy-recursion</command>. Also see <xref linkend="recursion">.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Features:
	  <itemizedlist>
	    <listitem>
	      <para>
		Oracle support has been tuned, leading to the first public release of the Oracle backend. Zone2sql now outputs better SQL
		and the backend is now fully documented. Furthermore, the queries are compatible with the PowerDNS XML-RPC product, allowing 
		PowerDNS express to run off Oracle. See <xref linkend="oracle">.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Zone2sql now accepts --transactions to wrap zones in a transaction for PostgreSQL and Oracle output. This is a major speedup and also
		makes for better isolation of inserts. See <xref linkend="zone2sql">.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<command>pdns_control</command> now has the ability to purge the PowerDNS cache or parts of it. This enables operators to 
		raise the TTL of the Packet Cache to huge values and only to invalidate the cache when changes are made. See also <xref linkend="performance"> and
		<xref linkend="pdnscontrol">.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
      </sect2>
      <sect2 id="changelog-2-0-1"><title>Version 2.0.1</title>
	<para>
	  Maintenance release, fixing three small issues.
	</para>
	<para>
	  Developers: this version is compatible with 1.99.11 backends.
	</para>
	<para>
	  <itemizedlist>
	    <listitem>
	      <para>
		PowerDNS ignored the <command>logging-facility</command> setting unless it was specified on the commandline. 
		Thanks to Karl Obermayer from WebMachine Technologies for noticing this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Zone2sql neglected to preserve 'slaveness' of domains when converting to the slave capable PostgreSQL backend. Thanks
		to Mike Benoit of NetNation for reporting this. Zone2sql now has a <command>--slave</command> option.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		SOA Hostmaster addresses with dots in them before the @-sign were mis-encoded on the wire.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
      </sect2>
      <sect2 id="changelog-2-0"><title>Version 2.0</title>
	<para>
	  Two bugfixes, one stability/security related. No new features.
	</para>
	<para>
	  Developers: this version is compatible with 1.99.11 backends.
	</para>
	<para>
	  Bugfixes:
	</para>
	<para>
	  <itemizedlist>
	    <listitem>
	      <para>
		zone2sql refused to work under some circumstances, taking 100% cpu and not functioning. Thanks to Andrew Clark and Mike Benoit 
		for reporting this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Fixed a stability issue where malformed packets could force PDNS to reload. Present in all earlier 2.0 versions.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
      </sect2>
      <sect2 id="changelog-2-0-rc2"><title>Version 2.0 Release Candidate 2</title>
	<para>
	  Mostly bugfixes, no really new features.
	</para>
	<para>
	  Developers: this version is compatible with 1.99.11 backends.
	</para>
	<para>
	  Bugs fixed:
	</para>
	<para>
	  <itemizedlist>
	    <listitem>
	      <para>
		chroot() works again - 2.0rc1 silently refused to chroot. Thanks to Hub Dohmen for noticing this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		setuid() and setgid() security features were silently not being performed in 2.0rc1. Thanks to Hub Dohmen for noticing this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		MX preferences over 255 now work as intended. Thanks to Jeff Crowe for noticing this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		IPv6 clients can now also benefit from the recursing backend feature. Thanks to Andy Furnell for proving beyond any doubt that this
		did not work.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Extremely bogus code removed from DNS notification reception code - please test! Thanks to Jakub Jermar for working with us
		in figuring out just how broken this was.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		AXFR code improved to handle more of the myriad different zonetransfer dialects available. Specifically, interoperability 
		with Bind 4 was improved, as well as Bind 8 in 'strict rfc conformance' mode. Thanks again for Jakub Jermar for running many tests for us.
		If your transfers failed with 'Unknown type 14!!' or words to that effect, this was it.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Features:
	  <itemizedlist>
	    <listitem>
	      <para>
		Win32 version now has a zone2sql tool.
	      </para>	  
	    </listitem>
	    <listitem>
	      <para>
		Win32 version now has support for specifying how urgent messages should be before they go to the NT event log.
	      </para>	  
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Remaining issues:
	  <itemizedlist>
	    <listitem>
	      <para>
		One persistent report of the default 'chroot=./' configuration not working.
	      </para>	  
	    </listitem>
	    <listitem>
	      <para>
		One report of disable-axfr and allow-axfr-ips not working as intended.
	      </para>	  
	    </listitem>
	    <listitem>
	      <para>
		Support for relative paths in zones and in Bind configuration is not bug-for-bug compatible with bind yet.
	      </para>	  
	    </listitem>
	  </itemizedlist>
	</para>
      </sect2>
      <sect2 id="changelog-2-0-rc1"><title>Version 2.0 Release Candidate 1</title>
	<para>
	  The MacOS X release! A very experimental OS X 10.2 build has been added. Furthermore, the Windows version is now in line with Unix with 
	  respect to capabilities. The ODBC backend now has the code to function as both a master and a slave.
	</para>
	<para>
	  Developers: this version is compatible with 1.99.11 backends.
	</para>
	<para>
	  <itemizedlist>
	    <listitem>
	      <para>
		Implemented native packet response parsing code, allowing Windows to perform AXFR and NS and SOA queries.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		This is the first version for which we have added support for Darwin 6.0, which is part of the forthcoming Mac OS X 10.2. 
		Please note that although this version is marked RC1, that we have not done extensive testing yet. Consider this a technology 
		preview.                                
	      </para>
	      <para>
		<itemizedlist>
		  <listitem><para>
		      The Darwin version has been developed on Mac OS X 10.2 (6C35). Other versions may or may not work. 
		    </para></listitem>
		  <listitem><para>
		      Currently only the random, bind, mysql and pdns backends are included.
		    </para></listitem>

		  <listitem><para>
		      The menu based installer script does not work, you will have to edit         pathconfig by hand as outlined in chapter 2.
		    </para></listitem>

		  <listitem><para>
		      On Mac OS X Client, PDNS will fail to start because a system service         is already bound to port 53. 
		    </para></listitem>
		</itemizedlist>
	      </para>
	      <para>
		This version is distributed as a compressed tar file. You should follow the generic UNIX installation instructions. 
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Bugs fixed:
	  <itemizedlist>
	    <listitem>
	      <para>
		Zone2sql PostgreSQL mode neglected to lowercase $ORIGIN. Thanks to Maikel Verheijen of Ladot for spotting this.
	      </para>	  
	    </listitem>
	    <listitem>
	      <para>
		Zone2sql PostgreSQL mode neglected to remove a trailing dot from $ORIGIN if present. 
		Thanks to Thanks to Maikel Verheijen of Ladot for spotting this.
	      </para>	  
	    </listitem>
	    <listitem>
	      <para>
		Zonefile parser was not compatible with bind when $INCLUDING non-absolute filenames. Thanks to Jeff Miller for working out 
		how this should work. 
	      </para>	  
	    </listitem>
	    <listitem>
	      <para>
		Bind configuration parser was not compatible with bind when including non-absolute filenames. Thanks to Jeff Miller for working out 
		how this should work. 
	      </para>	  
	    </listitem>
	    <listitem>
	      <para>
		Documentation incorrectly listed the Bind backend as 'slave capable'. This is not yet true, now labeled 'experimental'.
	      </para>	  
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Windows changes. We are indebted to Dimitry Andric who educated us in the ways of distributing Windows software.
	  <itemizedlist>
	    <listitem>
	      <para>
		<filename>pdns.conf</filename> is now read if available.
	      </para>	  
	    </listitem>
	    <listitem>
	      <para>
		Console version responds to ^c now.
	      </para>	  
	    </listitem>
	    <listitem>
	      <para>
		Default pdns.conf added to distribution
	      </para>	  
	    </listitem>
	    <listitem>
	      <para>
		Uninstaller missed several files, leaving remnants behind
	      </para>	  
	    </listitem>

	    <listitem>
	      <para>
		DLLs are now installed locally, with the pdns executable.
	      </para>	  
	    </listitem>

	    <listitem>
	      <para>
		pdns_control is now also available on Windows
	      </para>	  
	    </listitem>
	    <listitem>
	      <para>
		ODBC backend can now act as master and slave. Experimental.
	      </para>	  
	    </listitem>
	    <listitem>
	      <para>
		The example zone missed indexes and had other faults. 
	      </para>	  
	    </listitem>
	    <listitem>
	      <para>
		A runtime DLL that is present on most windows systems (but not all!) was missing.
	      </para>	  
	    </listitem>
	  </itemizedlist>
	</para>
      </sect2>
      <sect2 id="changelog-1-99-12"><title>Version 1.99.12 Prerelease</title>
	<para>
	  The Windows release! See <xref linkend="windows">. Beware, windows support is still very fresh and untested. Feedback is very welcome.
	</para>
	<para>
	  Developers: this version is compatible with 1.99.11 backends.
	</para>
	<para>
	  <itemizedlist>
	    <listitem>
	      <para>
		Windows 2000 codebase merge completed. This resulted in quite some changes on the Unix end of things, so this may impact reliability
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		ODBC backend added for Windows. See <xref linkend="odbc">.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		IBM DB2 Universal Database backend available for Linux. See <xref linkend="db2">.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Zone2sql now understands $INCLUDE. Thanks to Amaze Internet for nagging about this
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		The SOA Mininum TTL now has a configurable default (<command>soa-minimum-ttl</command>)value to placate the DENIC requirements.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Added a limit on the simultaneous numbers of TCP connections to accept (<command>max-tcp-connections</command>). Defaults to 10. 
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Bugs fixed:
	  <itemizedlist>
	    <listitem>
	      <para>
		When operating in virtual hosting mode (See <xref linkend="virtual">), the additional init.d scripts would not function correctly
		and interface with other pdns instances.
	      </para>	  
	    </listitem>
	    <listitem>
	      <para>
		PDNS neglected to conserve case on answers. So a query for WwW.PoWeRdNs.CoM would get an answer listing the address of www.powerdns.com. 
		While this did not confuse resolvers, it is better to conserve case. This has semantical concequences for all backends, which the documentation
		now spells out.
	      </para>	  
	    </listitem>
	    <listitem>
	      <para>
		PostgreSQL backend was case sensitive and returned only answers in case an exact match was found. The Generic PostgreSQL backend is now 
		officially all lower case and zone2sql in PostgreSQL mode enforces this.
		Documentation has been been updated to reflect the case change. Thanks to Maikel Verheijen of Ladot for 
		spotting this!
	      </para>	  
	    </listitem>
	    <listitem>
	      <para>
		Documentation bug - postgresql create/index statements created a duplicate index. If you've previously copy pasted the commands and
		not noticed the error, execute <command>CREATE INDEX rec_name_index ON records(name)</command> to remedy. Thanks to Jeff Miller for reporting 
		this. This also lead to depressingly slow 'ANY' lookups for those of you doing benchmarks.
	      </para>	  
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Features:
	  <itemizedlist>
	    <listitem>
	      <para>
		pdns_control (see <xref linkend="pdnscontrol">) now opens the local end of its socket in <filename>/tmp</filename> instead of next to the
		remote socket (by default <filename>/var/run</filename>). This eases the way for allowing non-root access to pdns_control. When running chrooted 
		(see <xref linkend="security">), the local socket again moves back to <filename>/var/run</filename>.
	      </para>	  
	    </listitem>
	    <listitem>
	      <para>
		pdns_control now has a 'version' command. See <xref linkend="pdnscontrol">.
	      </para>	  
	    </listitem>
	  </itemizedlist>

      </sect2>
      <sect2 id="changelog-1-99-11"><title>Version 1.99.11 Prerelease</title>
	<para>
	  This release is important because it is the first release which is accompanied by an Open Source Backend Development Kit, allowing external 
	  developers to write backends for PDNS. Furthermore, a few bugs have been fixed:
	</para>
	<para>
	  <itemizedlist>
	    <listitem>
	      <para>
		Lines with only whitespace in zone files confused PDNS (thanks Henk Wevers)
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		PDNS did not properly parse TTLs with symbolic sufixes in zone files, ie 2H instead of 7200 (thanks Henk Wevers)
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
      </sect2>
      <sect2 id="changelog-1-99-10"><title>Version 1.99.10 Prerelease</title>
	<para>
	  IMPORTANT: there has been a tiny license change involving free public webbased dns hosting, check out the changes before deploying!
	</para>
	<para>
	  PDNS is now feature complete, or very nearly so. Besides adding features, a lot of 'fleshing out' work is done now. There is an important
	  performance bug fix which may have lead to disappointing benchmarks - so if you saw any of that, please try either this version or 1.99.8 which 
	  also does not have the bug.
	</para>
	<para>
	  This version has been very stable for us on multiple hosts, as was 1.99.9.
	</para>
	<para>
	  PostgreSQL users should be aware that while 1.99.10 works with the schema as presented in earlier versions, advanced features
	  such as master or slave support will not work unless you create the new 'domains' table as well.
	</para>
	<para>
	  Bugs fixed:
	  <itemizedlist>
	    <listitem>
	      <para>
		Wildcard AAAA queries sometimes received an NXDOMAIN error where they should have gotten an empty NO ERROR. Thanks to Jeroen Massar
		for spotting this on the .TK TLD!
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Do not disable the packetcache for 'recursion desired' packets unless a recursor was configured. Thanks to Greg Schueler for noticing this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		A failing backend would not be reinstated. Thanks to 'Webspider' for discovering this problem with PostgreSQL connections that die after
		prolonged inactivity.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Fixed loads of IPv6 transport problems. Thanks to Marco Davids and others for testing. Considered ready for production now.
	      </para>
	    </listitem>

	    <listitem>
	      <para>
		<command>Zone2sql</command> printed a debugging statement on range $GENERATE commands. Thanks to Rene van Valkenburg for spotting this.
	      </para>
	  </listitem>
	</itemizedlist>
	</para>
	<para>
	  Features:
	  <itemizedlist>
	    <listitem>
	      <para>
		PDNS can now act as a master, sending out notifications in case of changes and allowing slaves to AXFR. Big rewording of replication support,
		domains are now either 'native', 'master' or 'slave'. See <xref linkend="replication"> for lots of details.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<command>Zone2sql</command> in PostgreSQL mode now populates the 'domains' table for easy master, slave or native replication support.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Ability to disable those annoying Windows DNS Dynamic Update messages from appearing in the log. See <function>log-failed-updates</function>
		in <xref linkend="all-settings">.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Ability to run on IPv6 transport only
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Logging can now happen under a 'facility' so all PDNS messages appear in their own file. See <xref linkend="syslog">.
	      </para>
	    </listitem>

	    <listitem>
	      <para>
		Different OS releases of PDNS now get different install path defaults. Thanks to Mark Lastdrager for nagging about this and to Nero Imhard and
		Frederique Rijsdijk for suggesting saner defaults.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Infrastructure for 'also-notify' statements added.
	      </para>
	    </listitem>

	  </itemizedlist>
	</para>
      </sect2>
      <sect2 id="changelog-1-99-9"><title>Version 1.99.9 Early Access Prerelease</title>
	<para>
	  This is again a feature and an infrastructure release. We are nearly feature complete and will soon start
	  work on the backends to make sure that they are all master, slave and 'superslave' capable.
	</para>
	<para>
	  Bugs fixed:
	  <itemizedlist>
	    <listitem>
	      <para>
		PDNS sometimes sent out duplicate replies for packets passed to the recursing backend. Mostly a problem on SMP systems. Thanks to Mike Benoit
		for noticing this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Out-of-bailiwick CNAMES (ie, a CNAME to a domain not in PDNS) caused a 'ServFail' packet in 1.99.8, indicating failure, leading to hosts not 
		resolving. Thanks to Martin Gillstrom for noticing this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Zone2sql balked at zones editted under operating sytems terminating files with ^Z (Windows). Thanks Brian Willcott for reporting this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		PostgreSQL backend logged the password used to connect. Now only does so in case of failure to connect. Thanks to 'Webspider' for noticing this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Debian unstable distribution wrongly depended on home compiled PostgreSQL libraries. Thanks to Konrad Wojas for noticing this.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Features:
	  <itemizedlist>
	    <listitem>
	      <para>
		When operating as a slave, AAAA records are now supported in the zone. They were already supported in master zones.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		IPv6 transport support - PDNS can now listen on an IPv6 socket using the <command>local-ipv6</command> setting.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Very silly randombackend added which appears in the documentation as a sample backend. See <xref linkend="backend-writers-guide">.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		When transferring a slave zone from a master, out of zone data is now rejected. Malicious operators might try to insert bad records otherwise.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		'Supermaster' support for automatic provisioning from masters. See <xref linkend="supermaster">.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Recursing backend can now live on a non-standard (!=53) port. See <xref linkend="recursion">.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Slave zone retrieval is now queued instead of immediate, which scales better and is more resilient to temporary failures.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<command>max-queue-length</command> parameter. If this many packets are queued for database attention, consider the situation hopeless and 
		respawn.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Internal:
	  <itemizedlist>
	    <listitem>
	      <para>
		SOA records are now 'special' and each backend can optionally generate them in special ways. PostgreSQL backend does so 
		when operating as a slave.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Writing backends is now a lot easier. See <xref linkend="backend-writers-guide">.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Added Bindbackend to internal regression tests, confirming that it is compliant.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
      </sect2>
      <sect2 id="changelog-1-99-8"><title>Version 1.99.8 Early Access Prerelease</title>
	<para>
	  A lot of infrastructure work gearing up to 2.0. Some stability bugs fixed and a lot of new features.
	</para>
	<para>
	  Bugs fixed:
	  <itemizedlist>
	    <listitem>
	      <para>
		Bindbackend was overly complex and crashed on some systems on startup. Simplified launch code.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		SOA fields were not always properly filled in, causing default values to go out on the wire
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Obscure bug triggered by malicious packets (we know who you are) in SOA finding code fixed.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Magic serial number calculation contained a double free leading to instability.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Standards violation, questions for domains for which PDNS was unauthoritative now get a SERVFAIL answer. 
		Thanks to the IETF Namedroppers list for helping out with this.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Slowly launching backends were being relaunched at a great rate when queries were coming in while launching backends.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		MySQL-on-unix-domain-socket on SMP systems was overwhelmed by the quick connection rate on launch, inserted a small 50ms delay. 
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Some SMP problems appear to be compiler related. Shifted to GCC 3.0.4 for Linux.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Ran ispell on documentation.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Feature enhancements:
	  <itemizedlist>
	    <listitem>
	      <para>
		Recursing backend. See <xref linkend="recursion">. Allows recursive and authoritative DNS on the same IP address.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<link linkend="naptr">NAPTR support</link>, which is especially useful for the ENUM/E.164 community.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Zone transfers can now be allowed per <link linkend="allow-axfr-ips">netmask instead of only per IP address</link>.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Preliminary support for slave operation included. Only for the adventurous right now! See <xref linkend="slave"> 
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		All record types now documented, see <xref linkend="types">.
	      </para>
	    </listitem>
          </itemizedlist>
	</para>
	<sect3><title>Known bugs</title>
	  <para>
	    Wildcard CNAMES do not work as they do with bind.
	  </para>
	  <para>
	    Recursion sometimes sends out duplicate packets (fixed in 1.99.9 snapshots)
	  </para>
	  <para>
	    Some stability issues which are caught by the guardian
	  </para>
	</sect3>
	<sect3><title>Missing features</title>
	  <para>
            Features present in this document, but disabled or withheld from the current release:
            <itemizedlist>
              <listitem>
                <para>
                  gmysqlbackend, oraclebackend
                </para>
              </listitem>
            </itemizedlist>
            
	  </para>
	</sect3>

      </sect2>
      <sect2 id="changelog-1-99-7"><title>Version 1.99.7 Early Access Prerelease</title>
	<para>
	  Named.conf parsing got a lot of work and many more bind configurations can now be parsed. Furthermore, error reporting was improved.
	  Stability is looking good.
	</para>
	<para>
	  Bugs fixed:
	  <itemizedlist>
	    <listitem>
	      <para>
		Bind parser got confused by filenames with underscores and colons.
	      </para
	    </listitem>
	    <listitem>
	      <para>
		Bind parser got confused by spaces in quoted names
	      </para
	    </listitem>
	    <listitem>
	      <para>
		FreeBSD version now stops and starts when instructed to do so.
	      </para
	    </listitem>
	    <listitem>
	      <para>
		Wildcards were off by default, which violates standards. Now on by default.
	      </para
	    </listitem>
	    <listitem>
	      <para>
		--oracle was broken in zone2sql
	      </para
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Feature enhancements:
	  <itemizedlist>
	    <listitem>
	      <para>
		Line number counting goes on as it should when including files in named.conf
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Added --no-config to enable users to start the pdns daemon without parsing the configuration file.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		zone2sql now has --bare for unformatted output which can be used to generate insert statements for different database layouts
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		zone2sql now has --gpgsql, which is an alias for --mysql, to output in a format useful for the default Generic PgSQL backend
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		zone2sql is now documented.
	      </para>
	    </listitem>
          </itemizedlist>
	</para>
	<sect3><title>Known bugs</title>
	  <para>
	    Wildcard CNAMES do not work as they do with bind.
	  </para>
	</sect3>
	<sect3><title>Missing features</title>
	  <para>
            Features present in this document, but disabled or withheld from the current release:
            <itemizedlist>
              <listitem>
                <para>
                  gmysqlbackend, oraclebackend
                </para>
              </listitem>
            </itemizedlist>
            
            Some of these features will be present in newer releases.  
	  </para>
	</sect3>

      </sect2>
      <sect2><title>Version 1.99.6 Early Access Prerelease</title>
	<para>
	  This version is now running on dns-eu1.powerdns.net and working very well for us. But please remain cautious before 
	  deploying!
	</para>
	<para>
	  Bugs fixed:
	  <itemizedlist>
	    <listitem>
	      <para>
		Webserver neglected to show log messages
	      </para
	    </listitem>
	    <listitem>
	      <para>
		TCP question/answer miscounted multiple questions over one socket. Fixed misnaming of counter
	      </para
	    </listitem>
	    <listitem>
	      <para>
		Packetcache now detects clock skew and times out entries
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		named.conf parser now reports errors with line number and offending token
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Filenames in named.conf can now contain :
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Feature enhancements:
	  <itemizedlist>
	    <listitem>
	      <para>
		The webserver now by default does not print out configuration statements, which might contain database backends. Use 
		<command>webserver-print-arguments</command> to restore the old behaviour.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Generic PostgreSQL backend is now included. Still rather beta.
	      </para>
	    </listitem>
          </itemizedlist>
	</para>
	<sect3><title>Known bugs</title>
	  <para>
	    FreeBSD version does not stop when requested to do so.
	  </para>
	  <para>
	    Wildcard CNAMES do not work as they do with bind.
	  </para>
	</sect3>
	<sect3><title>Missing features</title>
	  <para>

            Features present in this document, but disabled or withheld from the current release:
            <itemizedlist>
              <listitem>
                <para>
                  gmysqlbackend, oraclebackend
                </para>
              </listitem>
            </itemizedlist>
            
            Some of these features will be present in newer releases.  
	  </para>
	</sect3>

      </sect2>
      <sect2><title>Version 1.99.5 Early Access Prerelease</title>
	<para>
          The main focus of this release is stability and TCP improvements. This is the first release PowerDNS-the-company actually considers for running
          on its production servers!
	</para>
	<para>
	  Major bugs fixed:
	  <itemizedlist>
	    <listitem>
	      <para>
                Zone2sql received a floating point division by zero error on named.confs with less than 100 domains.
	      </para
	    </listitem>
	    <listitem>
	      <para>
                Huffman encoder failed without specific error on illegal characters in a domain
	      </para
	    </listitem>
	    <listitem>
	      <para>
                Fixed huge memory leaks in TCP code.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
                Removed further file descriptor leaks in guardian respawning code
	      </para>
	    </listitem>
	    <listitem>
	      <para>
                Pipebackend was too chatty.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
                pdns_server neglected to close fds 0, 1 &amp; 2 when daemonizing
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Feature enhancements:
	  <itemizedlist>
	    <listitem>
	      <para>
                bindbackend can be instructed not to check the ctime of a zone by specifying <command>bind-check-interval=0</command>,
                which is also the new default.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
                <command>pdns_server --list-modules</command> lists all available modules.
	      </para>
	    </listitem>
          </itemizedlist>
	</para>
	<para>
	  Performance enhancements:
	<itemizedlist>
	    <listitem>
	      <para>
                TCP code now only creates a new database connection for AXFR.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
                TCP connections timeout rather quickly now, leading to less load on the server.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<sect3><title>Known bugs</title>
	  <para>
	    FreeBSD version does not stop when requested to do so.
	  </para>
	  <para>
	    Wildcard CNAMES do not work as they do with bind.
	  </para>
	</sect3>
	<sect3><title>Missing features</title>
	  <para>

            Features present in this document, but disabled or withheld from the current release:
            <itemizedlist>
              <listitem>
                <para>
                  gmysqlbackend, oraclebackend, gpgsqlbackend
                </para>
              </listitem>
            </itemizedlist>
            
            Some of these features will be present in newer releases.  
	  </para>
	</sect3>

      </sect2>
      <sect2><title>Version 1.99.4 Early Access Prerelease</title>
	<para>
	  A lot of new named.confs can now be parsed, zone2sql &amp; bindbackend have gained features and stability.
	</para>
	<para>
	  Major bugs fixed:
	  <itemizedlist>
	    <listitem>
	      <para>
		Label compression was not always enabled, leading to large reply packets sometimes.
	      </para
	    </listitem>
	    <listitem>
	      <para>
		Database errors on TCP server lead to a nameserver reload by the guardian.
	      </para
	    </listitem>
	    <listitem>
	      <para>
		MySQL backend neglected to close its connection properly.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		BindParser miss parsed some IP addresses and netmasks.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Truncated answers were also truncated on the packetcache, leading to truncated TCP answers.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Feature enhancements:
	  <itemizedlist>
	    <listitem>
	      <para>
		Zone2sql and the bindbackend now understand the Bind $GENERATE{} syntax.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Zone2sql can optionally gloss over non-existing zones with <command>--on-error-resume-next</command>.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Zone2sql and the bindbackend now properly expand @ also on the right hand side of records.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Zone2sql now sets a default TTL.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		DNS UPDATEs and NOTIFYs are now logged properly and sent the right responses.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Performance enhancements:
	<itemizedlist>
	    <listitem>
	      <para>
		'Fancy records' are no longer queried for on ANY queries - this is a big speedup.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<sect3><title>Known bugs</title>
	  <para>
	    FreeBSD version does not stop when requested to do so.
	  </para>
	  <para>
	    Zone2sql refuses named.confs with less than 100 domains.
	  </para>
	  <para>
	    Wildcard CNAMES do not work as they do with bind.
	  </para>
	</sect3>
	<sect3><title>Missing features</title>
	  <para>

            Features present in this document, but disabled or withheld from the current release:
            <itemizedlist>
              <listitem>
                <para>
                  gmysqlbackend, oraclebackend, gpgsqlbackend
                </para>
              </listitem>
            </itemizedlist>
            
            Some of these features will be present in newer releases.  
	  </para>
	</sect3>

      </sect2>
	    
      <sect2><title>Version 1.99.3 Early Access Prerelease</title>
	<para>
	  The big news in this release is the BindBackend which is now capable of parsing many more named.conf Bind configurations.
	  Furthermore, PDNS has successfully parsed very large named.confs with large numbers of small domains, as well as small numbers of
	  large domains (TLD).
	</para>
	<para>
	  Zone transfers are now also much improved.
	</para>
	<para>
	  Major bugs fixed:
	  <itemizedlist>
	    <listitem>
	      <para>
		zone2sql leaked file descriptors on each domain, used wrong Bison recursion leading to
		parser stack overflows. This limited the amount of domains that could be parsed to 1024.
	      </para
	    </listitem>
	    <listitem>
	      <para>
		zone2sql can now read all known zonefiles, with the exception of those containing $GENERATE
	      </para
	    </listitem>
	    <listitem>
	      <para>
		Guardian relaunching a child lost two file descriptors
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Don't die on a connection reset by peer during zone transfer.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Webserver does not crash anymore on ringbuffer resize
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Feature enhancements:
	  <itemizedlist>
	    <listitem>
	      <para>
		AXFR can now be disabled, and re-enabled per IP address
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		--help accepts a parameter, will then show only help items with that prefix.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
	      zone2sql now accepts a --zone-name parameter
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		BindBackend maturing - 9500 zones parsed in 3.5 seconds. No longer case sensitive.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<para>
	  Performance enhancements:
	<itemizedlist>
	    <listitem>
	      <para>
		Implemented RFC-breaking AXFR format (which is the industry standard). Zone transfers now zoom along
		at wirespeed (many megabits/s).
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	<sect3><title>Known bugs</title>
	  <para>
	    FreeBSD version does not stop when requested to do so.
	  </para>
	  <para>
	    BindBackend cannot parse zones with $GENERATE statements. 
	  </para>
	</sect3>
	<sect3><title>Missing features</title>
	  <para>

            Features present in this document, but disabled or withheld from the current release:
            <itemizedlist>
              <listitem>
                <para>
                  gmysqlbackend, oraclebackend, gpgsqlbackend
                </para>
              </listitem>
            </itemizedlist>
            
            Some of these features will be present in newer releases.  
	  </para>
	</sect3>

      </sect2>
	    
      <sect2><title>Version 1.99.2 Early Access Prerelease</title>
	<para>
	  Major bugs fixed:
	  <itemizedlist>
	    <listitem>
	      <para>
		Database backend reload does not hang the daemon anymore
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Buffer overrun in local socket address initialisation may have caused binding problems
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		setuid changed the uid to the gid of the selected user
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		zone2sql doesn't coredump on invocation anymore. Fixed lots of small issues.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Don't parse configuration file when creating configuration file. This was a problem with reinstalling.
	      </para>
	    </listitem>
	  </itemizedlist>
	  Performance improvements:
	  <itemizedlist>
	    <listitem>
	      <para>
		removed a lot of unnecessary gettimeofday calls
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		removed needless select(2) call in case of listening on only one address
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		removed 3 useless syscalls in the fast path
	      </para>
	    </listitem>
	  </itemizedlist>
	  Having said that, more work may need to be done. Testing on a 486 saw packet rates in a simple setup 
	  (question/wait/answer/question..) improve from 200 queries/second to over 400.
	</para>
	<para>
	  Usability improvements:
	  <itemizedlist>
	    <listitem>
	      <para>
		Fixed error checking in init.d script (<command>show</command>, <command>mrtg</command>)
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Added 'uptime' to the mrtg output
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		removed further GNUisms from installer and init.d scripts for use on FreeBSD
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Debian package and apt repository, thanks to Wichert Akkerman.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		FreeBSD /usr/ports, thanks to Peter van Dijk (in progress).
	      </para>
	    </listitem>
	  </itemizedlist>


	</para>
	<para>
	  Stability may be an issue as well as performance. This version has a tendency to log a bit too much which slows 
	  the nameserver down a lot.
	</para>
	<sect3><title>Known bugs</title>
	  <para>
	    Decreasing a ringbuffer on the website is a sure way to crash the daemon. Zone2sql, while improved, still
	    has problems with a zone in the following format:
	    
	    <programlisting>
name         IN            A        1.2.3.4
             IN            A        1.2.3.5
	    </programlisting>

	    To fix, add 'name' to the second line.
	  </para>
	  <para>
	    Zone2sql does not close filedescriptors.
	  <para>

	  <para>
	    FreeBSD version does not stop when requested via the init.d script.
	  <para>

	</sect3>
	<sect3><title>Missing features</title>
	  <para>
            Features present in this document, but disabled or withheld from the current release:
            <itemizedlist>
              <listitem>
                <para>
                  gmysqlbackend, oraclebackend, gpgsqlbackend
                </para>
              </listitem>
              <listitem>
                <para>
                  fully functioning bindbackend - will try to parse named.conf, but probably fail
                </para>
              </listitem>
            </itemizedlist>
            
            Some of these features will be present in newer releases.  


	  </para>
	</sect3>
      </sect2>
      <sect2><title>Version 1.99.1 Early Access Prerelease</title>
	<para>
	  This is the first public release of what is going to become PDNS 2.0. As such, it is not of production quality. 
	  Even PowerDNS-the-company does not run this yet.
	</para>
	<para>
	  Stability may be an issue as well as performance. This version has a tendency to log a bit too much which slows 
	  the nameserver down a lot.
	</para>
	<sect3><title>Known bugs</title>
	  <para>
	    Decreasing a ringbuffer on the website is a sure way to crash the daemon. Zone2sql is very buggy.
	  </para>
	</sect3>
	<sect3><title>Missing features</title>
	  <para>
            Features present in this document, but disabled or withheld from the current release:
            <itemizedlist>
              <listitem>
                <para>
                  gmysqlbackend, oraclebackend, gpgsqlbackend
                </para>
              </listitem>
              <listitem>
                <para>
                  fully functioning bindbackend - will not parse configuration files
                </para>
              </listitem>
            </itemizedlist>
            
            Some of these features will be present in newer releases.  


	  </para>
	</sect3>
      </sect2>
    </sect1>
    <sect1 id="thanks-to"><title>Acknowledgements</title>
      <para>
	PowerDNS is grateful for the help of the following people or institutions:
	<itemizedlist>
	  <listitem><para>Dave Aaldering</para></listitem>
	  <listitem><para>Wichert Akkerman</para></listitem>
	  <listitem><para>Antony Antony</para></listitem>
	  <listitem><para>Mike Benoit (NetNation Communication Inc.)</para></listitem>
	  <listitem><para>Peter van Dijk</para></listitem>
	  <listitem><para>Koos van den Hout</para></listitem>
	  <listitem><para>Andre Koopal</para></listitem>
	  <listitem><para>Eric Veldhuyzen</para></listitem>
	  <listitem><para>Paul Wouters</para></listitem>
	  <listitem><para>Thomas Wouters</para></listitem>
	  <listitem><para>IETF Namedroppers mailinglist</para></listitem>
	</itemizedlist>
	Thanks!
      </para>
      <para>
	(these people don't share the blame for any errors or mistakes in powerdns - those are all ours)
      </para>
  </Chapter>

<Chapter id="installing-on-unix">
<Title>Installing on Unix</Title>

<Para>
After unpacking the PDNS distribution the files need to be moved to
appropriate locations.
</Para>

<Para>
PDNS can be installed in a variety of directories, which can easily be
customised to local policy. Two ways are available - manual and via a menu. 
</Para>

<Para>
The menu is invoked by executing the './choosepaths' script and answering the
questions. The manual way involves editing the 'pathconfig' file. The choice
is up to you.
</Para>

<Para>
After deciding paths, change to root and execute the 'installer' script. 
This will:
      <itemizedlist>
	<listitem>
	  <para>Configure the PowerDNS binary so it knows where the configuration directory is</para>
	</listitem>
	<listitem>
	  <para>If necessary, create the configuration directory</para>
	</listitem>
	<listitem>
	  <para>Write sample configuration file (not overwriting existing one)</para>
	</listitem>
	<listitem>
	  <para>Write a SysV-style init.d script in the configured directory</para>
	</listitem>
	<listitem>
	  <para>Move binaries and libraries to the configured places</para>
	</listitem>
      </itemizedlist>
    </Para>
    
    <sect1 id="problems">
      <title>Possible problems at this point</title>
      <para>
	At this point some things may have gone wrong. Typical errors include:
	<variablelist>
	  <varlistentry>
	    <term><errortype>error while loading shared libraries: libstdc++.so.x: cannot open shared object file: No such file or directory</errortype></term>
	    <listitem>
	      <para>
		Errors looking like this indicate a mismatch between your PDNS distribution and your Unix operating system. Download the static PDNS
		distribution for your operating system and try again. Please contact <email>pdns@powerdns.com</email> if this is impractical.
	      </para>
	    </listitem>
	  </varlistentry>



	</variablelist>
      </para>
    </sect1>

<Sect1 id="testing">
<Title>Testing your install</Title>
      <para>
	After installing, it is a good idea to test the basic functionality of the software before configuring database backends.
	For this purpose, PowerDNS contains the 'bindbackend' which has a domain built in example.com, which is
	officially reserved for testing.

	To test, edit <filename>pdns.conf</filename> and add the following if not already present:
	
	<screen>
	  launch=bind
	  bind-example-zones
	</screen>

	This configures powerdns to 'launch' the bindbackend, and enable the example zones. To fire up PDNS in testing mode, execute: 
	<command>/etc/init.d/pdns monitor</command>, where you may have to substitute the location of your SysV init.d location you 
	specified earlier.

	In monitor mode, the pdns process runs in the foreground and is very verbose, which is perfect for testing your install.
	
	If everything went all right, you can query the example.com domain like this:
	<screen>
	  <command>host www.example.com 127.0.0.1</command>
	</screen>
	www.example.com should now have IP address 1.2.3.4. The <command>host</command> command can usually be found in the dnsutils 
	package of your operating system. Alternate command is: <command>dig www.example.com A @127.0.0.1</command> or even 
	<command>nslookup www.example.com 127.0.0.1</command>, although nslookup is not advised for DNS diagnostics.

	<itemizedlist>
	  <listitem>
	    <para>
	      example.com SOA record
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      example.com NS record pointing to ns1.example.com
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      example.com NS record pointing to ns2.example.com
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      example.com MX record pointing to mail.example.com
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      example.com MX record pointing to mail1.example.com
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      mail.example.com A record pointing to 4.3.2.1
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      mail1.example.com A record pointing to 5.4.3.2
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      ns1.example.com A record pointing to 4.3.2.1
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      ns2.example.com A record pointing to 5.4.3.2
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      host-0 to host-9999.example.com A record pointing to 2.3.4.5
	    </para>
	  </listitem>

	</itemizedlist>

	When satisfied that basic functionality is there, type <command>QUIT</command> to exit the monitor mode. 
	The adventurous may also type <command>SHOW *</command> to see some internal statistics. 

	In case of problems, you will want to read the following section.
      </para>
      
      <sect2>
	<title>Typical errors</title>
	<para>
	  At this point some things may have gone wrong. Typical errors include:
	  <variablelist>
	    <varlistentry>
	      <term><errortype>binding to UDP socket: Address already in use</errortype></term>
	      <listitem>
		<para>
		  This means that another nameserver is listening on port 53 already. You can resolve this problem
		  by determining if it is safe to shutdown the nameserver already present, and doing so. If uncertain,
		  it is also possible to run PDNS on another port. To do so, add <command>local-port=5300</command> to
		  <filename>pdns.conf</filename>, and try again. This however implies that you can only test your nameserver
		  as clients expect the nameserver to live on port 53.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term><errortype>binding to UDP socket: Permission denied</errortype></term>
	      <listitem>
		<para>
		  You must be superuser in order to be able to bind to port 53. If this is not a possibility,
		  it is also possible to run PDNS on another port. To do so, add <command>local-port=5300</command> to
		  <filename>pdns.conf</filename>, and try again. This however implies that you can only test your nameserver
		  as clients expect the nameserver to live on port 53.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term><errortype>Unable to launch, no backends configured for querying</errortype></term>
	      <listitem>
		<para>
		  PDNS did not find the <command>launch=bind</command> instruction in pdns.conf.
		</para>
	      </listitem>
	    </varlistentry>

	  </variablelist>
	</para>
      </sect2>
</Sect1>

    <sect1 id="pdns-on-unix">
    <Title>Running PDNS on unix</Title>

    <Para>
      PDNS is normally controlled via a SysV-style init.d script, often located in <filename>/etc/init.d</filename> or
      <filename>/etc/rc.d/init.d</filename>. This script accepts the following commands:
      <variablelist>
	<varlistentry>
	  <term>monitor</term>
	  <listitem>
	    <para>
	      Monitor is a special way to view the daemon. It executes PDNS in the foreground with 
	      a lot of logging turned on, which helps in determining startup problems. 

	      Besides running in the foreground, the raw PDNS control socket is made available. All external
	      communication with the daemon is normally sent over this socket. While useful, the control console 
	      is not an officially supported feature. Commands which work are: <command>QUIT</command>, <command>SHOW *</command>,
	      <command>SHOW varname</command>, <command>RPING</command>.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>start</term>
	  <listitem>
	    <para>
	      Start PDNS in the background. Launches the daemon but makes no special effort to determine success, 
	      as making database connections may take a while. Use <command>status</command> to query success. You
	      can safely run <command>start</command> many times, it will not start additional PDNS instances.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>restart</term>
	  <listitem>
	    <para>
	      Restarts PDNS if it was running, starts it otherwise.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>status</term>
	  <listitem>
	    <para>
	      Query PDNS for status. This can be used to figure out if a launch was successful.
	      The status found is prefixed by the PID of the main PDNS process. 
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>stop</term>
	  <listitem>
	    <para>
	      Requests that PDNS stop. Again, does not confirm success. Success can be ascertained with the <command>status</command> command.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>dump</term>
	  <listitem>
	    <para>
	      Dumps a lot of statistics of a running PDNS daemon. It is also possible to single out specific variable by using 
	      the <command>show</command> command.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>show variable</term>
	  <listitem>
	    <para>
	      Show a single statistic, as present in the output of the <command>dump</command>.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>mrtg</term>
	  <listitem>
	    <para>
	      See the performance monitoring <xref linkend="monitoring">.
	    </para>
	  </listitem>
	</varlistentry>

      </variablelist>
    </Para>

  </sect1>
</Chapter>

<Chapter id="windows">
  <Title>Installing on Microsoft Windows</Title>
    <para>
    <note>
      <para>
	  PowerDNS support for Windows is, as of 1.99.12, very recent and therefore quite 'beta'. For reliability, we currently advise the use of 
	  the Unix versions. Furthermore there is no support for master or slave operation in the ODBC backend, which is the only one provided currently. 
	  This will be fixed soon.
      </para>
    </note>
    </para>
    <para>
      As of 1.99.12, PowerDNS supports Windows natively. PDNS can act as an NT service and works with any ODBC drivers you may have.
    </para>
    <para>
      To install PowerDNS for Windows you should check if your PC meets the following requirements:
      <itemizedlist>
      <listitem>
	  <para>
	    A PC running Microsoft NT (with a recent servicepack and at least mdac 2.5), 2000 or XP.
	    </para>
	</listitem>
	<listitem>
	  <para>An ODBC source containing valid zone information (an example MS Access database is supplied in the form of <filename>powerdns.mdb</filename>).
    </para>
	</listitem>
      </itemizedlist>
  </para>

  <para>
    If your system meets these requirements, download the installer from <ulink url="http://www.powerdns.com/pdns/">http://www.powerdns.com/pdns/</ulink>.
    After downloading the file begin the installation procedure by starting <filename>powerdns-VERSION.exe</filename>.

  </para>

  <para>
    After installing the software you should create a valid ODBC source.
    To do this you have open the ODBC sources dialog: <filename>Start->Settings->Control Panel->Administrative Tools->Data Sources (ODBC)</filename>.
  </para>

  <para>
    We'll use the example zone database that is included in the installation to explain how to create a source.
  </para>

  <para>
    When you are in the ODBC sources dialog you activate the <filename>System DSN</filename> tab. 
    <note><para>It is important to create a System DSN instead of an User DNS, otherwise the ODBC backend cannot function.</para></note>
  </para>

  <para>
    Press <filename>Add...</filename>, then you have to select a driver.
  </para>

  <para>
    Select <filename>Microsoft Access Driver (*.mdb)</filename>.
  </para>

  <para>
    Use <filename>PowerDNS</filename> as the DSN name, you can leave the description empty.
  </para>

  <para>    
    Then press <filename>Select...</filename> to select the database (ie. <filename>C:\Program Files\PowerDNS\powerdns.mdb</filename>).
  </para>

  <para>
    Press <function>Ok</function> and you should be done.
  </para>
  
  <para>
    For more information, see <xref linkend="odbc">.
  </para>

  <sect1 id="windows-configuration">
    <title>Configuring PDNS on Microsoft Windows</title>

    <para>
      You can specify program parameters in the <filename>pdns.conf</filename> file
      which should be located in pdns directory (ie. <filename>C:\Program Files\PowerDNS\</filename>).
    </para>

    <para>
      To see a list of available parameters you can run <filename>pdns.exe --help</filename>.
    </para>

    <note>
      <para>
        A default configuration file has been supplied with the installation.
      </para>
    </note>

  </sect1>

    <sect1 id="running-on-windows">
      <title>Running PDNS on Microsoft Windows</title>

    <para>
      If you installed pdns on Windows NT, 2000 or XP you can run pdns as a service.
	  </para>

  	<para>
      This is how to do it:
      Go to services (<filename>Start->Settings->Control Panel->Administrative Tools->Services</filename>) and locate <filename>PDNS</filename> (you should have registered the program as a NT service during the installation).
    </para>
    
    <para>
      Double-click on <filename>PDNS</filename> and push the start button. You should now see a progress bar that gets to the end and see the status change to 'Started'.
    </para>

    <para>
      This is the same as starting pdns like this:
      <filename>pdns.exe --ntservice</filename>
    </para>

    <para>
      If you haven't registered pdns as a service during the installation you can do so from the commandline by starting pdns like this:
      <filename>pdns.exe --register-service</filename>
    </para>

    <para>
      You can run pdns as a standard console program by using a command prompt or <filename>Start->Run...</filename>
      This way you can specify command-line parameters (see the documentation for commandline options).
    </para>

    <para>
      If you chose to add a PowerDNS menu to the start menu during the installation you can start pdns using the pdns shortcut in that menu.
    </para>

    </sect1>
  </Chapter>

  <Chapter id="configuring-db-connection">
    <title>Configure database connectivity</title>
    <para>
      The default PDNS distribution comes with a simple MySQL backend built in, which we will now use for 
      demonstrating database connectivity. This backend is called 'mysql', and needs to be configured
      in <filename>pdns.conf</filename>. Add the following lines, adjusted for your local setup:
      
      <screen>
	launch=mysql
	mysql-host=127.0.0.1
	mysql-user=root
	mysql-dbname=pdnstest
      </screen>
      
      Remove any earlier <command>launch</command> statements. Also remove the <command>bind-example-zones</command>
      statement as the <command>bind</command> module is no longer launched.
    </para>
    <para>
      WARNING! Make sure that you can actually resolve the hostname of your database without accessing the database! It is advised to supply
      an IP address here to prevent chicken/egg problems!
    </para>
    <para>
      Now start PDNS using the monitor command:
      <screen>
	# /etc/init.d/pdns monitor
	(...)
	15:31:30 PowerDNS 1.99.0 (Mar 12 2002, 15:00:28) starting up
	15:31:30 About to create 3 backend threads
	15:31:30 [MySQLbackend] Failed to connect to database: Error: Unknown database 'pdnstest'
	15:31:30 [MySQLbackend] Failed to connect to database: Error: Unknown database 'pdnstest'
	15:31:30 [MySQLbackend] Failed to connect to database: Error: Unknown database 'pdnstest'
      </screen>
      
      This is as to be expected - we did not yet add anything to MySQL for PDNS to read from. At this point you may also see
      other errors which indicate that PDNS either could not find your MySQL server or was unable to connect to it. Fix these 
      before proceeding.
    </para>
    <para>
      General MySQL knowledge is assumed in this chapter, please do not interpret these commands as DBA advice!
    </para>
    <sect1 id="configuring-mysql"><title>Configuring MySQL</title>
      <para>
	Connect to MySQL as a user with sufficient privileges and issue the following commands:
	<screen>
	  # mysql 
	  mysql> CREATE DATABASE pdnstest;
	  mysql> use pdnstest;

	  mysql> CREATE TABLE records (
	  id int(11) NOT NULL auto_increment,
	  domain_id int(11) default NULL,
	  name varchar(255) default NULL,
	  type varchar(6) default NULL,
	  content varchar(255) default NULL,
	  ttl int(11) default NULL,
	  prio int(11) default NULL,
	  change_date int(11) default NULL,
	  PRIMARY KEY (id),
	  KEY name_index(name),
	  KEY nametype_index(name,type),
	  KEY domainid_index(domain_id)
	  );
	</screen>
	
	Now we have a database and an empty table. PDNS should now be able to launch in monitor mode and display no errors:

	<screen>
	  # /etc/init.d/pdns monitor
	  (...)
	  15:31:30 PowerDNS 1.99.0 (Mar 12 2002, 15:00:28) starting up
	  15:31:30 About to create 3 backend threads
	  15:39:55 [MySQLbackend] MySQL connection succeeded
	  15:39:55 [MySQLbackend] MySQL connection succeeded
	  15:39:55 [MySQLbackend] MySQL connection succeeded
	</screen>
	
	A sample query sent to the database should now return quickly without data:
	<screen>
	  $ host www.test.com 127.0.0.1
	  www.test.com A record currently not present at localhost
	</screen>

	And indeed, the control console now shows:
	<screen>
	  Mar 12 15:41:12 We're not authoritative for 'www.test.com', sending unauth normal response
	</screen>

	Now we need to add some records to our database:
	<screen>
	  # mysql pdnstest
	  mysql>
	  INSERT INTO records (domain_id, name, content, type,ttl,prio) 
	  VALUES (1,'test.com','localhost ahu@ds9a.nl 1','SOA',86400,NULL);
	  INSERT INTO records (domain_id, name, content, type,ttl,prio)
	  VALUES (1,'test.com','dns-us1.powerdns.net','NS',86400,NULL);
	  INSERT INTO records (domain_id, name, content, type,ttl,prio)
	  VALUES (1,'test.com','dns-eu1.powerdns.net','NS',86400,NULL);
	  INSERT INTO records (domain_id, name, content, type,ttl,prio)
	  VALUES (1,'www.test.com','199.198.197.196','A',120,NULL);
	  INSERT INTO records (domain_id, name, content, type,ttl,prio)
	  VALUES (1,'mail.test.com','195.194.193.192','A',120,NULL);
	  INSERT INTO records (domain_id, name, content, type,ttl,prio)
	  VALUES (1,'localhost.test.com','127.0.0.1','A',120,NULL);
	  INSERT INTO records (domain_id, name, content, type,ttl,prio)
	  VALUES (1,'test.com','mail.test.com','MX',120,25);
	</screen>
	
	If we now requery our database, <command>www.test.com</command> should be present:
	<screen>
	  $ host www.test.com 127.0.0.1
	  www.test.com        	A	199.198.197.196
	  
	  $ host -v -t mx test.com 127.0.0.1
	  Address: 127.0.0.1
	  Aliases: localhost

	  Query about test.com for record types MX
	  Trying test.com ...
	  Query done, 1 answer, authoritative status: no error
	  test.com            	120	IN	MX	25 mail.test.com
	  Additional information:
	  mail.test.com       	120	IN	A	195.194.193.192
	</screen>
	
	To confirm what happened, issue the command <command>SHOW *</command> to the control console:
	<screen>
	  % show *
	  corrupt-packets=0,latency=0,packetcache-hit=2,packetcache-miss=5,packetcache-size=0,
	  qsize-a=0,qsize-q=0,servfail-packets=0,tcp-answers=0,tcp-queries=0,
	  timedout-packets=0,udp-answers=7,udp-queries=7,
	  % 
	</screen>
	The actual numbers will vary somewhat. Now enter <command>QUIT</command> and start PDNS as a regular daemon, and check launch status:

	<screen>
	  # /etc/init.d/pdns start 
	  pdns: started
	  # /etc/init.d/pdns status
	  pdns: 8239: Child running
	  # /etc/init.d/pdns dump  
	  pdns: corrupt-packets=0,latency=0,packetcache-hit=0,packetcache-miss=0,
	  packetcache-size=0,qsize-a=0,qsize-q=0,servfail-packets=0,tcp-answers=0,
	  tcp-queries=0,timedout-packets=0,udp-answers=0,udp-queries=0,
	</screen>
	
	You now have a working database driven nameserver! To convert other zones already present, use the <command>zone2sql</command> 
        described in Appendix A.
      </para>
      <sect2><title>Common problems</title>
	<para>
	  Most problems involve PDNS not being able to connect to the database. 
	<variablelist>
	  <varlistentry>
	      <term><errortype> Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2)</errortype></term>
	      <listitem>
		<para>
		  Your MySQL installation is probably defaulting to another location for its socket. Can be resolved
		  by figuring out this location (often <filename>/var/run/mysqld.sock</filename>), and specifying it 
		  in the configuration file with the <command>mysql-socket</command> parameter.
		</para>
		<para>
		  Another solution is to not connect to the socket, but to 127.0.0.1, which can be achieved by specifying
		  <command>mysql-host=127.0.0.1</command>.
		</para>
	      </listitem>
	    </varlistentry>
	  <varlistentry>
	      <term><errortype>Host 'x.y.z.w' is not allowed to connect to this MySQL server</errortype></term>
	      <listitem>
		<para>
		  These errors are generic MySQL errors. Solve them by trying to connect to your MySQL database with the MySQL 
		  console utility <command>mysql</command> with the parameters specified to PDNS. Consult the MySQL documentation.
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</sect2>
    </sect1>
  </chapter>

  <Chapter id="pipebackend-dynamic-resolution">
    <title>Dynamic resolution using the PipeBackend</title>
    <para>
      Also included in the PDNS distribution is the PipeBackend. The PipeBackend is primarily meant for
      allowing rapid development of new backends without tight integration with PowerDNS. It allows
      end-users to write PDNS backends in any language. A perl sample is provided.

      The PipeBackend is also very well suited for dynamic resolution of queries. Example applications include
      DNS based loadbalancing, geo-direction, DNS based failover with low TTLs.
    </para>
    <sect1 id="pipe-and-bind"><title>Deploying the PipeBackend with the BindBackend</title>
      <para>
        Included with the PDNS distribution is the example.pl backend which has knowledge of the example.com zone, just like
        the BindBackend. To install both, add the following to your <filename>pdns.conf</filename>:
        <screen>
          launch=pipe,bind
          bind-example-zones
          pipe-command=location/of/backend.pl
        </screen>
        Please adjust the <command>pipe-command</command> statement to the location of the unpacked PDNS distribution. If your backend is slow,
	raise <command>pipe-timeout</command> from its default of 2000ms.

        Now launch PDNS in monitor mode, and perform some queries. Note the difference with the earlier experiment where only the 
        BindBackend was loaded. The PipeBackend is launched first and thus gets queried first.

        The sample backend.pl script knows about:
	<itemizedlist>
	  <listitem>
	    <para>
	      webserver.example.com A records pointing to 1.2.3.4, 1.2.3.5, 1.2.3.6
	    </para>
          </listitem>
	  <listitem>
	    <para>
	      www.example.com CNAME pointing to webserver.example.com
	    </para>
          </listitem>
	  <listitem>
	    <para>
	      MBOXFW (mailbox forward) records pointing to powerdns@example.com.
              See the smtpredir documentation for information about MBOXFW.
	    </para>
          </listitem>
        </itemizedlist>

        For more information about how to write exciting backends with the PipeBackend, see Appendix A.
      </para>
    </sect1>
  </chapter>

  <Chapter id="monitoring">
    <title>Logging &amp; Monitoring PDNS performance</title>
    <para>
      In a production environment, you will want to be able to monitor PDNS performance. For this purpose, currently 
      two methods are available, the webserver and the init.d
<command>dump</command>, <command>show</command> and 
      <command>mrtg</command>, commands. Furthermore, PDNS can perform a configurable amount of operational logging. This chapter
	also explains how to configure syslog for best results.
    </para>
    <sect1 id="webserver"><title>Webserver</title>
      <para>
	To launch the internal webserver, add a <command>webserver</command> statement to the pdns.conf. This 
	will instruct the PDNS daemon to start a webserver on localhost at port 8081, without password protection. 
	Only local users (on the same host) will be able to access the webserver by default.

	The webserver 	lists a lot of information about the PDNS process, including frequent queries, frequently failing queries, 
	lists of remote hosts sending queries, hosts sending corrupt queries etc. The webserver does not allow
	remote management of the daemon.

	The following nameserver related configuration items are available:
	<variablelist>
	  <varlistentry>
	    <term>webserver</term>
	    <listitem>
	      <para>
		If set to anything but 'no', a webserver is launched.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>webserver-address</term>
	    <listitem>
	      <para>
		Address to bind the webserver to. Defaults to 127.0.0.1, which implies that only the local computer
		is able to connect to the nameserver! To allow remote hosts to connect, change to 0.0.0.0 or the
		physical IP address of your nameserver.
	      </para>
	    </listitem>
	  </varlistentry>
	<varlistentry>
	  <term>webserver-password</term>
	  <listitem>
	    <para>
	      If set, viewers will have to enter this plaintext password in order to gain access to the statistics.
	    </para>
	  </listitem>
	</varlistentry>
	  <varlistentry>
	    <term>webserver-port</term>
	    <listitem>
	      <para>
		Port to bind the webserver to. Defaults to 8081.
	      </para>
	    </listitem>
	  </varlistentry>

      </variablelist>
      </para>
      </sect1>
    <sect1 id="init-d-commands"><title>Via init.d commands</title>
      <para>
	As mentioned before, the init.d commands <command>dump</command>, <command>show</command> and 
	<command>mrtg</command> fetch data from a running PDNS process. Especially <command>mrtg</command> is powerful -
	it outputs data in a format that is ready for processing by the MRTG graphing tool. 
      </para>
      <para>
	MRTG can make insightful graphics on the performance of your nameserver, enabling the operator to easily spot trends.
	MRTG can be found on 
	<ulink url="http://people.ee.ethz.ch/~oetiker/webtools/mrtg/mrtg.html">
	  http://people.ee.ethz.ch/~oetiker/webtools/mrtg/mrtg.html
	</ulink>
      </para>
      <para>
	A sample mrtg.conf:
	<screen>
Interval: 5
WorkDir: /var/www/mrtg
WriteExpires: yes
Options[_]: growright,nopercent
XSize[_]: 600

#---------------------------------------------------------------

Target[udp-queries]: `/etc/init.d/pdns mrtg udp-queries udp-answers`
Options[udp-queries]: growright,nopercent,perminute
MaxBytes[udp-queries]: 600000
AbsMax[udp-queries]: 600000
Title[udp-queries]: Queries per minute
PageTop[udp-queries]: &lt;H2&gt;Queries per minute&lt;/H2&gt;
WithPeak[udp-queries]: ymwd
YLegend[udp-queries]: queries/minute
ShortLegend[udp-queries]: q/m
LegendI[udp-queries]: udp-questions
LegendO[udp-queries]: udp-answers


Target[perc-failed]: `/etc/init.d/pdns mrtg udp-queries udp-answers`
Options[perc-failed]: growright,dorelpercent,perminute
MaxBytes[perc-failed]: 600000
AbsMax[perc-failed]: 600000
Title[perc-failed]: Queries per minute, with percentage success
PageTop[perc-failed]: &lt;H2&gt;Queries per minute, with percentage success&lt;/H2&gt;
WithPeak[perc-failed]: ymwd
YLegend[perc-failed]: queries/minute
ShortLegend[perc-failed]: q/m
LegendI[perc-failed]: udp-questions
LegendO[perc-failed]: udp-answers


Target[packetcache-rate]: `/etc/init.d/pdns mrtg packetcache-hit udp-queries`
Options[packetcache-rate]: growright,dorelpercent,perminute
Title[packetcache-rate]: packetcache hitrate
MaxBytes[packetcache-rate]: 600000
AbsMax[packetcache-rate]: 600000
PageTop[packetcache-rate]: &lt;H2&gt;packetcache hitrate&lt;/H2&gt;
WithPeak[packetcache-rate]: ymwd
YLegend[packetcache-rate]: queries/minute
ShortLegend[packetcache-rate]: q/m
LegendO[packetcache-rate]: total
LegendI[packetcache-rate]: hit

Target[packetcache-missrate]: `/etc/init.d/pdns mrtg packetcache-miss udp-queries`
Options[packetcache-missrate]: growright,dorelpercent,perminute
Title[packetcache-missrate]: packetcache MISSrate
MaxBytes[packetcache-missrate]: 600000
AbsMax[packetcache-missrate]: 600000
PageTop[packetcache-missrate]: &lt;H2&gt;packetcache MISSrate&lt;/H2&gt;
WithPeak[packetcache-missrate]: ymwd
YLegend[packetcache-missrate]: queries/minute
ShortLegend[packetcache-missrate]: q/m
LegendO[packetcache-missrate]: total
LegendI[packetcache-missrate]: MISS

Target[latency]: `/etc/init.d/pdns mrtg latency`
Options[latency]: growright,nopercent,gauge
MaxBytes[latency]: 600000
AbsMax[latency]: 600000
Title[latency]: Query/answer latency
PageTop[latency]: &lt;H2&gt;Query/answer latency&lt;/H2&gt;
WithPeak[latency]: ymwd
YLegend[latency]: usec
ShortLegend[latency]: usec
LegendO[latency]: latency
LegendI[latency]: latency

Target[recursing]: `/etc/init.d/pdns mrtg recursing-questions recursing-answers`
Options[recursing]: growright,nopercent,gauge
MaxBytes[recursing]: 600000
AbsMax[recursing]: 600000
Title[recursing]: Recursive questions/answers
PageTop[recursing]: &lt;H2&gt;Recursing questions/answers&lt;/H2&gt;
WithPeak[recursing]: ymwd
YLegend[recursing]: queries/minute
ShortLegend[recursing]: q/m
LegendO[recursing]: recursing-questions
LegendI[recursing]: recursing-answers

	</screen>
      </para>
      <sect1 id="syslog"><title>Operational logging using syslog</title>
      <para>(<command>logging-facility</command> is available from 1.99.10 and onwards)</para>
      <para>
	This chapter assumes familiarity with syslog, the unix logging device. PDNS logs messages with different levels. The more urgent the 
	message, the lower the 'priority'. By default, PDNS will only log messages with an urgency of 3 or lower, but this can be changed
	using the <command>loglevel</command> setting in the configuration file. Setting it to 0 will eliminate all logging, 9 will log
	everything.
      </para>
      <para>
	By default, logging is performed under the 'DAEMON' facility which is shared with lots of other programs. If you regard nameserving
	as important, you may want to have it under a dedicated facility so PDNS can log to its own files, and not clutter generic files.
      </para>
      <para>
	For this purpose, syslog knows about 'local' facilities, numbered from LOCAL0 to LOCAL7. To move PDNS logging to LOCAL0, add 
	<command>logging-facility=0</command> to your configuration.
      </para>
      <para>
	Furthermore, you may want to have separate files for the differing prioties - preventing lower priority messages from obscuring 
	important ones.
      </para>
      <para>
	A sample syslog.conf might be:
	<programlisting>
local0.info                       -/var/log/pdns.info
local0.warn                       -/var/log/pdns.warn
local0.err                        /var/log/pdns.err
	</programlisting>
      </para>
      <para>
	Where local0.err would store the really important messages. For performance and diskspace reasons, it is advised
	to audit your syslog.conf for statements also logging PDNS activities. Many syslog.confs have a '*.*' statement to
	/var/log/syslog, which you may want to remove.
      </para>
      <para>
	For performance reasons, be especially certain that no large amounts of synchronous logging take place. Under Linux, this 
	is indicated by filenames not starting with a '-' - indicating a synchronous log, which hurts performance.
      </para>
    </sect1>
  </chapter>
  <chapter id="security"><title>Security settings &amp; considerations</title>
    <sect1 id="settings"><title>Settings</title>
      <para>PDNS has several options to easily allow it to run more securely. Most notable are the <command>chroot</command>, 
	<command>setuid</command> and <command>setgid</command> options which can be specified.</para>

	<sect2><title>Running as a less privileged identity</title>
	<para>
	  By specifying <command>setuid</command> and <command>setgid</command>, PDNS changes to this identity shortly after
	  binding to the privileged DNS ports. These options are highly recommended. It is suggested that a separate identity
	  is created for PDNS as the user 'nobody' is in fact quite powerful on most systems.
	</para>

	<para>
	  Both these parameters can be specified either numerically or as real names.
	  You should set these parameters immediately if they are not set!
	</para>
	<sect2><title>Jailing the process in a chroot</title>
	<para>
	  The <command>chroot</command> option secures PDNS to its own directory so that even if it should become compromised and
	  under control of external influences, it will have a hard time affecting the rest of the system.
	</para>
	<para>
	  Even though this will hamper hackers a lot, chroot jails have been known to be broken. 
	</para>
	<para>
	  When chrooting PDNS, take care that backends will be able to get to their files. Many databases need access to a UNIX 
	  domain socket which should live within the chroot. It is often possible to hardlink such a socket into the chroot dir.
	</para><para>
	  The default PDNS configuration is best chrooted to <filename>./</filename>, which boils down to the configured location
	  of the controlsocket. 
	</para><para>
	  This is achieved by adding the following to pdns.conf: <command>chroot=./</command>, and restarting PDNS.
	</para>
      </sect2>
    </sect1>
    <sect1 id="considerations"><title>Considerations</title>
      <para>
	In general, make sure that the PDNS process is unable to execute commands on your backend database. 
	Most database backends will only need SELECT privilege. Take care to not connect to your database as the 'root' 
	or 'sa' user, and configure the chosen user to have very slight privileges.
      </para>
      <para>
	Databases empathic-ally do not need to run on the same machine that runs PDNS! In fact, in benchmarks
	it has been discovered that having a separate database machine actually improves performance.
      </para>
      <para>
	Separation will enhance your database security highly. Recommended.
      </para>
      </sect1>
    </chapter>
    
  <chapter id="virtual"><title>Virtual hosting</title>
    <para>
      It may be advantageous to run multiple separate PDNS installations on a single host, for example to make sure
      that different customers cannot affect each others zones. PDNS fully supports running multiple instances on one host.
    </para>
    <para>
      To generate additional PDNS instances, copy the init.d script <filename>pdns</filename> to <filename>pdns-name</filename>, 
      where <filename>name</filename> is the name of your virtual configuration. Must not contain a - as this will confuse the 
      script.
    </para>
    <para>
      When you launch PDNS via this renamed script, it will seek configuration instructions not in <filename>pdns.conf</filename>
      but in <filename>pdns-name.conf</filename>, allowing for separate specification of parameters.
    </para>
    <para>
      Be aware however that the init.d <command>force-stop</command> will kill all PDNS instances!
    </para>
  </chapter>

  <chapter id="performance"><title>Performance related settings</title>
    <para>
      Different backends will have different characteristics - some will want to have more parallel
      instances than others. In general, if your backend is latency bound, like most relational databases are, 
      it pays to open more backends.
    </para>
    <para>
      This is done with the <command>distributor-threads</command> setting. Of special importance is the choice between 1
      or more backends. In case of only 1 thread, PDNS reverts to unthreaded operation which may be a lot faster, depending
      on your operating system and architecture.
    </para>
    <para>
      Another very important setting <command>cache-ttl</command>. PDNS caches entire packets it sends out so as to save the
      time to query backends to assemble all data. The default setting of 10 seconds may be low for high traffic sites, a value of
      60 seconds rarely leads to problems.
    </para>
    <para>
      Some PDNS operators set cache-ttl to many hours or even days, and use <command>pdns_control purge</command> to selectively
      or globally notify PDNS of changes made in the backend. Also look at the Query Cache described in this chapter. It may
      materially improve your performance.
    </para>
    <para>
      To determine if PDNS is unable to keep up with packets, determine the value of the <command>qsize-q</command> variable. 
      This represents the number of packets waiting for database attention. During normal operations the queue should be small. 
    </para>
    <para>
      If it is known that backends will not contain CNAME records, the <command>skip-cname</command> setting can be used to prevent 
      the normally mandatory CNAME lookup that is needed at least once for each DNS query. 
    </para>

    <para>
      Much the same holds for the <command>wildcards</command> setting. On by default, each non-existent query will lead to a number of additional
      wildcard queries. If it is known that the backends do not contain wildcard records, performance can be improved by adding <command>wildcards=no</command>
      to <filename>pdns.conf</filename>.
    </para>
    <para>
      Logging truly kills performance as answering a question from the cache is an order of magnitude less work than logging a 
      line about it. Busy sites will prefer to turn <command>log-dns-details</command> and <command>log-failed-updates</command>
      off.
    </para>
    <sect1 id="packetcache"><title>Packet Cache</title>
      <para>
	PDNS by default uses the 'Packet Cache' to recognise identical questions and supply them with identical answers, without any further 
	processing. The default time to live is 10 seconds. It has been observed that the utility of the packet cache increases with the load on 
	your nameserver. 
      </para>
      <para>
	Not all backends may benefit from the packetcache. If your backend is memory based and does not lead to context switches, the packetcache
	may actually hurt performance. 
      </para>
      <para>
	The size of the packetcache can be observed with <command>/etc/init.d/pdns show packetcache-size</command>
      </para>
    </sect1>
    <sect1 id="querycache"><title>Query Cache</title>
      <para>
	Besides entire packets, PDNS can also cache individual backend queries. Each DNS query leads to a number of backend queries,
	the most obvious additional backend query is the check for a possible CNAME. So, when a query comes in for the 'A' record for
	'www.powerdns.com', PDNS must first check for a CNAME for 'www.powerdns.com'.
      </para>
      <para>
	The Query Cache caches these backend queries, many of which are quite repetitive. PDNS only caches queries with no answer,
	or with exactly one. In the future this may be expanded but this lightweight solution is very simple and therefore fast.
      </para>
      <para>
	Most gain is made from caching negative entries, ie, queries that have no answer. As these take little memory to store and
	are typically not a real problem in terms of speed-of-propagation, the default TTL for negative queries is a rather high 60 seconds.
      </para>
      <para>
	This only is a problem when first doing a query for a record, adding it, and immediately doing a query for that record again. It may
	then take up to 60 seconds to appear. Changes to existing records however do not fall under the negative query ttl (
	<command>negquery-cache-ttl</command>), but under the generic <command>query-ttl</command> which defaults to 20 seconds.
      </para>
      <para>
	The default values should work fine for many sites. When tuning, keep in mind that the Query Cache mostly saves database access 
	but that the Packet Cache also saves a lot of CPU because 0 internal processing is done when answering a question from the
	Packet Cache.
      </para>
    </sect1>
  </chapter>
  <chapter id="migration"><title>Migrating to PDNS</title>
    <para>
      Before migrating to PDNS a few things should be considered. 
      <variablelist>
	<varlistentry>
	  <term>PDNS is not a recursing nameserver on its own</term>
	  <listitem>
	    <para>
	      If PDNS receives a question for which it is not authoritative, it can't go out on the net to figure out an answer. However, 
	      because many installations are expected to be both authoritative and recursing, PDNS can use a separate recursing backend
	      to provide non-authoritative answers. See <xref linkend="recursion"> for more details.
	    </para>
	  </listitem></varlistentry>
	<varlistentry>
	  <term>PDNS does not operate as a 'slave' server with all backends</term>
	  <listitem>
	    <para>
	      Only the PostgreSQL backend has, of version 1.99.9, the ability to act as a slave.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
      To migrate, the <command>zone2sql</command> tool is provided. 
      </para>
    <sect1 id="zone2sql"><title>Zone2sql</title>
      <para>
	Zone2sql parses Bind named.conf files and zonefiles and outputs SQL 
	on standard out, which can then be fed to your database.
      </para>
      <para>
	Zone2sql understands the Bind master file extension '$GENERATE' and will also honour '$ORIGIN' and '$TTL'.
      </para>
      <para>
	For backends supporting slave operation (currently only the PostgreSQL backend), there is also an option to keep slave zones as slaves,
	and not convert them to native operation. 
      </para>
      <para>
	By default, zone2sql outputs code suitable for the mysqlbackend, but it can also generate SQL for the Generic PostgreSQL and Oracle backends. 
	The following commands are available:
      </para>

      <para>
	<variablelist>
	  <varlistentry>
	    <term>--bare</term>
	    <listitem>
	      <para>
	      Output in a bare format, suitable for further parsing. The output is formatted as follows:
		<screen>
		  domain_id&lt;TAB&gt;'qname'&lt;TAB&gt;'qtype'&lt;TAB&gt;'content'&lt;TAB&gt;prio&lt;TAB&gt;ttl
		</screen>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>--gmysql</term>
	    <listitem>
	      <para>
		Output in format suitable for the default configuration of the Generic MySQL backend.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>--gpgsql</term>
	    <listitem>
	      <para>
		Output in format suitable for the default configuration of the Generic PostgreSQL backend.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>--help</term>
	    <listitem>
	      <para>
		List options.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>--mysql</term>
	    <listitem>
	      <para>
		Output in format suitable for the default configuration of the MySQL backend. Default.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>--named-conf=...</term>
	    <listitem>
	      <para>
		Parse this named.conf to find locations of zones. 
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>--on-error-resume-next</term>
	    <listitem>
	      <para>
		Ignore missing files during parsing. Dangerous.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>--oracle</term>
	    <listitem>
	      <para>
		Output in format suitable for the default configuration of the Generic Oracle backend.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>--slave</term>
	    <listitem>
	      <para>
		Maintain slave status of zones listed in named.conf as being slaves. The default behaviour is to convert all zones
		to native operation.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>--startid</term>
	    <listitem>
	      <para>
		Supply a value for the first domain_id generated. Defaults at 0.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>--transactions</term>
	    <listitem>
	      <para>
		For Oracle and PostgreSQL output, wrap each domain in a transaction for higher speed and integrity.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>--verbose</term>
	    <listitem>
	      <para>
		Be verbose during conversion.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>--zone=...</term>
	    <listitem>
	      <para>
		Parse only this zone file. Conflicts with <command>--named-conf</command> parameter. 
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>--zone-name=...</term>
	    <listitem>
	      <para>
		When parsing a single zone without $ORIGIN statement, set this as the zone name.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
    </sect1>
  </chapter>
  
  <chapter id="recursion"><title>Recursion</title>

    <para>(only available from 1.99.8 and onwards)</para>
    <para>
      PDNS is an authoritative nameserver. It answers questions with data from its backends. Besides handing out authoritative
      answers, DNS also needs so called 'recursion', where a nameserver gets a question for which it has no authoritative answer available, 
      necessitating questions to other nameservers.
    </para>
    <para>
      Although PDNS is an authoritative nameserver, a provision has been made to cater for installations that require both authoritative DNS 
      and recursion on one IP address. 
    </para>
    <para>
      By specifying the <command>recursor</command> option in the configuration file, questions requiring recursive treatment will be handed over
      to the IP address specified. An example configuration might be <command>recursor=130.161.180.1</command>, which designates 130.161.180.1 as
      the nameserver to handle recursive queries.
    </para>
    <para>
      Any recursing nameserver is suitable but we highly advise the use of the DJBDNS dnscache (<ULINK URL="http://cr.yp.to/djbdns/dnscache.html" TYPE="alternate">http://cr.yp.to/djbdns/dnscache.html</ULINK>).
    </para>
    <para>
      Take care not to point <command>recursor</command> to PDNS, which leads to a very tight packet loop!
    </para>
    <para>
      By specifying <command>allow-recursion</command>, recursion can be restricted to netmasks specified. The default is to allow
      recursion from everywhere. Example: <command>allow-recursion=192.168.0.0/24, 10.0.0.0/8, 1.2.3.4</command>.
    </para>
    <sect1 id="recursion-details"><title>Details</title>
      <para>
	Questions carry a number of flags. One of these is called 'Recursion Desired'. If PDNS is configured to allow recursion, AND such a flag
	is seen, AND the IP address of the client is allowed to recurse via PDNS, then the packet is handed to the recursing backend.
      </para>
      <para>
	If a Recursion Desired packet PDNS is configured to allow recursion, but not to the IP address of the client, resolution will proceed 
	as if the RD flag were unset and the answer will indicate that recursion was not available.
      </para>
      <para>
	Recursive questions and answers are not stored in the Packet Cache as recursing backends are generally well equipped to cache questions
	themselves.
      </para>
      <para>
	It is also possible to use a resolver living on a different port. To do so, specify a recursor like this: 
	<command>recursor=130.161.180.1:5300</command>.
      </para>
      <para>
	If the backend does not answer a question within a large amount of time, this is logged as 'Recursive query for remote 10.96.0.2 with internal id 0 
	was not answered by backend within timeout, reusing id'.
      </para>
    </sect1>
    <sect1 id="lazy-recursion"><title>'Lazy recursion'</title>
      <para>
	PowerDNS is an authoritative nameserver. Up to version 2.1, a packet indication that recursion was desired, coming from a host from which
	recursion was allowed, would be handed sight unseen to the recursing backend. This means that older installations do not have the ability to 'override' 
	the internet with local data. Recursive queries would not be answered from the database.
      </para>
      <para>
	This behaviour sufficed for many users but some installations have a pressing need to override the internet, for example to support recursive 
	queries for fake domains like 'powerdns.office' or '.internal'. 
      </para>
      <para>
	As of version 2.1, PowerDNS has a feature called 'lazy recursion' where a packet will only be handed to the recursing backend if it cannot be answered
	completely from the database. 'Completely' in this case means that the original question has an answer in the local database and any additional processing
	can also succeed from the database.
      </para>
      <para>
	So for example, if you have the 'your.office' domain and a query comes in for its MX record, you should locally have the 'your.office' MX record
	as well as the IP address of (for example) 'smtp.your.office'. 
      </para>
      <para>
	If any of these conditions fail, your packet is handed to the recursor anyhow. So to benefit from lazy-recursion, be very sure that all 
	data needed is present locally!.
      </para>
      <para>
	To restore pre-2.1 behaviour, specify <command>lazy-recursion=off</command>.
      </para>
    </sect1>
  </chapter>
  <chapter id="replication"><title>Master/Slave operation &amp; replication</title>

    <para>
      PDNS offers full master and slave semantics for replicating domain information. Furthermore, PDNS can benefit from native
      database replication.
    </para>
    <sect1 id="native-replication"><title>Native replication</title>
      <para>
	Native replication is the default, unless other operation is specifically configured. Native replication basically means that PDNS will
	not send out DNS update notifications, nor will react to them. PDNS assumes that the backend is taking care of replication unaided.
      </para>
      <para>
	MySQL replication has proven to be very robust and well suited, even over transatlantic connections between badly peering ISPs. Other PDNS
	users employ Oracle replication which also works very well.
      </para>
      <para>
	To use native replication, configure your backend storage to do the replication and do not configure PDNS to do so.
      </para>
    </sect1>
    <sect1 id="slave"><title>Slave operation</title>
      <para>
	On launch, PDNS requests from all backends a list of domains which have not been checked recently for changes. This should happen every 
	'<command>refresh</command>' seconds, as specified in the SOA record. All domains that are unfresh are then checked for changes over at their
	master. If the <link linkend="soa-type">SOA</link> serial number there is higher, the domain is retrieved and inserted into the database. In 
	any case, after the check the domain is declared 'fresh', and will only be checked again after '<command>refresh</command>' seconds have passed.
      </para>
      <para>
	PDNS also reacts to notifies by immediately checking if the zone has updated and if so, retransfering it.
      </para>
      <para>
	All backends which implement this feature must make sure that they can handle transactions so as to not leave the zone in a half updated state. 
	MySQL configured with either BerkeleyDB or InnoDB meets this requirement, as do PostgreSQL and Oracle. The Bindbackend implements transaction
	semantics by renaming files if and only if they have been retrieved completely and parsed correctly.
      </para>
      <sect2 id=supermaster><title>Supermaster automatic provisioning of slaves</title>
	<para>
	  PDNS can recognize so called 'supermasters'. A supermaster is a host which is master for domains and for which we are to be a slave. When
	  a master (re)loads a domain, it sends out a notification to its slaves. Normally, such a notification is only accepted if PDNS already 
	  knows that it is a slave for a domain.
	</para>
	<para>
	  However, a notification from a supermaster carries more persuasion. When PDNS determines that a notification comes from a supermaster and it is 
	  is bonafide, PDNS can provision the domain automatically, and configure itself as a slave for that zone.
	</para>
	<para>
	  To enable this feature, a backend needs to know about the IP address of the supermaster, and how PDNS will be listed in the set of
	  NS records remotely, and the 'account' name of your supermaster. There is no need to fill this out but it does help keep track of
	  where a domain comes from.
	</para>
      </sect2>
    </sect1>

    <sect1 id="master"><title>Master operation</title>
      <para>
	When operating as a master, PDNS sends out notifications of changes to slaves, which react to these notifications by querying PDNS to see
	if the zone changed, and transferring its contents if it has. Notifications are a way to promptly propagate zone changes to slaves, as 
	described in RFC 1996.
      </para>
      <para>
	Left open by RFC 1996 is who is to be notified - which is harder to figure out than it sounds. All slaves for this domain must receive a notification
	but the nameserver only knows the names of the slaves - not the IP addresses, which is where the problem lies. The nameserver itself might
	be authoritative for the name of its secondary, but not have the data available.
      </para>
      <para>
	To resolve this issue, PDNS tries multiple tactics to figure out the IP addresses of the slaves, and notifies everybody. In contrived configurations
	this may lead to duplicate notifications being sent out, which shouldn't hurt.
      </para>
      <para>
	Some backends may be able to detect zone changes, others may chose to let the operator indicate which zones have changed and which haven't.
	Consult the documentation for your backend to see how it processes changes in zones.
      </para>
      <para>
	To help deal with slaves that may have missed notifications, or have failed to respond to them, several override commands are available via 
	the pdns_control tool (<xref linkend="pdnscontrol">):
      </para>
      <para>
	<variablelist>
	  <varlistentry>
	    <term>pdns_control notify <command>domain</command></term>
	    <listitem>
	      <para>
		This instructs PDNS to notify all IP addresses it considers to be slaves of this domain. 
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>pdns_control notify-host <command>domain ip-address</command></term>
	    <listitem>
	      <para>
		This is truly an override and sends a notification to an arbitrary IP address. Can be used in 'also-notify' situations
		or when PDNS has trouble figuring out who to notify - which may happen in contrived configurations.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
    </sect1>
  </chapter>
  <chapter id="fancy-records"><title>Fancy records for seamless email and URL integration</title>

    <para>
      PDNS also supports so called 'fancy' records. A Fancy Record is actually not a DNS record, but it is translated into one. Currently,
      two fancy records are implemented, but not very useful without additional unreleased software. For completeness, they are listed here.
      The software will become available later on and is part of the Express and PowerMail suite of programs.
    </para>
    <para>
      These records imply extra database lookups which has a performance impact. Therefore fancy records are only queried for if they are enabled
      with the <command>fancy-records</command> command in <filename>pdns.conf</filename>. 
    </para>
    <para>
      <variablelist>
	<varlistentry>
	  <term>MBOXFW</term>
	  <listitem>
	    <para>
	      This record denotes an email forward. A typical entry looks like this:
	      <screen>
		support@yourdomain.com     MBOXFW       you@yourcompany.com
	      </screen>
	      When PDNS encounters a request for an MX record for yourdomain.com it will, if fancy records are enabled, also check for the existence
	      of an MBOXFW record ending on '@yourdomain.com', in which case it will hand out a record containing the configured 
	      <command>smtpredirector</command>. This server should then also be able to access the PDNS database to figure out where mail to 
	      support@yourdomain.com should go to.
	    </para>
	  </listitem>
	<varlistentry>
	  <term>URL</term>
	  <listitem>
	    <para>
	      URL records work in much the same way, but for HTTP. A sample record:
	      <screen>
		yourdomain.com     URL       http://somewhere.else.com/yourdomain
	      </screen>
	      A URL record is converted into an A record containing the IP address configured with the <command>urlredirector</command>
	      setting. On that IP address a webserver should live that knows how to redirect yourdomain.com to 
	      http://somewhere.else.com/yourdomain.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </para>
  </chapter>
  <chapter id="all-settings"><title>Index of all settings</title>
    <para>
      All PDNS settings are listed here, excluding those that originate from backends, which are documented in the relevant chapters.
      <variablelist>
	<varlistentry>
	  <term><anchor id="allow-axfr-ips">allow-axfr-ips=...</term>
	  <listitem>
	    <para>When not allowing AXFR (disable-axfr), DO allow from these IP addresses or netmasks.
	    </para>
	  </listitem></varlistentry>
	<varlistentry>
	  <term>allow-recursion=...</term>
	  <listitem>
	    <para>
	      By specifying <command>allow-recursion</command>, recursion can be restricted to netmasks specified. The default is to allow
	      recursion from everywhere. Example: <command>allow-recursion=192.168.0.0/24, 10.0.0.0/8, 1.2.3.4</command>.
	    </para>
	  </listitem></varlistentry>
	  <varlistentry><term>cache-ttl=...</term>
	    <listitem><para>
		Seconds to store packets in the PacketCache. See <xref linkend="packetcache">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>chroot=...</term>
	    <listitem><para>
		If set, chroot to this directory for more security. See <xref linkend="security">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>config-dir=...</term>
	    <listitem><para>
		Location of configuration directory (pdns.conf)
	      </para></listitem></varlistentry>
	  <varlistentry><term>config-name=...</term>
	    <listitem><para>
		Name of this virtual configuration - will rename the binary image. See <xref linkend="virtual">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>control-console=...</term>
	    <listitem><para>
		Debugging switch - don't use.
	      </para></listitem></varlistentry>
	  <varlistentry><term>daemon=...</term>
	    <listitem><para>
		Operate as a daemon
	      </para></listitem></varlistentry>
	  <varlistentry><term>default-soa-name=...</term>
	    <listitem><para>
		name to insert in the SOA record if none set in the backend
	      </para></listitem></varlistentry>
   	  <varlistentry><term>disable-axfr=...</term>
	    <listitem><para>
		Do not allow zone transfers
	      </para></listitem></varlistentry>
	  <varlistentry><term>disable-tcp=...</term>
	    <listitem><para>
		Do not listen to TCP queries. Breaks RFC compliance.
	      </para></listitem></varlistentry>
	  <varlistentry><term>distributor-threads=...</term>
	    <listitem><para>
		Default number of Distributor (backend) threads to start. See <xref linkend="performance">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>fancy-records=...</term>
	    <listitem><para>
		Process URL and MBOXFW records. See <xref linkend="fancy-records">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>guardian | --guardian=yes | --guardian=no</term>
	    <listitem><para>
		Run within a guardian process. See <xref linkend="guardian">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>help</term>
	    <listitem><para>
		Provide a helpful message
	      </para></listitem></varlistentry>
	  <varlistentry><term>launch=...</term>
	    <listitem><para>
		Which backends to launch and order to query them in. See <xref linkend="modules">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>lazy-recursion=...</term>
	    <listitem><para>
	      On by default as of 2.1. Checks local data first before recursing. See <xref linkend="recursion">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>load-modules=...</term>
	    <listitem><para>
		Load this module - supply absolute or relative path. See <xref linkend="modules">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>local-address=...</term>
	    <listitem><para>
		Local IP address to which we bind. You can specify multiple addresses separated by commas or whitespace.
	      </para></listitem></varlistentry>
	  <varlistentry><term>local-port=...</term>
	    <listitem><para>
		The port on which we listen. Only one port possible.
	      </para></listitem></varlistentry>
	  <varlistentry><term><anchor id="log-failed-updates">log-failed-updates=...</term>
	    <listitem><para>
	      If set to 'no', failed Windows Dynamic Updates will not be logged.
	      </para></listitem></varlistentry>
	  <varlistentry><term><anchor id="log-dns-details">log-dns-details=...</term>
	    <listitem><para>
	      If set to 'no', informative-only DNS details will not even be sent to syslog, improving performance. Available from 2.5 
	      and onwards.
	      </para></listitem></varlistentry>
	  <varlistentry><term>logging-facility=...</term>
	    <listitem><para>
	      If set to a a digit, logging is performed under this LOCAL facility. See <xref linkend="syslog">. Available from 1.99.9 and onwards.
	      </para></listitem></varlistentry>
	  <varlistentry><term>loglevel=...</term>
	    <listitem><para>
		Amount of logging. Higher is more. Do not set below 3
	      </para></listitem></varlistentry>
	  <varlistentry><term>max-queue-length=...</term>
	    <listitem><para>
	      If this many packets are waiting for database attention, consider the situation hopeless and respawn.
	      </para></listitem></varlistentry>
	  <varlistentry><term>module-dir=...</term>
	    <listitem><para>
		Default directory for modules. See <xref linkend="modules">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>negquery-cache-ttl=...</term>
	    <listitem><para>
		Seconds to store queries with no answer in the Query Cache. See <xref linkend="querycache">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>no-config</term>
	    <listitem><para>
	      Do not attempt to read the configuration file.
	      </para></listitem></varlistentry>
	  <varlistentry><term>out-of-zone-additional-processing | --out-of-zone-additional-processing=yes | --out-of-zone-additional-processing=no</term>
	    <listitem><para>
		Do out of zone additional processing
	      </para></listitem></varlistentry>
	  <varlistentry><term>query-cache-ttl=...</term>
	    <listitem><para>
	      Seconds to store queries with an answer in the Query Cache. See <xref linkend="querycache">.
	    </para></listitem></varlistentry>
	<varlistentry><term>queue-limit=...</term>
	    <listitem><para>
		Maximum number of miliseconds to queue a query. See <xref linkend="performance">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>query-logging | query-logging=yes | query-logging=no</term>
	    <listitem><para>
	      Hints to a backend that it should log a textual representation of queries it performs. Can be set at runtime.
	      </para></listitem></varlistentry>
	  <varlistentry><term>recursive-cache-ttl=...</term>
	    <listitem><para>
		Seconds to store recursive packets in the PacketCache. See <xref linkend="packetcache">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>recursor=...</term>
	    <listitem><para>
	      If set, recursive queries will be handed to the recursor specified here. See <xref linkend="recursion">.
	    </para></listitem></varlistentry>
	<varlistentry><term>setgid=...</term>
	    <listitem><para>
	      If set, change group id to this gid for more security. See <xref linkend="security">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>setuid=...</term>
	    <listitem><para>
		If set, change user id to this uid for more security. See <xref linkend="security">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>skip-cname | --skip-cname=yes | --skip-cname=no</term>
	    <listitem><para>
		Do not perform CNAME indirection for each query. Has performance implications. See <xref linkend="security">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>slave-cycle-interval=60</term>
	    <listitem><para>
	      Schedule slave up-to-date checks of domains whose status is unknown every .. seconds. See <xref linkend="fancy-records">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>smtpredirector=...</term>
	    <listitem><para>
		Our smtpredir MX host. See <xref linkend="fancy-records">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>soa-serial-offset=...</term>
	    <listitem><para>
	      If your database contains single-digit SOA serials and you need to host .DE domains, this setting can help
	      placate their 6-digit SOA serial requirements. Suggested value is to set this to 1000000 which adds 1000000 to all SOA Serials
	      under that offset.
	      </para></listitem></varlistentry>
	  <varlistentry><term>socket-dir=...</term>
	    <listitem><para>
		Where the controlsocket will live. See <xref linkend="controlsocket">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>strict-rfc-axfrs | --strict-rfc-axfrs=yes | --strict-rfc-axfrs=no</term>
	    <listitem><para>
	      Perform strictly RFC conformant AXFRs, which are slow, but needed to placate some old client tools.
	      </para></listitem></varlistentry>
	  <varlistentry><term>urlredirector=...</term>
	    <listitem><para>
		Where we send hosts to that need to be url redirected. See <xref linkend="fancy-records">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>webserver | --webserver=yes | --webserver=no</term>
	    <listitem><para>
		Start a webserver for monitoring. See <xref linkend="monitoring">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>webserver-address=...</term>
	    <listitem><para>
		IP Address of webserver to listen on. See <xref linkend="monitoring">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>webserver-password=...</term>
	    <listitem><para>
		Password required for accessing the webserver. See <xref linkend="monitoring">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>webserver-port=...</term>
	    <listitem><para>
		Port of webserver to listen on. See <xref linkend="monitoring">.
	      </para></listitem></varlistentry>
	  <varlistentry><term>wildcard-url=...</term>
	    <listitem><para>
	      Check for wildcard URL records.
	      </para></listitem></varlistentry>
	  <varlistentry><term>wildcards=...</term>
	    <listitem><para>
		Honor wildcards in the database. On by default. Turning this off has performance implications, see <xref linkend="performance">.
	      </para></listitem></varlistentry>
      </variablelist>
    </para>
  </chapter>
  <chapter id="metrics"><title>Index of all internal metrics</title>
    <para></para>
      <sect1 id="counters-variables"><title>Counters &amp; variables</title>
      <para>
      A number of counters and variables are set during PDNS operation. These can be queried with the init.d
      <command>dump</command>, <command>show</command> and <command>mrtg</command> commands, or viewed with the
      webserver.
      
      <variablelist>
	<varlistentry>
	  <term>corrupt-packets</term>
	  <listitem><para>Number of corrupt packets received</para></listitem>
	</varlistentry>
	<varlistentry>
	  <term>latency</term>
	  <listitem><para>Average number of microseconds a packet spends within PDNS</para></listitem>
	</varlistentry>
	<varlistentry>
	  <term>packetcache-hit</term>
	  <listitem><para>Number of packets which were answered out of the cache</para></listitem>
	</varlistentry>
	<varlistentry>
	  <term>packetcache-miss</term>
	  <listitem><para>Number of times a packet could not be answered out of the cache</para></listitem>
	</varlistentry>
	<varlistentry>
	  <term>packetcache-size</term>
	  <listitem><para>Amount of packets in the packetcache</para></listitem>
	</varlistentry>
	<varlistentry>
	  <term>qsize-a</term>
	  <listitem><para>Size of the queue before the transmitting socket.</para></listitem>
	</varlistentry>
	<varlistentry>
	  <term>qsize-q</term>
	  <listitem><para>Number of packets waiting for database attention</para></listitem>
	</varlistentry>
	<varlistentry>
	  <term>servfail-packets</term>
	  <listitem><para>Amount of packets that could not be answered due to database problems</para></listitem>
	</varlistentry>
	<varlistentry>
	  <term>tcp-answers</term>
	  <listitem><para>Number of answers sent out over TCP</para></listitem>
	</varlistentry>
	<varlistentry>
	  <term>tcp-questions</term>
	  <listitem><para>Number of questions received over TCP</para></listitem>
	</varlistentry>
	<varlistentry>
	  <term>timedout-questions</term>
	  <listitem><para>Amount of packets that were dropped because they had to wait too long internally</para></listitem>
	</varlistentry>
	<varlistentry>
	  <term>udp-answers</term>
	  <listitem><para>Number of answers sent out over UDP</para></listitem>
	</varlistentry>
	<varlistentry>
	  <term>udp-questions</term>
	  <listitem><para>Number of questions received over UDP</para></listitem>
	</varlistentry>
      </variablelist>
    </para>
    <para>
      <sect2><title>Ring buffers</title>
	<para>
	  Besides counters, PDNS also maintains the ringbuffers. A ringbuffer records events, each new event gets a place
	  in the buffer until it is full. When full, earlier entries get overwritten, hence the name 'ring'.
	</para>
    <para>
      By counting the entries in the buffer, statistics can be generated. These statistics can currently only be viewed 
      using the webserver and are in fact not even collected without the webserver running. 
    </para>
    <para>
      The following ringbuffers are available:
    </para>
    <para>
    <variablelist>
      <varlistentry>
	<term>Log messages (logmessages)</term>
	<listitem><para>All messages logged</para></listitem>
      </varlistentry>
      <varlistentry>
	<term>Queries for existing records but for a type we don't have (noerror-queries)</term>
	<listitem><para>Queries for, say, the AAAA record of a domain, when only an A is available. 
	  Queries are listed in the following format: name/type. So an AAA query for pdns.powerdns.com looks like
	  pdns.powerdns.com/AAAA.</para></listitem>
      </varlistentry>
      <varlistentry>
	<term>Queries for non-existing records within existing domains(nxdomain-queries)</term>
	<listitem><para>If PDNS knows it is authoritative over a domain, and it sees a question for a record in that domain
	    that does not exist, it is able to send out an authoritative 'no such domain' message. Indicates that hosts are
	    trying to connect to services really not in your zone.</para></listitem>
      </varlistentry>

      <varlistentry>
	<term>UDP queries received (udp-queries)</term>
	<listitem><para>
	    All UDP queries seen.
	  </para></listitem>
      </varlistentry>
      <varlistentry>
	<term>Remote server IP addresses (remotes)</term>
	<listitem><para>
	    Hosts querying PDNS. Be aware that UDP is anonymous - person A can send queries that appear to be coming from
	    person B.
	  </para></listitem>
      </varlistentry>
      <varlistentry>
	<term>Remotes sending corrupt packets (remote-corrupts)</term>
	<listitem><para>
	    Hosts sending PDNS broken packets, possibly meant to disrupt service. Be aware that UDP is 
	    anonymous - person A can send queries that appear to be coming from person B.
	  </para></listitem>
      </varlistentry>
      <varlistentry>
	<term>Remotes querying domains for which we are not auth (remote-unauth)</term>
	<listitem><para>
	    It may happen that there are misconfigured hosts on the internet which are configured to
	    think that a PDNS installation is in fact a resolving nameserver. These hosts will not
	    get useful answers from PDNS. This buffer lists hosts sending queries for domains which 
	    PDNS does not know about.
	  </para></listitem>
      </varlistentry>
      <varlistentry>
	<term>Queries that could not be answered due to backend errors (servfail-queries)</term>
	<listitem><para>
	    For one reason or another, a backend may be unable to extract answers for a certain domain from
	    its storage. This may be due to a corrupt database or to inconsistent data. When this happens,
	    PDNS sends out a 'servfail' packet indicating that it was unable to answer the question. This buffer
	    shows which queries have been causing servfails.
	  </para></listitem>
      </varlistentry>
      <varlistentry>
	<term>Queries for domains that we are not authoritative for (unauth-queries)</term>
	<listitem><para>
	    If a domain is delegated to a PDNS instance, but the backend is not made aware of this fact, questions come
	    in for which no answer is available, nor is the authority. Use this ringbuffer to spot such queries.
	  </para></listitem>
      </varlistentry>
    </variablelist>
  </para>
  </chapter>

  <chapter id="types"><title>Supported record types and their storage</title>
    <para>
      This chapter lists all record types PDNS supports, and how they are stored in backends. The list is mostly alphabetical but
      some types are grouped.
    <variablelist>
      <varlistentry>
	<term>A</term>
	  <listitem>
	    <para>
	      The A record contains an IP address. It is stored as a decimal dotted quad string,
	      for example: '213.244.168.210'.
	    </para>
	  </listitem>      
	</varlistentry>
	<varlistentry>
	  <term>AAAA</term>
	  <listitem>
	    <para>
	      The AAAA record contains an IPv6 address. It is stored as a decimal dotted quad string,
	      for example: '3ffe:8114:2000:bf0::1'. 
	    </para>
	  </listitem>      
	</varlistentry>
	<varlistentry>
	  <term>CNAME</term>
	  <listitem>
	    <para>
	      The CNAME record specifies the canonical name of a record. It is stored plainly. Like all other records, it is not
	      terminated by a dot. A sample might be 'webserver-01.yourcompany.com'.
	    </para>
	  </listitem>      
	</varlistentry>
	<varlistentry>
	  <term>HINFO</term>
	  <listitem>
	    <para>
	      Hardware Info record, used to specify CPU and operating system. Stored with a single space separating these two, 
	      example: 'i386 Linux'.
	    </para>
	  </listitem>      
	</varlistentry>
	<varlistentry>
	  <term>MX</term>
	  <listitem>
	    <para>
	      The MX record specifies a mail exchanger host for a domain. Each mail exchanger also has a priority or preference.
	      This should be specified in the separate field dedicated for that purpose, often called 'prio'. 
	    </para>
	  </listitem>      
	</varlistentry>
	<varlistentry>
	  <term><anchor id="naptr">NAPTR</term>
	  <listitem>
	    <para>

	      Naming Authority Pointer, RFC 2915. Stored as follows:
	      <screen>
	      '100  50  "s"  "z3950+I2L+I2C"     ""  _z3950._tcp.gatech.edu'. 
	      </screen>
	      The fields are: order, preference, flags, service, regex, 
	      replacement. Note that the replacement is not enclosed in quotes, and should not be. The replacement may be omitted, in which 
	      case it is empty. See also RFC 2916 for how to use NAPTR for ENUM (E.164) purposes.
	    </para>
	  </listitem>      
	</varlistentry>
	<varlistentry>
	  <term>NS</term>
	  <listitem>
	    <para>
	      Nameserver record. Specifies nameservers for a domain. Stored plainly: 'ns1.powerdns.com', as always without a terminating dot.
	    </para>
	  </listitem>      
	</varlistentry>
	<varlistentry>
	  <term>PTR</term>
	  <listitem>
	    <para>
	      Reverse pointer, used to specify the host name belonging to an IP or IPv6 address. Name is stored plainly: 'www.powerdns.com'.
	      As always, no terminating dot.
	    </para>
	  </listitem>      
	</varlistentry>
	<varlistentry>
	  <term>RP</term>
	  <listitem>
	    <para>
	      Responsible Person record, as described in RFC 1183. Stored with a single space between the mailbox name and the more-information
	      pointer. Example 'peter.powerdns.com peter.people.powerdns.com', to indicate that peter@powerdns.com is responsible and that more 
	      information about peter is available by querying the TXT record of peter.people.powerdns.com.
	    </para>
	  </listitem>      
	</varlistentry>
	<varlistentry>
	  <term><anchor id="soa-type">SOA</term>
	  <listitem>
	    <para>
	      The Start of Authority record is one of the most complex available. It specifies a lot about a domain: the name 
	      of the master nameserver ('the primary'), the hostmaster and a set of numbers indicating how the data in this domain
	      expires and how often it needs to be checked. Further more, it contains a serial number which should rise on each change
	      of the domain.
	    </para>
	    <para>
	      The stored format is:
	      <screen>
		primary hostmaster serial refresh retry expire default_ttl
	      </screen>
	      Besides the primary and the hostmaster, all fields are numerical. PDNS has a set of default values:
	      <table>
		<title>SOA fields</title>
		<tgroup cols=2>
		  <tbody>
		    <row>
		      <entry>primary</entry><entry><command>default-soa-name</command> configuration option</entry>
		    </row>
		    <row>
		      <entry>hostmaster</entry><entry>hostmaster@domain-name</entry>
		    </row>
		    <row>
		      <entry>serial</entry><entry>0</entry>
		    </row>
		    <row>
		      <entry>refresh</entry><entry>10800 (3 hours)</entry>
		    </row>
		    <row>
		      <entry>retry</entry><entry>3600 (1 hour)</entry>
		    </row>
		    <row>
		      <entry>expire</entry><entry>604800 (1 week)</entry>
		    </row>
		    <row>
		      <entry>default_ttl</entry><entry>3600 (1 hour)</entry>
		    </row>
		  </tbody>
		</tgroup>
	      </table>
	    </para>
	    <para>
	      The fields have complicated and sometimes controversial meanings. The 'serial' field is special. If left at 0, the default,
	      PDNS will perform an internal list of the domain to determine highest change_date field of all records within the zone, and use
	      that as the zone serial number. This means that the serial number is always raised when changes are made to the zone, as long
	      as the change_date field is being set.
	    </para>
	  </listitem>      
	</varlistentry>
	<varlistentry>
	  <term>TXT</term>
	  <listitem>
	    <para>
	      The TXT field can be used to attach textual data to a domain. Text is stored plainly.
	    </para>
	  </listitem>      
	</varlistentry>
      </variablelist>
    </para>
  </chapter>
  <chapter id="faq"><title>HOWTO &amp; Frequently Asked Questions</title>
    <para>
      This chapter contains a number of FAQs and HOWTOs.
    </para>
    <sect1 id="pdns-devel-faq"><title>Backend developer HOWTO</title>
      <para>
	Writing backends without access to the full PDNS source means that you need to write code that can be loaded by PDNS at runtime. 
	This in turn means that you need to use the same compiler that we do. For linux, this is currently GCC 3.0.4, although any 3.0.x 
	compiler is probably fine. In tests, even 3.1 works.
      </para>
      <para>
	For FreeBSD we use GCC 2.95.2.
      </para>
      <para>
	Furthermore, your pdns_server executable must be dynamically linked. The default .rpm PDNS contains a static binary so you need to retrieve the
	dynamic rpm or the dynamic tar.gz or the Debian unstable ('Woody') deb. FreeBSD dynamic releases are forthcoming.
      </para>
      <variablelist>
	<varlistentry>
	  <term>Q: Will PDNS drivers work with other PDNS versions than they were compiled for?</term>
	  <listitem>
	    <para>
	      A: 'Probably'. We make no guarantees. Efforts have been made to keep the interface between the backend and PDNS as thin
	      as possible. For example, a backend compiled with the 1.99.11 backend development kit works with 1.99.10. But don't count on it.
	      We will notify when we think an incompatible API change has occured but you are best off recompiling your driver for each
	      new PDNS release.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Q: What is in that DNSPacket * pointer passed to lookup!</term>
	  <listitem>
	    <para>
	      A: For reasons outlined above, you should treat that pointer as opaque and only access it via the <function>getRemote()</function> 
	      functions made available and documented above. The DNSPacket class changes a lot and this level of indirection allows for greater
	      changes to be made without changing the API to the backend coder.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Q: How is the PowerDNS Open Source Backend Development Kit licensed?</term>
	  <listitem>
	    <para>
	      A: MIT X11, a very liberal license permitting basically everything.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Q: Can I release the backend I wrote?</term>
	  <listitem>
	    <para>
	      A: Please do! If you tell us about it we will list you on our page.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Q: Can I sell backends I wrote?</term>
	  <listitem>
	    <para>
	      A: You can. Again, if you tell us about them we will list your backend on the site. You can keep the source of your backend
	      secret if you want, or you can share it with the world under any license of your chosing.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Q: Will PowerDNS use my code in the PDNS distribution?</term>
	  <listitem>
	    <para>
	      A: If your license permits it and we like your backend, we sure will.  If your license does not permit it but we like your 
	      backend anyway we may contact you. 
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Q: My backend compiles but when I try to load it, it says 'undefined symbol: _Z13BackendMakersv'</term>
	  <listitem>
	    <para>
	      A: Your pdns_server binary is static and cannot load a backend driver at runtime. Get a dynamic version of pdns, or complain 
	      to pdns@powerdns.com if one isn't available. To check what kind of binary you have, execute 'file $(which pdns_server)'.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Q: My backend compiles but when I try to load it, it says 'undefined symbol: BackendMakers__Fv'</term>
	  <listitem>
	    <para>
	      A: You compiled with the wrong GCC. Use GCC 3.x for Linux, 2.95.x for FreeBSD. You may want to change g++ to g++-3.0 in the Makefile,
	      or change your path so that 3.x is used.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Q: I downloaded a dynamic copy of pdns_server but it doesn't run, even without my backend</term>
	  <listitem>
	    <para>
	      A: Run 'ldd' on the pdns_server binary and figure out what libraries you are missing. Most likely you need to install gcc 3.0 libraries, 
	      RedHat 7.1 and 7.2 have packages available, Debian installs these by default if you use the 'unstable deb' of PDNS.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Q: What I want can't be done from a backend - I need the whole PDNS source</term>
	  <listitem>
	    <para>
	      A: If you require the source, please contact us (pdns@powerdns.com). All commercial licensees receive the source, 
	      for others we may grant exceptions.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Q: What is this 'AhuException' I keep reading about?</term>
	  <listitem>
	    <para>
	      A: This name has historical reasons and has <ulink url="http://ds9a.nl">no significance</ulink>. 
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Q: I need a backend but I can't write it, can you help?</term>
	  <listitem>
	    <para>
	      A: Yes, we also do custom development. Contact us at pdns@powerdns.com.
	    </para>
	  </listitem>
	</varlistentry>

      </variablelist>
    </sect1>
    <sect1 id="powerdns-company-faq"><title>About PowerDNS.COM BV, 'the company'</title>
      <para>
	As of 25 November 2002, the PowerDNS nameserver and its modules are open source. This has led to a lot of questions on the future
	of both PowerDNS, the company and the products. This FAQ attempts to address these questions.
      </para>
      <para>
	<variablelist>
	  <varlistentry>
	    <term>Q: Is PowerDNS 2.9 really open source? What license?</term>
	    <listitem>
	      <para>
		A: PowerDNS 2.9 is licensed under the GNU General Public License version two, the same license that covers the Linux kernel.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Q: Is the open source version crippled?</term>
	    <listitem>
	      <para>
		A: It is not. Not a single byte has been omitted.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Q: Is the nameserver abandoned?</term>
	    <listitem>
	      <para>
		A: Far from it. In fact, we expect development to speed up now that we have joined the open source community.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Q: Why is the nameserver now open source?</term>
	    <listitem>
	      <para>
		A: In the current economic climate and also the way the Internet is built up right now, selling software is very hard. Most  potential 
		customers had never before bought a piece of software for their UNIX internet setup. Even though we know (from the recent survey) that
		nameserver operators love PowerDNS, their suggested price for it is in the $100 range.
	      </para>
	      <para>
		For us, it makes far more sense to open source PowerDNS than to ask $100 for it. It is expected that open sourcing PowerDNS will lead
		to far higher adoption rates. We hope that PowerDNS will soon be included in major Linux and UNIX distributions.
	      </para>
	    </listitem>
	  <varlistentry>
	    <term>Q: How does PowerDNS.COM BV expect to make money now that the nameserver is free?</term>
	    <listitem>
	      <para>
		A: In fact, we don't expect to in the near future. We also don't have a lot of expenses, basically 
		some hosting and a few domain names. 
	      </para>
	      <para>
		However, we are available for consulting work, for example to help a large registrar or registry migrate to PowerDNS, or to help
		integrate our software in existing provisioning systems.
	      </para>
	      <para>
		Furthermore, non-GPL licenses are available for those needing to do closed source modifications, or for customers 
		uncomfortable with the GPL. This is much like what <ulink url="http://www.mysql.com/company/index.html">MySQL AB</ulink> is doing now.
	      </para>
	      <para>
		In fact, their strategy is a lot like ours in general.
	      </para>
	  </varlistentry>
	  <varlistentry>
	    <term>Q: Can I buy support contracts for PowerDNS?</term>
	    <listitem>
	      <para>
		Sure, to do so, please contact us at <email>sales@powerdns.com</email>
	      </para>
	  </varlistentry>
	  <varlistentry>
	    <term>Q: Will you accept patches? We've added a feature</term>
	    <listitem>
	      <para>
		Probably - in general, it is best to discuss your intentions and needs on the <email>pdns-dev@mailman.powerdns.com</email> (<ulink url="http://mailman.powerdns.com/mailman/listinfo/pdns-dev">subscribe</ulink>)
		mailinglist
		before doing the work. We may have suggestions or guidelines on how you should implement the feature. 
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Q: PowerDNS doesn't work on my platform, will you port it?</term>
	    <term>Q: PowerDNS doesn't have feature I need, will you add it?</term>
	    <listitem>
	      <para>
		Be sure to ask on the <email>pdns-dev@mailman.powerdns.com</email> (<ulink url="http://mailman.powerdns.com/mailman/listinfo/pdns-dev">subscribe</ulink>) mailinglist. You can even hire us to do work on PowerDNS
		if plain asking is not persuasive enough. This might be the case if we don't currently have time for your feature, but you
		need it quickly anyhow, and are not in a position to submit a patch implementing it.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Q: Will <ulink url="http://express.powerdns.com">PowerDNS Express</ulink> be open sourced? 
	      <ulink url="http://www.powerdns.com/powermail/">PowerMail?</ulink></term>
	    <listitem>
	      <para>
		Perhaps, we're not yet sure. PowerMail most probably.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>Q: We are a Linux/Unix vendor, can we include PowerDNS?
	    <listitem>
	      <para>
	      A: Please do. In fact, we'd be very happy to work with you to make this happen. Contact <email>ahu@ds9a.nl</email> 
	      if you have specific upstream needs.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
    </sect1>
  </chapter>
  <Appendix id="backends-detail"><title>Backends in detail</title>
    <para>
      This appendix lists several of the available backends in more detail
    </para>
    
    
    <sect1 id="pipebackend"><title>PipeBackend</title>
      <para>
	<table>
	  <title>PipeBackend capabilities</title>
	  <tgroup cols=2>
	    <tbody>
	      <row><entry>Native</entry><entry>Yes</entry></row>
	      <row><entry>Master</entry><entry>No</entry></row>
	      <row><entry>Slave</entry><entry>No</entry></row>
	      <row><entry>Superslave</entry><entry>No</entry></row>
	      <row><entry>Autoserial</entry><entry>No</entry></row>
	      <row><entry>Case</entry><entry>Depends</entry></row>
	    </tbody>
	  </tgroup>
	</table>
      </para>
      <para>
	The PipeBackend allows for easy dynamic resolution based on a 'Coprocess' which can be written in any
	programming language that can read a question on standard input and answer on standard output. 
      </para>
      <para>
	To configure, the following settings are available:
	<variablelist>
	  <varlistentry>
	    <term>pipe-command</term>
	    <listitem>
	      <para>
		Command to launch as backend. Mandatory.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>pipe-timeout</term>
	    <listitem>
	      <para>
		Number of milliseconds to wait for an answer from the backend. If this time is ever exceeded, the backend
		is declared dead and a new process is spawned. Available since 2.7.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>pipe-regex</term>
	    <listitem>
	      <para>
		If set, only questions matching this regular expression are even sent to the backend. This makes sure that
		most of PowerDNS does not slow down if you you reploy a slow backend. A query for the A record of 'www.powerdns.com'
		would be presented to the regex as 'www.powerdns.com;A'. A matching regex would be '^www.powerdns.com;.*$'.
	      </para>
	      <para>
		To match only ANY and A queries for www.powerdns.com, use '^www.powerdns.com;(A|ANY)$'. Available since 2.8.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
      
      <sect2 id="pipebackend-protocol"><title>PipeBackend protocol</title>
	<para>
	  Questions come in over a file descriptor, by default standard input. Answers
	  are sent out over another file descriptor, standard output by default.
	</para>
	<sect3>
      <title>Handshake</title>
      <para>
        PowerDNS sends out 'HELO\t1', indicating that it wants to speak the
        protocol as defined in this document, version 1.
        
        A PowerDNS CoProcess must then send out a banner, prefixed by 'OK\t', 
        indicating it launched successfully. If it does not support the indicated
        version, it should respond with FAIL, but not exit. Suggested behaviour is
        to try and read a further line, and wait to be terminated.
      </para></sect3>
    <sect3><title>Questions</title>
      <para>
        Questions come in three forms and are prefixed by a tag indicating the kind:
	<variablelist>
	  <varlistentry>
	    <term>Q</term>
	    <listitem>
	      <para>
                Regular queries
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>AXFR</term>
	    <listitem>
	      <para>
                List requests, which mean that an entire zone should be listed
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>PING</term>
	    <listitem>
	      <para>
                Check if the coprocess is functioning
	      </para>
	    </listitem>
	  </varlistentry>
        </variablelist>
The question format:
<screen>
type	qname		qclass	qtype	id	ip-address
</screen>

Fields are tab separated, and terminated with a single \n. 

Type is the tag above, qname is the domain the question is about. qclass is
always 'IN' currently, denoting an INternet question. qtype is the kind of
information desired, the record type, like A, CNAME or AAAA. id can be
specified to help your backend find an answer if the id is already known
from an earlier query. You can ignore it.

ip-address is the ip-address of the nameserver asking the question.
      </para></sect3>
    <sect3><title>Answers</title>
      <para>

        Each answer starts with a tag, possibly followed by a TAB and more data.
	<variablelist>
	  <varlistentry>
	    <term>DATA</term>
	    <listitem>
	      <para>
                Indicating a successful line of DATA
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>END</term>
	    <listitem>
	      <para>
                Indicating the end of an answer - no further data
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>FAIL</term>
	    <listitem>
	      <para>
                Indicating a lookup failure. Also serves as 'END'. No further data.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>LOG</term>
	    <listitem>
	      <para>
                For specifying things that should be logged. Can only be sent after
                a query and before an END line. After the tab, the message to be
                logged
                
	      </para>
	    </listitem>
	  </varlistentry>
        </variablelist>


        So letting it be known that there is no data consists if sending 'END'
        without anything else.


The answer format:
<screen>
DATA	qname		qclass	qtype	ttl	id	content	
</screen>

'content' is as specified in <xref linkend="types">.

A sample dialogue may look like this:
<screen>
Q	www.ds9a.nl	IN	CNAME	-1	213.244.168.210
DATA	www.ds9a.nl	IN	CNAME	3600	1 ws1.ds9a.nl
Q	ws1.ds9a.nl	IN	CNAME	-1	213.244.168.210
END
Q	wd1.ds9a.nl	IN	A	-1	213.244.168.210
DATA	ws1.ds9a.nl	IN	A	3600	1	1.2.3.4
DATA	ws1.ds9a.nl	IN	A	3600	1	1.2.3.5
DATA	ws1.ds9a.nl	IN	A	3600	1	1.2.3.6
END
</screen>

	  This would correspond to a remote webserver 213.244.168.210 wanting to
resolve the IP address of www.ds9a.nl, and PowerDNS traversing the CNAMEs to
find the IP addresses of ws1.ds9a.nl

Another dialogue might be:
<screen>
Q	ds9a.nl		IN	SOA	-1	213.244.168.210
DATA	ds9a.nl		IN	SOA	86400	1 ahu.ds9a.nl ...
END
AXFR	1
DATA	ds9a.nl		IN	SOA	86400	1 ahu.ds9a.nl ...
DATA	ds9a.nl		IN	NS	86400	1 ns1.ds9a.nl
DATA	ds9a.nl		IN	NS	86400	1 ns2.ds9a.nl
DATA	ns1.ds9a.nl	IN	A	86400	1 213.244.168.210
DATA	ns2.ds9a.nl	IN	A	86400	1 63.123.33.135
.
.
END
</screen>

This is a typical zone transfer.
	  </para>
	</sect3>
	<sect3>
	<title>Sample perl backend</title>
	<para>
	<screen>
#!/usr/bin/perl -w
# sample PowerDNS Coprocess backend
#

use strict;


$|=1;					# no buffering

my $line=&lt;&gt;;
chomp($line);

unless($line eq "HELO\t1") {
	print "FAIL\n";
	print STDERR "Recevied '$line'\n";
	&lt;&gt;;
	exit;
}
print "OK	Sample backend firing up\n";	# print our banner

while(&lt;&gt;)
{
	print STDERR "$$ Received: $_";
	chomp();
	my @arr=split(/\t/);
	if(@arr&lt;6) {
		print "LOG	PowerDNS sent unparseable line\n";
		print "FAIL\n";
		next;
	}

	my ($type,$qname,$qclass,$qtype,$id,$ip)=split(/\t/);

	if(($qtype eq "A" || $qtype eq "ANY") && $qname eq "webserver.example.com") {
		print STDERR "$$ Sent A records\n";
		print "DATA	$qname	$qclass	A	3600	-1	1.2.3.4\n";
		print "DATA	$qname	$qclass	A	3600	-1	1.2.3.5\n";
		print "DATA	$qname	$qclass	A	3600	-1	1.2.3.6\n";
	}
	elsif(($qtype eq "CNAME" || $qtype eq "ANY") && $qname eq "www.example.com") {
		print STDERR "$$ Sent CNAME records\n";
		print "DATA	$qname	$qclass	CNAME	3600	-1	webserver.example.com\n";
	}
	elsif($qtype eq "MBOXFW") {
		print STDERR "$$ Sent MBOXFW records\n";
		print "DATA	$qname	$qclass	MBOXFW	3600	-1	powerdns\@example.com\n";
	}


	print STDERR "$$ End of data\n";
	print "END\n";
}
	  </screen>
	</para>
	</sect3>
      </sect2>
		  
    </sect1>
    <sect1 id="mysqlbackend"><Title>MySQL backend</title>
      <para>
	<table>
	  <title>MySQL backend capabilities</title>
	  <tgroup cols=2>
	    <tbody>
	      <row><entry>Native</entry><entry>Yes</entry></row>
	      <row><entry>Master</entry><entry>No</entry></row>
	      <row><entry>Slave</entry><entry>No</entry></row>
	      <row><entry>Superslave</entry><entry>No</entry></row>
	      <row><entry>Autoserial</entry><entry>Yes</entry></row>
	      <row><entry>Case</entry><entry>Insensitive</entry></row>
	    </tbody>
	  </tgroup>
	</table>
      </para>
      <para>
        The MySQL Backend as present in PDNS is fixed - it requires a certain database schema to function. This schema corresponds to this create statement:
        
        <screen>
          CREATE TABLE records (
	  id int(11) NOT NULL auto_increment,
	  domain_id int(11) default NULL,
	  name varchar(255) default NULL,
	  type varchar(6) default NULL,
	  content varchar(255) default NULL,
	  ttl int(11) default NULL,
	  prio int(11) default NULL,
	  change_date int(11) default NULL,
	  PRIMARY KEY (id),
	  KEY name_index(name),
	  KEY nametype_index(name,type),
	  KEY domainid_index(domain_id)
	  );
        </screen>
        
        Every domain should have a unique domain_id, which should remain identical for all records in a domain. Records with a domain_id that
	differs from that in the domain SOA record will not appear in a zone transfer.

      </para>
      <para>
	The change_date may optionally
        be updated to the time_t (the number of seconds since midnight UTC at the start of 1970), and is in that case used to auto calculate the 
        SOA serial number in case that is unspecified.
        
      </para>
      <sect2><title>Configuration settings</title>
        <para>
	  WARNING! Make sure that you can actually resolve the hostname of your database without accessing the database! It is advised to supply
	  an IP address here to prevent chicken/egg problems!
	</para>
	<para>
          <variablelist>
            <varlistentry>
              <term>mysql-dbname</term>
              <listitem>
                <para>
                  Database name to connect to
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>mysql-host</term>
              <listitem>
                <para>
                  Database host to connect to
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>mysql-password</term>
              <listitem>
                <para>
                  Password to connect with
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>mysql-socket</term>
              <listitem>
                <para>
                  MySQL socket to use for connecting
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>mysql-table</term>
              <listitem>
                <para>
                  MySQL table name. Defaults to 'records'.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>mysql-user</term>
              <listitem>
                <para>
                  MySQL user to connect as
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
	</para>
      </sect2>
      <sect2><title>Notes</title>
	<para>
	  It has been observed that InnoDB tables outperform the default MyISAM tables by a large margin. Furthermore, the default 
	  number of backends (3) should be raised to 10 or 15 for busy servers.
	</para>
      </sect2>
      
    </sect1>
    <sect1 id="pdnsbackend"><Title>MySQL PDNS backend</title>
      <para>
	<table>
	  <title>MySQL backend capabilities</title>
	  <tgroup cols=2>
	    <tbody>
	      <row><entry>Native</entry><entry>Yes</entry></row>
	      <row><entry>Master</entry><entry>No</entry></row>
	      <row><entry>Slave</entry><entry>No</entry></row>
	      <row><entry>Superslave</entry><entry>No</entry></row>
	      <row><entry>Autoserial</entry><entry>Yes</entry></row>
	      <row><entry>Case</entry><entry>Insensitive</entry></row>
	    </tbody>
	  </tgroup>
	</table>
      </para>
      <para>
	This is the driver that corresponds to the set of XML-RPC tools available from PowerDNS. For database schemas, see there.
      </para>
      <para>
	It takes a number of parameters:
      </para>
	<para>
          <variablelist>
            <varlistentry>
              <term>pdns-dbname</term>
              <listitem>
                <para>
                  Database name to connect to
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>pdns-host</term>
              <listitem>
                <para>
                  Database host to connect to
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>pdns-password</term>
              <listitem>
                <para>
                  Password to connect with
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>pdns-socket</term>
              <listitem>
                <para>
                  MySQL socket to use for connecting
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>pdns-user</term>
              <listitem>
                <para>
                  MySQL user to connect as
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
	</para>
      <sect2><title>Notes</title>
	<para>
	  It has been observed that InnoDB tables outperform the default MyISAM tables by a large margin. Furthermore, the default 
	  number of backends (3) should be raised to 10 or 15 for busy servers.
	</para>
      </sect2>
      
    </sect1>

    <sect1 id="generic-mypgsql-backends"><Title>Generic MySQL and PgSQL backends</title>
      <para>
	<table>
	  <title>Generic PgSQL and MySQL backend capabilities</title>
	  <tgroup cols=2>
	    <tbody>
	      <row><entry>Module name</entry><entry>gpgsql / gmysql</entry></row>
	      <row><entry>Native</entry><entry>Yes - but PostgreSQL does not replicate</entry></row>
	      <row><entry>Master</entry><entry>Yes</entry></row>
	      <row><entry>Slave</entry><entry>Yes</entry></row>
	      <row><entry>Superslave</entry><entry>Yes</entry></row>
	      <row><entry>Autoserial</entry><entry>Yes</entry></row>
	      <row><entry>Case</entry><entry>All lower</entry></row>
	    </tbody>
	  </tgroup>
	</table>
      </para>
      <para>
	PostgreSQL and MySQL backend with easily configurable SQL statements, allowing you to graft PDNS on any PostgreSQL or MySQL database of your choosing. 
	Because all database schemas will be different, a generic backend is needed to cover all needs. 
      </para>		
      <para>
	The template queries are expanded using the C function 'snprintf' which implies that substitutions are performed on the basis of %-place holders. 
	To place a a % in a query which will not be substituted, use %%. Make sure to fill out the search key, often called 'name' in lower case!
      </para>
      <para>
	There are in fact two backends, one for PostgreSQL and one for MySQL but they accept the same settings and use almost exactly the same database schema.
      </para>
      <sect2><title>MySQL specifics</title>
	<para>
	  <warning>
	    <para>
	      As of 2.3, the Generic MySQL backend has not been tested a lot. Use the regular MySQL backend if unsure! Especially 'master' support is 
	      very new.
	    </para>
	  </warning>
	  <warning>
	    <para>
	      If using MySQL with 'slave' support enabled in PowerDNS you <emphasis>must</emphasis> run MySQL with a table engine that supports transactions.
	    </para>
	  </warning>
	</para>
	<para>
	  In practice, great results are achieved with the 'InnoDB' tables. PowerDNS will silently function with non-transaction aware MySQLs but at one point
	  this is going to harm your database, for example when an incoming zone transfer fails.
	</para>
	<para>
	  The default setup conforms to the following schema:
	  <programlisting>
create table domains (
 id		 INT auto_increment,
 name		 VARCHAR(255) NOT NULL,
 master		 VARCHAR(20) DEFAULT NULL,
 last_check	 INT DEFAULT NULL,
 type		 VARCHAR(6) NOT NULL,
 notified_serial INT DEFAULT NULL, 
 account         VARCHAR(40) DEFAULT NULL,
 primary key (id)
)type=InnoDB;

CREATE UNIQUE INDEX name_index ON domains(name);

CREATE TABLE records (
  id              INT auto_increment,
  domain_id       INT DEFAULT NULL,
  name            VARCHAR(255) DEFAULT NULL,
  type            VARCHAR(6) DEFAULT NULL,
  content         VARCHAR(255) DEFAULT NULL,
  ttl             INT DEFAULT NULL,
  prio            INT DEFAULT NULL,
  change_date     INT DEFAULT NULL,
  primary key(id)
)type=InnoDB;

CREATE INDEX rec_name_index ON records(name);
CREATE INDEX nametype_index ON records(name,type);
CREATE INDEX domain_id ON records(domain_id);

create table supermasters (
  ip VARCHAR(25) NOT NULL, 
  nameserver VARCHAR(255) NOT NULL, 
  account VARCHAR(40) DEFAULT NULL
);

GRANT SELECT ON supermasters TO pdns;
GRANT ALL ON domains TO pdns;
GRANT ALL ON records TO pdns;
	  </programlisting>
	</para>
	<para>
	  This schema contains all elements needed for master, slave and superslave operation. Depending on which features will be used, the 'GRANT' statements
	  can be trimmed to make sure PDNS cannot subvert the contents of your database.
	</para>
	<para>
	  Zone2sql with the --gmysql flag also assumes this layout is in place.
	</para>
      </sect2>
      <sect2><title>PostgresSQL specifics</title>
      <para>
	The default setup conforms to the following schema:
	<programlisting>
create table domains (
 id		 SERIAL PRIMARY KEY,
 name		 VARCHAR(255) NOT NULL,
 master		 VARCHAR(20) DEFAULT NULL,
 last_check	 INT DEFAULT NULL,
 type		 VARCHAR(6) NOT NULL,
 notified_serial INT DEFAULT NULL, 
 account         VARCHAR(40) DEFAULT NULL
);
CREATE UNIQUE INDEX name_index ON domains(name);
  
CREATE TABLE records (
        id              SERIAL PRIMARY KEY,
        domain_id       INT DEFAULT NULL,
        name            VARCHAR(255) DEFAULT NULL,
        type            VARCHAR(6) DEFAULT NULL,
        content         VARCHAR(255) DEFAULT NULL,
        ttl             INT DEFAULT NULL,
        prio            INT DEFAULT NULL,
        change_date     INT DEFAULT NULL, 
        CONSTRAINT domain_exists 
        FOREIGN KEY(domain_id) REFERENCES domains(id)
        ON DELETE CASCADE
);

CREATE INDEX rec_name_index ON records(name);
CREATE INDEX nametype_index ON records(name,type);
CREATE INDEX domain_id ON records(domain_id);

create table supermasters (
	  ip VARCHAR(25) NOT NULL, 
	  nameserver VARCHAR(255) NOT NULL, 
	  account VARCHAR(40) DEFAULT NULL
);

GRANT SELECT ON supermasters TO pdns;
GRANT ALL ON domains TO pdns;
GRANT ALL ON domains_id_seq TO pdns;
GRANT ALL ON records TO pdns;
GRANT ALL ON records_id_seq TO pdns;
	</programlisting>
      </para>
      <para>
	This schema contains all elements needed for master, slave and superslave operation. Depending on which features will be used, the 'GRANT' statements
	can be trimmed to make sure PDNS cannot subvert the contents of your database.
      </para>
      <para>
	Zone2sql with the --gpgsql flag also assumes this layout is in place.
      </para>
      </sect2>
      <sect2><title>Basic functionality</title>
	<para>
	  4 queries are needed for regular lookups, 4 for 'fancy records' which are disabled by default and 1 is needed for zone transfers.
	</para>
	<para>The 4+4 regular queries must return the following 6 fields, in this exact order:
	  <variablelist>
	    <varlistentry>
	      <term>content</term>
	      <listitem>
		<para>
		  This is the 'right hand side' of a DNS record. For an A record, this is the IP address for example.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>ttl</term>
	      <listitem>
		<para>
		  TTL of this record, in seconds. Must be a real value, no checking is performed.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>prio</term>
	      <listitem>
		<para>
		  For MX records, this should be the priority of the mail exchanger specified.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>qtype</term>
	      <listitem>
		<para>
		  The ASCII representation of the qtype of this record. Examples are 'A', 'MX', 'SOA', 'AAAA'. Make sure that this
		  field returns an exact answer - PDNS won't recognise 'A      ' as 'A'. This can be achieved by using a VARCHAR instead 
		  of a CHAR.
		</para>
	      </listitem>
	      
	    </varlistentry>
	    <varlistentry>
	      <term>domain_id</term>
	      <listitem>
		<para>
		  Each domain must have a unique domain_id. No two domains may share a domain_id, all records in a domain should have the same. A number.
		</para>
	    </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>name</term>
	      <listitem>
		<para>
		  Actual name of a record. Must not end in a '.' and be fully qualified - it is not relative to the name of the domain!
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	  Please note that the names of the fields are not relevant, but the order is!
	</para>
	<para>
	  As said earlier, there are 8 SQL queries for regular lookups. To configure them, set 'gmysql-basic-query' or 'gpgsql-basic-query', depending on your
	  choice of backend. If so called 'MBOXFW' fancy records are not used, four queries remain:
	  <variablelist>
	    <varlistentry>
	      <term>basic-query</term>
	      <listitem>
		<para>
		  Default: <command>select content,ttl,prio,type,domain_id,name from records where qtype='%s' and name='%s'</command>
		  This is the most used query, needed for doing 1:1 lookups of qtype/name values. First %s is replaced by the ASCII representation
		  of the qtype of the question, the second by the name.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>id-query</term>
	      <listitem>
		<para>
		  Default: <command>select content,ttl,prio,type,domain_id,name from records where qtype='%s' and name='%s' and domain_id=%d</command>
		  Used for doing lookups within a domain. First %s is replaced by the qtype, the %d which should appear after the %s by the numeric 
		  domain_id.
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry>
	      <term>any-query</term>
	      <listitem>
		<para>
		  For doing ANY queries. Also used internally.
		  Default: <command>select content,ttl,prio,type,domain_id,name from records where name='%s'</command>
		  The %s is replaced by the qname of the question.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>any-id-query</term>
	      <listitem>
		<para>
		  For doing ANY queries within a domain. Also used internally.
		  Default: <command>select content,ttl,prio,type,domain_id,name from records where name='%s' and domain_id=%d</command>
		  The %s is replaced by the name of the domain, the %d by the numerical domain id.
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
	<para>
	  The last query is for listing the entire contents of a zone. This is needed when performing a zone transfer, but sometimes also internally:
	  <variablelist>
	    <varlistentry>
	      <term>list-query</term>
	      <listitem>
		<para>
		  To list an entire zone.
		  Default: <command>select content,ttl,prio,type,domain_id,name from records where domain_id=%d</command>
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
      </sect2>
      <sect2><title>Fancy records</title>
	<para>
	  If PDNS is used with so called 'Fancy Records', the 'MBOXFW' record exists which specifies an email address forwarding instruction, 
	  wildcard queries are sometimes needed. This is not enabled by default.  A wildcard query is 
	  an internal concept - it has no relation to *.domain-type lookups. You can safely leave these queries blank.
	  <variablelist>
	    <varlistentry>
	      <term>wildcard-query</term>
	      <listitem>
		<para>
		  Can be left blank. See above for an explanation.
		  Default: <command>select content,ttl,prio,type,domain_id,name from records where qtype='%s' and name like '%s'</command>
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>wildcard-id-query</term>
	      <listitem>
		<para>
		  Can be left blank. See above for an explanation.
		  Default: <command>select content,ttl,prio,type,domain_id,name from records where qtype='%s' and name like '%s' and domain_id=%d</command>
		  Used for doing lookups within a domain.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>wildcard-any-query</term>
	      <listitem>
		<para>
		  For doing wildcard ANY queries.
		  Default: <command>select content,ttl,prio,type,domain_id,name from records where name like '%s'</command>
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>wildcard-any-id-query</term>
	      <listitem>
		<para>
		  For doing wildcard ANY queries within a domain.
		  Default: <command>select content,ttl,prio,type,domain_id,name from records where name like '%s' and domain_id=%d</command>
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
      </sect2>
	  
      <sect2><title>Settings and specifying queries</title>
	<para>
	  The queries above are specified in pdns.conf. For example, the basic-query would appear as:
	  <screen>
	    gpgsql-basic-query=select content,ttl,prio,type,domain_id,name from records where qtype='%s' and name='%s'
	  </screen>
	  
	  Queries can span multiple lines, like this:
	  <screen>
	    gpgsql-basic-query=select content,ttl,prio,type,domain_id,name from records \
	    where qtype='%s' and name='%s'
	  </screen>
	  Do not wrap statements in quotes as this will not work.
	  Besides the query related settings, the following configuration options are available:
	</para>
	<para>
          <variablelist>
            <varlistentry>
              <term>gpgsql-dbname</term>
              <listitem>
                <para>
                  Database name to connect to
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>gpgsql-host</term>
              <listitem>
                <para>
                  Database host to connect to. WARNING: When specified as a hostname a chicken/egg situation might arise where the database
		  is needed to resolve the IP address of the database. It is best to supply an IP address of the database here.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>gpgsql-password</term>
              <listitem>
                <para>
                  Password to connect with
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>gpgsql-user</term>
              <listitem>
                <para>
                  PgSQL user to connect as
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
	</para>
      </sect2>
      <sect2><title>Native operation</title>
	<para>
	  For native operation, either drop the FOREIGN KEY on the domain_id field, or (recommended), make sure
	  the <command>domains</command> table is filled properly. To add a domain, issue the following:
	  <programlisting>
	    insert into domains (name,type) values ('powerdns.com','NATIVE');
	  </programlisting>
	  The records table can now be filled by with the domain_id set to the id of the domains table row just inserted.
	</para>
      </sect2>
      <sect2><title>Slave operation</title>
	<para>
	  The PostgreSQL backend is fully slave capable. To become a slave of the 'powerdns.com' domain, execute this:
	  <programlisting>
	    insert into domains (name,master,type) values ('powerdns.com','213.244.168.217','SLAVE');
	  </programlisting>
	  And wait a while for PDNS to pick up the addition - which happens within one minute. There is no need to inform PDNS that a new domain
	  was added.
	  Typical output is:
	  <programlisting>
	    Apr 09 13:34:29 All slave domains are fresh
	    Apr 09 13:35:29 1 slave domain needs checking
	    Apr 09 13:35:29 Domain powerdns.com is stale, master serial 1, our serial 0
	    Apr 09 13:35:30 [gPgSQLBackend] Connected to database
	    Apr 09 13:35:30 AXFR started for 'powerdns.com'
	    Apr 09 13:35:30 AXFR done for 'powerdns.com'
	    Apr 09 13:35:30 [gPgSQLBackend] Closing connection
	  </programlisting>
	</para>
	<para>
	  From now on, PDNS is authoritative for the 'powerdns.com' zone and will respond accordingly for queries within that zone. 
	</para>
	<para>
	  Periodically, PDNS schedules checks to see if domains are still fresh. The default <command>slave-cycle-interval</command> is 60 seconds, large installations may need to raise this value. Once a domain has been checked, it will not be checked before its SOA refresh timer has expired. Domains whose status is unknown get checked every 60 seconds by default.
	</para>
      </sect2>
      <sect2><title>Superslave operation</title>
	<para>
	  To configure a supermaster with IP address 10.0.0.11 which lists this installation as 'autoslave.powerdns.com', issue the following:
	  <programlisting>
	    insert into supermasters ('10.0.0.11','autoslave.powerdns.com','internal');
	  </programlisting>
	  From now on, valid notifies from 10.0.0.11 that list a NS record containing 'autoslave.powerdns.com' will lead to the
	  provisioning of a slave domain under the account 'internal'. See <xref linkend="supermaster"> for details.
	</para>
      </sect2>
      <sect2><title>Master operation</title>
	<para>
	  The PostgreSQL backend is fully master capable with automatic discovery of serial changes. Raising the serial number of a domain
	  suffices to trigger PDNS to send out notifications. To configure a domain for master operation instead of the default native replication,
	  issue:
	  <programlisting>
	    insert into domains (name,type) values ('powerdns.com','MASTER');
	  </programlisting>
	  Make sure that the assigned id in the domains table matches the domain_id field in the records table!
	</para>
    </sect1>
    
    <sect1 id="oracle"><Title>Generic Oracle backend</title>
      <para>
	<table>
	  <title>Oracle backend capabilities</title>
	  <tgroup cols=2>
	    <tbody>
	      <row><entry>Native</entry><entry>Yes</entry></row>
	      <row><entry>Master</entry><entry>No</entry></row>
	      <row><entry>Slave</entry><entry>No</entry></row>
	      <row><entry>Superslave</entry><entry>No</entry></row>
	      <row><entry>Autoserial</entry><entry>Yes</entry></row>
	    </tbody>
	  </tgroup>
	</table>
      </para>
      <para>
	Oracle backend with easily configurable SQL statements, allowing you to graft PDNS on any Oracle database of your choosing.
      </para>
      <para>
	PowerDNS is currently ascertaining if this backend can be distributed in binary form without violating Oracle licensing. In the meantime, 
	the source code to the Oracle backend is available for runtime linking into dynamic versions of PowerDNS. See 
	<ulink url="http://downloads.powerdns.com/backends">http://downloads.powerdns.com/backends</ulink> for sources.
      </para>
      <para>
	The following configuration settings are available:
      </para>
      <para>
	<variablelist>
	  <varlistentry>
	    <term>oracle-debug-queries</term>
	    <listitem>
	      <para>
		Output all queries to disk for debugging purposes.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>oracle-time-queries</term>
	    <listitem>
	      <para>
		Output all queries to disk for timing purposes.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>oracle-uppercase-database</term>
	    <listitem>
	      <para>
		Change all domain names to uppercase before querying database.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>oracle-database</term>
	    <listitem>
	      <para>
		Oracle database name to connect to.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>oracle-home</term>
	    <listitem>
	      <para>
		PDNS can set the ORACLE_HOME environment variable from within the executable, allowing execution of
		the daemon from init.d scripts where ORACLE_HOME may not yet be set.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>oracle-sid</term>
	    <listitem>
	      <para>
		PDNS can set the ORACLE_SID environment variable from within the executable, allowing execution of
		the daemon from init.d scripts where ORACLE_SID may not yet be set.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>oracle-username</term>
	    <listitem>
	      <para>
		Oracle username to connect as.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>oracle-password</term>
	    <listitem>
	      <para>
		Oracle password to connect with.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
      <para>
	The generic Oracle backend can be configured to use user-specified queries. The following are the default queries
	and their names:
      </para>
      <para>
	<variablelist>
	  <varlistentry>
	    <term>oracle-forward-query</term>
	    <listitem>
	      <para>
		select content, TimeToLive, Priority, type, ZoneId, nvl(ChangeDate,0) from Records where name = :name and type = :type
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>oracle-forward-query-by-zone</term>
	    <listitem>
	      <para>
		select content, TimeToLive, Priority, type, ZoneId, nvl(ChangeDate,0) from records where name = :name and type = :type and ZoneId = :id
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>oracle-forward-any-query</term>
	    <listitem>
	      <para>
		select content, TimeToLive, Priority, type, ZoneId, nvl(ChangeDate,0) from records where name = :name
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>oracle-list-query</term>
	    <listitem>
	      <para>
		select content, TimeToLive, Priority, type, ZoneId, nvl(ChangeDate, 0), name from records where ZoneId = :id
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
      <sect2><title>Setting up Oracle for use with PowerDNS</title>
	<para>
	  To setup a database that corresponds to these default queries, issue the following as Oracle user sys:
	  <screen>
	    create user powerdns identified by YOURPASSWORD;
	    grant connect to powerdns;
	    
	    create tablespace powerdns datafile '/opt/oracle/oradata/oracle/powerdns.dbf'
	      size 256M extent management local autoallocate;
	    
	    alter user powerdns quota unlimited on powerdns; 
	  </screen>
	</para>
	<para>
	  As user 'powerdns' continue with:
	  <screen>
create table Domains (
 ID		 number(11) NOT NULL,
 NAME		 VARCHAR(255) NOT NULL,
 MASTER		 VARCHAR(20) DEFAULT NULL,
 LAST_CHECK	 INT DEFAULT NULL,
 TYPE		 VARCHAR(6) NOT NULL,
 NOTIFIED_SERIAL INT DEFAULT NULL,
 ACCOUNT	 VARCHAR(40) DEFAULT NULL,
 primary key (ID)
)tablespace POWERDNS;

create index DOMAINS$NAME on Domains (NAME) tablespace POWERDNS;
create sequence DOMAINS_ID_SEQUENCE;

create table Records
(
  ID                number(11) NOT NULL,
  ZoneID            number(11) default NULL REFERENCES Domains(ID) ON DELETE CASCADE,
  NAME              varchar2(255) default NULL,
  TYPE              varchar2(6) default NULL,  
  CONTENT           varchar2(255) default NULL,
  TimeToLive        number(11) default NULL,   
  Priority          number(11) default NULL,
  CreateDate        number(11) default NULL,
  ChangeDate        number(11) default NULL,
  primary key (ID)
)tablespace POWERDNS;

create index RECORDS$NAME on RECORDS (NAME) tablespace POWERDNS;
create sequence RECORDS_ID_SEQUENCE;
	  </screen>
	</para>
	<para>
	  To insert records, either use <command>zone2sql</command> with the <command>--oracle</command> setting, or execute sql
	  along the lines of:
	  <screen>
insert into domains (id,name,type) values (domains_id_sequence.nextval,'netherlabs.nl','NATIVE');
insert into Records (id,ZoneId, name,type,content,TimeToLive,Priority) select RECORDS_ID_SEQUENCE.nextval,id ,'netherlabs.nl', 'SOA', 'ahu.casema.net. hostmaster.ds9a.nl. 2000081401 28800 7200 604800 86400', 3600, 0 from Domains where name='netherlabs.nl';
insert into Records (id,ZoneId, name,type,content,TimeToLive,Priority) select RECORDS_ID_SEQUENCE.nextval,id ,'netherlabs.nl', 'NS', 'ahu.casema.net', 3600, 0 from Domains where name='netherlabs.nl';
insert into Records (id,ZoneId, name,type,content,TimeToLive,Priority) select RECORDS_ID_SEQUENCE.nextval,id ,'netherlabs.nl', 'NS', 'ns1.pine.nl', 3600, 0 from Domains where name='netherlabs.nl';
insert into Records (id,ZoneId, name,type,content,TimeToLive,Priority) select RECORDS_ID_SEQUENCE.nextval,id ,'netherlabs.nl', 'NS', 'ns2.pine.nl', 3600, 0 from Domains where name='netherlabs.nl';
insert into Records (id,ZoneId, name,type,content,TimeToLive,Priority) select RECORDS_ID_SEQUENCE.nextval,id ,'netherlabs.nl', 'A', '213.244.168.210', 3600, 0 from Domains where name='netherlabs.nl';
insert into Records (id,ZoneId, name,type,content,TimeToLive,Priority) select RECORDS_ID_SEQUENCE.nextval,id ,'netherlabs.nl', 'MX', 'outpost.ds9a.nl', 3600, 10 from Domains where name='netherlabs.nl';

	  </screen>
	</para>
	<para>
	  For performance reasons it is best to specify <command>--transactions</command> too!
	</para>
      </sect2>
    </sect1>

    <sect1 id="db2"><Title>DB2 backend</title>
      <para>
	<table>
	  <title>DB2 backend capabilities</title>
	  <tgroup cols=2>
	    <tbody>
	      <row><entry>Native</entry><entry>Yes</entry></row>
	      <row><entry>Master</entry><entry>No</entry></row>
	      <row><entry>Slave</entry><entry>No</entry></row>
	      <row><entry>Superslave</entry><entry>No</entry></row>
	      <row><entry>Autoserial</entry><entry>Yes</entry></row>
	    </tbody>
	  </tgroup>
	</table>
      </para>
      <para>
	PowerDNS is currently ascertaining if this backend can be distributed in binary form without violating IBM DB2 licensing. If you have a DB2 license, 
	please contact pdns@powerdns.com so we can ship you a copy of this driver.
      </para>
      <para>
	The DB2 backend executes the following queries:
	<variablelist>
	  <varlistentry>
	    <term>Forward Query</term>
	    <listitem>
	      <para>
		select Content, TimeToLive, Priority, Type, ZoneId, 0 as ChangeDate, Name from Records where Name = ? and type = ?
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Forward By Zone Query</term>
	    <listitem>
	      <para>
		select Content, TimeToLive, Priority, Type, ZoneId, 0 as ChangeDate, Name from Records where Name = ? and Type = ? and ZoneId = ?
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Forward Any Query</term>
	    <listitem>
	      <para>
		select Content, TimeToLive, Priority, Type, ZoneId, 0 as ChangeDate, Name from Records where Name = ?
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>List Query</term>
	    <listitem>
	      <para>
		select Content, TimeToLive, Priority, Type, ZoneId, 0 as ChangeDate, Name from Records where ZoneId = ?
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
      <para>
	Configuration settings:
	<variablelist>
	  <varlistentry>
	    <term>db2-server</term>
	    <listitem>
	      <para>
		Server name to connect to. Defaults to 'powerdns'. Make sure that your nameserver is not needed to resolve an IP address needed to connect as
		this might lead to a chicken/egg situation. 
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>db2-user</term>
	    <listitem>
	      <para>
		Username to connect as. Defaults to 'powerdns'.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>db2-password</term>
	    <listitem>
	      <para>
		Password to connect with. Defaults to 'powerdns'.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
    </sect1>
    
    <sect1 id="bindbackend"><Title>Bind zone file backend</title>
      <para>
	<table>
	  <title>Bind zone file backend capabilities</title>
	  <tgroup cols=2>
	    <tbody>
	      <row><entry>Native</entry><entry>Yes</entry></row>
	      <row><entry>Master</entry><entry>No</entry></row>
	      <row><entry>Slave</entry><entry>Experimental</entry></row>
	      <row><entry>Superslave</entry><entry>No</entry></row>
	      <row><entry>Autoserial</entry><entry>No</entry></row>
	    </tbody>
	  </tgroup>
	</table>
      </para>
      <para>
	The BindBackend started life as a demonstration of the versatility of PDNS but quickly gained in importance when there appeared to be demand
	for a Bind 'workalike'.
      </para>
      <para>
	The BindBackend parses a Bind-style named.conf and extracts information about zones from it. It makes no attempt to honour other configuration flags,
	which you should configure (when available) using the PDNS native configuration.
      </para>
      <para>
	<variablelist>
	  <varlistentry>
	    <term>--help=bind</term>
	    <listitem>
	      <para>
                Outputs all known parameters related to the bindbackend
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>bind-example-zones</term>
	    <listitem>
	      <para>
		Loads the 'example.com' zone which can be queried to determine if PowerDNS is functioning without configuring 
		database backends.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>bind-config=</term>
	    <listitem>
	      <para>
		Location of the Bind configuration file to parse.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>bind-check-interval=</term>
	    <listitem>
	      <para>
		How often to check for zone changes. See 'Operation' section.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>bind-enable-huffman</term>
	    <listitem>
	      <para>
		Enable Huffman compression on zone data. Currently saves around 20% of memory actually used, but slows down operation
		somewhat.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
      <sect2>
	<title>Operation</title>
	<para>
	  On launch, the BindBackend first parses the named.conf to determine which zones need to be loaded. These will then be parsed
	  and made available for serving, as they are parsed. So a named.conf with 100.000 zones may take 20 seconds to load, but after 10 seconds, 
	  50.000 zones will already be available. While a domain is being loaded, it is not yet available, to prevent incomplete answers.
	</para>
	<para>
	  Reloading is currently done only when a request for a zone comes in, and then only after <command>bind-check-interval</command> seconds have passed
	  after the last check. If a change occurred, access to the zone is disabled, the file is reloaded, access is restored, and the question is answered.
	  For regular zones, reloading is fast enough to answer the question which lead to the reload within the DNS timeout.
	</para>
        <para>
          If <command>bind-check-interval</command> is specified as zero, no checks will be performed.
        </para>
      <sect2><title>Performance</title>
	<para>
	  The BindBackend does not benefit from the packet cache as it is fast enough on its own. Furthermore, on most systems, there will
	  be no benefit in using multiple CPUs for the packetcache, so a noticeable speedup can be attained by specifying 
	  <command>distributor-threads=1</command> in <filename>pdns.conf</filename>.
	</para>
      </sect2>
      <sect2><title>Master/slave configuration</title>
	<para>
	  Currently disabled in prereleases. But see <xref linkend="slave">.
	</para>
      </sect2>
    </sect1>

  <sect1 id="odbc">
    <Title>ODBC backend</Title>
      <para>
	<table>
	  <title>ODBC backend capabilities</title>
	  <tgroup cols=2>
	    <tbody>
	      <row><entry>Native</entry><entry>Yes</entry></row>
	      <row><entry>Master</entry><entry>Yes (experimental)</entry></row>
	      <row><entry>Slave</entry><entry>Yes (experimental)</entry></row>
	      <row><entry>Superslave</entry><entry>No</entry></row>
	      <row><entry>Autoserial</entry><entry>Yes</entry></row>
	    </tbody>
	  </tgroup>
	</table>
      </para>
    <para>
      The ODBC backend can retrieve zone information from any source that has a ODBC driver available.
      <note><para>This backend is only available on PowerDNS for Windows.</para></note>
    </para>

    <para>
	The ODBC backend needs data in a fixed schema which is the same as the data needed by the MySQL backend. The create statement
	will resemble this:
        <screen>
          CREATE TABLE records (
	  id int(11) NOT NULL auto_increment,
	  domain_id int(11) default NULL,
	  name varchar(255) default NULL,
	  type varchar(6) default NULL,
	  content varchar(255) default NULL,
	  ttl int(11) default NULL,
	  prio int(11) default NULL,
	  change_date int(11) default NULL,
	  PRIMARY KEY (id),
	  KEY name_index(name),
	  KEY nametype_index(name,type),
	  KEY domainid_index(domain_id)
	  );
        </screen>
    </para>

    <para>
      To use the ODBC backend an ODBC source has to be created, to do this see the section Installing PowerDNS on Microsoft Windows, <xref linkend="windows">.
    </para>

    <para>
	The following configuration settings are available:

      <variablelist>
	  <varlistentry>
	  <term>odbc-datasource</term>
	  <listitem>
	      <para>
          Specifies the name of the data source to use. 
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	  <term>odbc-user</term>
	  <listitem>
	      <para>
          Specifies the username that has to be used to log into the datasource.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	  <term>odbc-pass</term>
	  <listitem>
	      <para>
          Specifies the user's password.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	  <term>odbc-table</term>
	  <listitem>
	      <para>
          Specifies the name of the table containing the zone information.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
      <para>
	The ODBC backend has been tested with Microsoft Access, MySQL (via MyODBC) and Microsoft SQLServer. As the SQL statements used are very basic,
	it is expected to work with many ODBC drivers.
      </para>
  </sect1>

</appendix>
<appendix id="pdns-internals"><title>PDNS internals</title>
    <para>
      PDNS is normally launched by the init.d script but is actually a binary called <filename>pdns_server</filename>. This 
      file is started by the <command>start</command> and <command>monitor</command> commands to the init.d script. Other commands
      are implemented using the controlsocket.
    </para>
    <sect1 id="controlsocket"><title>Controlsocket</title>
      <para>
        The controlsocket is the means to contact a running PDNS daemon, or as we now know, a running <filename>pdns_server</filename>.
        Over this sockets, instructions can be sent using the <filename>pdns_control</filename> program. Like the <filename>pdns_server</filename>,
        this program is normally accessed via the init.d script.
      </para>
      <sect2 id="pdnscontrol"><title>pdns_control</title>

	<para>
	  To communicate with PDNS over the controlsocket, the <command>pdns_control</command> command is used. The init.d script also calls 
	  pdns_control. The syntax is simple: <command>pdns_control command arguments</command>. Currently this is most useful for telling backends
	  to rediscover domains or to force the transmission of notifications. See <xref linkend="master">.
	</para>
	<para>
	  Besides the commands implemented by the init.d script, for which see <xref linkend="pdns-on-unix">, the following pdns_control commands
	  are available:
	  <variablelist>
	    <varlistentry>
	      <term>ccounts</term>
	      <listitem>
		<para>
		  Returns counts on the contents of the cache.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>version</term>
	      <listitem>
		<para>
		  returns the version of a running pdns daemon.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>purge</term>
	      <listitem>
		<para>
		  Purges the entire Packet Cache - see <xref linkend="performance">.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>purge <userinput>record</userinput></term>
	      <listitem>
		<para>
		  Purges all entries for this exact record name - see <xref linkend="performance">.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>purge <userinput>record</userinput>$</term>
	      <listitem>
		<para>
		  Purges all entries ending on this name, effectively purging an entire domain - see <xref linkend="performance">.
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>set <userinput>variable value</userinput></term>
	      <listitem>
		<para>
		  Set a configuration parameter. Currently only the 'query-logging' parameter can be set. 
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
      </sect2>
    </sect1>

    <sect1 id="guardian"><title>Guardian</title>
      <para>
        When launched by the init.d script, <filename>pdns_server</filename> wraps itself inside a 'guardian'. This guardian monitors the
        performance of the inner <filename>pdns_server</filename> instance which shows up in the process list of your OS as 
        <filename>pdns_server-instance</filename>. 

        It is also this guardian that <filename>pdns_control</filename> talks to. A <command>STOP</command> is interpreted by the guardian, 
        which causes the guardian to sever the connection to the inner process and terminate it, after which it terminates itself.

        The init.d script <command>DUMP</command> and <command>SHOW</command> commands need to access the inner process, because
        the guardian itself does not run a nameserver. For this purpose, the guardian passes controlsocket requests to the control console of the
        inner process. This is the same console as seen with init.d <command>MONITOR</command>.
      </para></sect1>
    <sect1 id="modules"><title>Modules &amp; Backends</title>
      <para>
	PDNS has the concept of backends and modules. Non-static PDNS distributions have the ability to load new modules at runtime, while the
	static versions come with a number of modules built in, but cannot load more. 
      </para>
      <para>
	Related parameters are:
	<variablelist>
	  <varlistentry>
	    <term>--help</term>
	    <listitem>
	      <para>
                Outputs all known parameters, including those of launched backends, see below.
	      </para>
	    </listitem>
	  </varlistentry>
          <varlistentry>
            <term>--launch=backend,backend1,backend1:name</term>
            <listitem>
              <para>
                Launches backends. In its most simple form, supply all backends that need to be launched. If you find
                that you need to launch single backends multiple times, you can specify a name for later instantiations.
                In this case, there are 2 instances of backend1, and the second one is called 'name'.

                This means that <command>--backend1-setting</command> is available to configure the first or main instance, and
                <command>--backend1-name-setting</command> for the second one.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>--load-modules=/directory/libyourbackend.so</term>
            <listitem>
              <para>
                If backends are available in nonstandard directories, specify their location here. Multiple files
                can be loaded if separated by commas. Only available in non-static PDNS distributions.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>--list-modules</term>
            <listitem>
              <para>
                Will list all available modules, both compiled in and in dynamically loadable modules.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
	To run on the commandline, use the <command>pdns_server</command> binary. For example, to see options for the gpgsql backend, 
	use the following:
	<screen>
	  $ /usr/sbin/pdns_server --launch=gpgsql --help=gpgsql
	</screen>
      </para>
    </sect1>
    <sect1 id="dns-to-query"><title>How PDNS translates DNS queries into backend queries</title>
      <para>
	A DNS query is not a straightforward lookup. Many DNS queries need to check the backend for additional data, for example to
	determine of an unfound record should lead to an NXDOMAIN ('we know about this domain, but that record does not exist') or an 
	unauthoritative response.
      </para>
      <para>
	Simplified, without CNAME processing and wildcards, the algorithm is like this:
      </para>
      <para>
	When a query for a <command>qname</command>/<command>qtype</command> tuple comes in, it is requested directly from the backend. 
	If present, PDNS adds the contents of the reply to the list of records to return. A question tuple may generate multiple answer 
	records.
      </para>
      <para>
	Each of these records is now investigated to see if it needs 'additional processing'. This holds for example for MX records which may
	point to hosts for which the PDNS backends also contain data. This involves further lookups for A or AAAA records.
      </para>
      <para>
	After all additional processing has been performed, PDNS sieves out all double records which may well have appeared. The resulting set of 
	records is added to the answer packet, and sent out.
      </para>
      <para>
	A zone transfer works by looking up the <command>domain_id</command> of the SOA record of the name and then listing all records of that 
	<command>domain_id</command>. This is why all records in a domain need to have the same domain_id.
      </para>
      <para>
	When a query comes in for an unknown domain, PDNS starts looking for SOA records of all subdomains of the qname, so 
	no.such.powerdns.com turns into a SOA query for no.such.powerdns.com, such.powerdns.com, powerdns.com, com, ''. When a SOA is found,
	that zone is consulted for relevant NS instructions which lead to a referral. If nothing is found within the zone, an authoritative 
	NXDOMAIN is sent out.
      </para>
      <para>
	If no SOA was found, an unauthoritative no-error is returned.
      </para>
      <para>
	In reality, each query for a question tuple first involves checking for a CNAME, unless that resolution has been disabled with the
	<command>skip-cname</command> option.
      </para>
      <para>
	PDNS breaks strict RFC compatability by not always checking for the presence of a SOA record first. This is unlikely to lead to 
	problems though.
      </para>
  </appendix>
  <appendix id="backend-writers-guide"><title>Backend writers' guide</title>
    <para>
      PDNS backends are implemented via a simple yet powerful C++ interface. If your needs are not met by the PipeBackend, you 
      may want to write your own. Doing so requires a copy of the PowerDNS Open Source Backend Development kit which can be found on <ulink 
	url="http://downloads.powerdns.com/releases/dev">http://downloads.powerdns.com/releases/dev</ulink>.
    </para>
    <para>
      A backend contains zero DNS logic. It need not look for CNAMES, it need not return NS records unless explicitly asked for, etcetera.
      All DNS logic is contained within PDNS itself - backends should simply return records matching the description asked for. 
    </para>
    <para> 
      <warning><para>
      However, please note that your backend can get queries in aNy CAsE! If your database is case sensitive, like most are (with the notable
      exception of MySQL), you must make sure that you do find answers which differ only in case.
	</para></warning>
    </para>
    <sect1 id="simple-backends"><title>Simple read-only native backends</title>
      <para>
	Implementing a backend consists of inheriting from the DNSBackend class. For read-only backends, which do not support slave operation,
	only the following methods are relevant:
	
	<programlisting>
	class DNSBackend
	{
	public:

	virtual bool lookup(const QType &amp;qtype, const string &amp;qdomain, DNSPacket *pkt_p=0, int zoneId=-1)=0; 
	virtual bool list(int domain_id)=0; 
	virtual bool get(DNSResourceRecord &amp;r)=0;
	virtual bool getSOA(const string &amp;name, SOAData &amp;soadata);
	};
	</programlisting>
      
	Note that the first three methods must be implemented. <function>getSOA()</function> has a useful default implementation.
      </para>
      <para>
	The semantics are simple. Each instance of your class only handles one (1) query at a time. There is no need for locking as PDNS guarantees
	that your backend will never be called reentrantly. 
      </para>
      <para>
	Some examples, a more formal specification is down below. A normal lookup starts like this:
	
	<programlisting>
        YourBackend yb;
	yb.lookup(QType::CNAME,"www.powerdns.com");
	</programlisting>
      
	Your class should now do everything to start this query. Perform as much preparation as possible - handling errors at this stage is better for PDNS 
	than doing so later on. A real error should be reported by throwing an exception. 
      </para>
      <para>
	PDNS will then call the <function>get()</function> method to get <command>DNSResourceRecord</command>s back. The following code illustrates
	a typical query:
	
      <programlisting>
	yb.lookup(QType::CNAME,"www.powerdns.com");

	DNSResourceRecord rr;
	while(yb.get(rr))
   	  cout&lt;&lt;"Found cname pointing to '"+rr.content+"'"&lt;&lt;endl;
	}
	</programlisting>
      </para>
      <para>
	Each zone starts with a Start of Authority (SOA) record. This record is special so many backends will choose to implement it
	specially. The default <function>getSOA()</function> method performs a regular lookup on your backend to figure out the SOA, 
	so if you have no special treatment for SOA records, where is no need to implement your own <function>getSOA()</function>.
      </para>
      <para>
	Besides direct queries, PDNS also needs to be able to list a zone, to do zone transfers for example. Each zone has an id which should be
	unique within the backend. To list all records belonging to a zone id, the <function>list()</function> method is used. Conveniently,
	the domain_id is also available in the <command>SOAData</command> structure.
      </para>
      <para>
	The following lists the contents of a zone called "powerdns.com".
      
	<programlisting>
	SOAData sd;
	if(!yb.getSOA("powerdns.com",sd))  // are we authoritative over powerdns.com?
	  return RCode::NotAuth;           // no

	yb.list(sd.domain_id); 
	while(yb.get(rr))
   	  cout&lt;&lt;rr.qname&lt;&lt;"\t IN "&lt;&lt;rr.qtype.getName()&lt;&lt;"\t"&lt;&lt;rr.content&lt;&lt;endl;
	</programlisting>
      </para>
      <para>
	Please note that when so called 'fancy records' (see <xref linkend="fancy-records">) are enabled, a backend can receive
	wildcard lookups. These have a % as the first character of the qdomain in lookup. 
      </para>
      <sect2><title>A sample minimal backend</title>
	<para>
	  This backend only knows about the host "random.powerdns.com", and furthermore, only about its A record:
	  
	  <programlisting>
/* FIRST PART */
class RandomBackend : public DNSBackend
{
public:
  bool list(int id) {
    return false; // we don't support AXFR
  }
    
  void lookup(const QType &amp;type, const string &amp;qdomain, DNSPacket *p, int zoneId)
  {
    if(type.getCode()!=QType::A || qdomain!="random.powerdns.com")  // we only know about random.powerdns.com A
      d_answer="";                                                  // no answer
    else {
      ostringstream os;
      os&lt;&lt;random()%256&lt;&lt;"."&lt;&lt;random()%256&lt;&lt;"."&lt;&lt;random()%256&lt;&lt;"."&lt;&lt;random()%256;
      d_answer=os.str();                                           // our random ip address
    }
  }

  bool get(DNSResourceRecord &amp;rr)
  {
    if(!d_answer.empty()) {
      rr.qname="random.powerdns.com";                               // fill in details
      rr.qtype=QType::A;                                            // A record
      rr.ttl=86400;                                                 // 1 day
      rr.content=d_answer;

      d_answer="";                                                  // this was the last answer
      
      return true;
    }
    return false;                                                   // no more data
  }
  
private:
  string d_answer;
};

/* SECOND PART */

class RandomFactory : public BackendFactory
{
public:
  RandomFactory() : BackendFactory("random") {}

  DNSBackend *make(const string &amp;suffix)
  {
    return new RandomBackend();
  }
};

/* THIRD PART */

class RandomLoader
{
public:
  Loader()
  {
    BackendMakers().report(new RandomFactory);
    
    L&lt;&lt;Logger::Info&lt;&lt;" [RandomBackend] This is the randombackend ("__DATE__", "__TIME__") reporting"&lt;&lt;endl;
  }  
};

static RandomLoader randomloader;
	</programlisting>	  
        This simple backend can be used as an 'overlay'. In other words, it only knows about a single record, another loaded backend would have
        to know about the SOA and NS records and such. But nothing prevents us from loading it without another backend.
      </para>
      <para>
        The first part of the code contains the actual logic and should be pretty straightforward. The second part is a boilerplate
        'factory' class which PDNS calls to create randombackend instances. Note that a 'suffix' parameter is passed. Real life backends
        also declare parameters for the configuration file; these get the 'suffix' appended to them. Note that the "random" in the 
        constructor denotes the name by which the backend will be known.
      </para>
      <para>
        The third part registers the RandomFactory with PDNS. This is a simple C++ trick which makes sure that this function
        is called on execution of the binary or when loading the dynamic module.
      </para>
	<para>
	  Please note that a RandomBackend is actually in most PDNS releases. By default it lives on random.example.com, but you can change
	  that by setting <command>random-hostname</command>.
	</para>
	<para>
	  NOTE: this simple backend neglects to handle case properly! For a more complete example, see the full pdns-dev distribution as found on
	  <ulink url="http://www.powerdns.com/pdns">the website</ulink>.
	</para>
    </sect2>
    <sect2><title>Interface definition</title>
      <para>
	Classes:
	<table>
	  <title>DNSResourceRecord class</title>
	  <tgroup cols=2>
	    <tbody>
	      <row>
		<entry>QType qtype</entry><entry>QType of this record</entry>
	      </row>
	      <row>
		<entry>string qname</entry><entry>name of this record</entry>
	      </row>
	      <row>
		<entry>string content</entry><entry>ASCII representation of right hand side</entry>
	      </row>
	      <row>
		<entry>u_int16_t priority</entry><entry>priority of an MX record.</entry>
	      </row>
	      <row>
		<entry>u_int32_t ttl</entry><entry>Time To Live of this record</entry>
	      </row>
	      <row>
		<entry>int domain_id</entry><entry>ID of the domain this record belongs to</entry>
	      </row>
	      <row>
		<entry>time_t last_modified</entry><entry>If unzero, last time_t this record was changed</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
      </para>
      <para>
	<table>
	  <title>SOAData struct</title>
	  <tgroup cols=2>
	    <tbody>
	      <row>
		<entry>string nameserver</entry><entry>Name of the master nameserver of this zone</entry>
	      </row>
	      <row>
		<entry>string hostmaster</entry><entry>Hostmaster of this domain. May contain an @</entry>
	      </row>
	      <row>
		<entry>u_int32_t serial</entry><entry>Serial number of this zone</entry>
	      </row>
	      <row>
		<entry>u_int32_t refresh</entry><entry>How often this zone should be refreshed</entry>
	      </row>
	      <row>
		<entry>u_int32_t retry</entry><entry>How often a failed zone pull should be retried.</entry>
	      </row>
	      <row>
		<entry>u_int32_t expire</entry><entry>If zone pulls failed for this long, retire records</entry>
	      </row>
	      <row>
		<entry>u_int32_t default_ttl</entry><entry>Difficult</entry>
	      </row>
	      <row>
		<entry>int domain_id</entry><entry>The ID of the domain within this backend. Must be filled!</entry>
	      </row>
	      <row>
		<entry>DNSBackend *db</entry><entry>Pointer to the backend that feels authoritative for a domain and can act as a slave</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
      </para>
      <para>
	Methods:
	<variablelist>
	  <varlistentry>
	    <term>void lookup(const QType &amp;qtype, const string &amp;qdomain, DNSPacket *pkt=0, int zoneId=-1)</term>
	    <listitem>
	      <para>
		This function is used to initiate a straight lookup for a record of name 'qdomain' and type 'qtype'.
		A QType can be converted into an integer by invoking its <function>getCode()</function> method and into
		a string with the <function>getCode()</function>.
	      </para>
	      <para>
		  The original question may or may not be passed in the pointer p. If it is, you can retrieve (from 1.99.11 onwards) 
		  information about who asked the question with the <function>getRemote(DNSPacket *)</function> method. Alternatively, 
		  <function>bool getRemote(struct sockaddr *sa, socklen_t *len)</function> is available.
		</para>
		<para>
		  Note that <command>qdomain</command> can be of any case and that your backend should make sure it is in effect case 
		  insensitive. Furthermore, the case of the original question should be retained in answers returned by <function>get()</function>!
		</para>
	      <para>
		Finally, the domain_id might also be passed indicating that only answers from the indicated zone need apply. This
		can both be used as a restriction or as a possible speedup, hinting your backend where the answer might be found.
	      </para>
	      <para>
		If initiated succesfully, as indicated by returning <command>true</command>, answers should be made available over the
		<function>get()</function> method.
		</para>
		<para>
		  Should throw an AhuException if an error occured accessing the database. Returning otherwise indicates that the query 
		  was started succesfully. If it is known that no data is available, no exception should be thrown! An exception indicates
		  that the backend considers itself broken - not that no answers are available for a question.
		</para>
		<para>
		  It is legal to return here, and have the first call to <function>get()</function> return false. This is interpreted as 'no data'
		</para>
	      </listitem>
	    </varlistentry>
	  
	  <varlistentry>
	    <term>bool list(int domain_id)
	    <listitem>
	      <para>
		Initiates a list of the indicated domain. Records should then be made available via the <function>get()</function> method. 
		Need not include the SOA record. If it is, PDNS will not get confused.
	      </para>
	      <para>
		Should return false if the backend does not consider itself authoritative for this zone.
		Should throw an AhuException if an error occured accessing the database. Returning true indicates that data is or should be available.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>bool get(DNSResourceRecord &amp;rr)</term>
	    <listitem>
	      <para>
		Request a DNSResourceRecord from a query started by <function>get()</function> of <function>list()</function>. If this functions returns 
		<command>true</command>, <command>rr</command> has been filled with data. When it returns false, no more data is available, 
		and <command>rr</command> does not contain new data. A backend should make sure that it either fills out all fields of the 
		DNSResourceRecord or resets them to their default values.
	      </para>
		<para>
		  The qname field of the DNSResourceRecord should be filled out with the exact <function>qdomain</function> passed to lookup, preserving
		  its case. So if a query for 'CaSe.yourdomain.com' comes in and your database contains dat afor 'case.yourdomain.com', the qname field of rr
		  should contin 'CaSe.yourdomain.com'!
		</para>
	      <para>
		Should throw an AhuException in case a database error occurred.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>bool getSOA(const string &amp;name, SOAData &amp;soadata)</term>
	    <listitem>
	      <para>
		If the backend considers itself authoritative over domain <function>name</function>, this method should fill out
		the passed <command>SOAData</command> structure and return a positive number. If the backend is functioning correctly, but
		does not consider itself authoritative, it should return 0. In case of errors, an AhuException should be thrown.
	      </para>
	    </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
      </sect2>
    </sect1>
    <sect1 id="backend-error-reporting"><title>Reporting errors</title>
	<para>
	  To report errors, the Logger class is available which works mostly like an iostream. Example usage is as shown above in the RandomBackend.
	  Note that it is very important that each line is ended with <command>endl</command> as your message won't be visible otherwise.
	</para>
	<para>
	  To indicate the importance of an error, the standard syslog errorlevels are available. They can be set by outputting 
	  <function>Logger::Critical</function>,
	  <function>Logger::Error</function>,
	  <function>Logger::Warning</function>,
	  <function>Logger::Notice</function>,
	  <function>Logger::Info</function> or
	  <function>Logger::Debug</function> to <function>L</function>, in descending order of graveness.
	</para>
      </sect1>
      <sect1 id="backend-configuration-details"><title>Declaring and reading configuration details</title>
	<para>
	  It is highly likely that a backend needs configuration details. On launch, these parameters need to be declared with PDNS so it knows it
	  should accept them in the configuration file and on the commandline. Furthermore, they will be listed in the output of 
	  <command>--help</command>.
	</para>
	<para>
	  Declaring arguments is done by implementing the member function <function>declareArguments()</function> in the factory class of your
	  backend. PDNS will call this method after launching the backend.
	</para>
	<para>
	  In the <function>declareArguments()</function> method, the function <function>declare()</function> is available. The exact definitions:
	  <variablelist>
	    <varlistentry>
	      <term>void declareArguments(const string &amp;suffix="")</term>
	      <listitem>
		<para>
		  This method is called to allow a backend to register configurable parameters. The suffix is the sub-name of this module. There is
		  no need to touch this suffix, just pass it on to the declare method.
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry>
	      <term>void declare(const string &amp;suffix, const string &amp;param, const string &amp;explanation, const string &amp;value)</term>
	      <listitem>
		<para>The suffix is passed to your method, and can be passed on to declare. <command>param</command> is the name of your parameter.
		  <command>explanation</command> is what will appear in the output of --help. Furthermore, a default value can be supplied in the 
		  <command>value</command> parameter.
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
	<para>
	  A sample implementation:
	  <programlisting>
	    void declareArguments(const string &amp;suffix)
	    {
 	      declare(suffix,"dbname","Pdns backend database name to connect to","powerdns");
	      declare(suffix,"user","Pdns backend user to connect as","powerdns");
	      declare(suffix,"host","Pdns backend host to connect to","");
	      declare(suffix,"password","Pdns backend password to connect with","");
	    }
	  </programlisting>
	</para>
	<para>
	  After the arguments have been declared, they can be accessed from your backend using the <function>mustDo()</function>,
	  <function>getArg()</function> and <function>getArgAsNum()</function> methods. The are defined as follows in the DNSBackend class:
	</para>
	<para>
	  <variablelist>
	    <varlistentry>
	      <term>void setArgPrefix(const string &amp;prefix)</term>
	      <listitem>
		<para>
		  Must be called before any of the other accessing functions are used. Typical usage is '<function>setArgPrefix("mybackend"+suffix)</function>'
		  in the constructor of a backend.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>bool mustDo(const string &amp;key)</term>
	      <listitem>
		<para>
		  Returns true if the variable <function>key</function> is set to anything but 'no'.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>const string&amp; getArg(const string &amp;key)</term>
	      <listitem>
		<para>
		  Returns the exact value of a parameter.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>int getArgAsNum(const string &amp;key)</term>
	      <listitem>
		<para>
		  Returns the numerical value of a parameter. Uses <function>atoi()</function> internally
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>
	<para>
	  Sample usage from the BindBackend, using the <command>bind-example-zones</command> and <command>bind-config</command>
	  parameters.
	  <programlisting>
  if(mustDo("example-zones")) {
    insert(0,"www.example.com","A","1.2.3.4");
    /* ... */
  }
  

  if(!getArg("config").empty()) {
    BindParser BP;
    
    BP.parse(getArg("config"));
  }

	  </programlisting>
	</para>
      </sect1>

    <sect1 id="rw-backends"><title>Read/write slave-capable backends</title>
      <para>
	The backends above are 'natively capable' in that they contain all data relevant for a domain and do not pull in data from other nameservers.
	To enable storage of information, a backend must be able to do more.
      </para>
      <para>
	Before diving into the details of the implementation some theory is in order. Slave domains are pulled from the master. PDNS needs to 
	know for which domains it is to be a slave, and for each slave domain, what the IP address of the master is.
      </para>
      <para>
	A slave zone is pulled from a master, after which it is 'fresh', but this is only temporary. In the SOA record of a zone there is a field
	which specifies the 'refresh' interval. After that interval has elapsed, the slave nameserver needs to check at the master ff the serial
	number there is higher than what is stored in the backend locally.
      </para>
      <para>
	If this is the case, PDNS dubs the domain 'stale', and schedules a transfer of data from the remote. This transfer remains scheduled
	until the serial numbers remote and locally are identical again.
      </para>
      <para>
	This theory is implemented by the <function>getUnfreshSlaveInfos</function> method, which is called on all backends periodically. 
	This method fills a vector of <command>SlaveDomain</command>s with domains that are unfresh and possibly stale. 
      </para>
      <para>
	PDNS then retrieves the SOA of those domains remotely and locally and creates a list of stale domains. For each of these domains, PDNS
	starts a zonetransfer to resynchronise. Because zone transfers can fail, it is important that the interface to the backend allows
	for transaction semantics because a zone might otherwise be left in a halfway updated situation.
      </para>
      <para>
	The following excerpt from the DNSBackend shows the relevant functions:
      </para>
      <para>
	<programlisting>
	  class DNSBackend {
	  public:
           /* ... */
           virtual bool getDomainInfo(const string &amp;domain, DomainInfo &amp;di);
	   virtual bool isMaster(const string &amp;name, const string &amp;ip);
	   virtual bool startTransaction(const string &amp;qname, int id);
	   virtual bool commitTransaction();
	   virtual bool abortTransaction();
	   virtual bool feedRecord(const DNSResourceRecord &amp;rr);
	   virtual void getUnfreshSlaveInfos(vector&lt;DomainInfo&gt;* domains);
	   virtual void setFresh(int id);
           /* ... */
	 }
	</programlisting>
      </para>
      <para>
        The mentioned DomainInfo struct looks like this:
	<table>
	  <title>DomainInfo struct</title>
	  <tgroup cols=2>
	    <tbody>
	      <row>
		<entry>int id</entry><entry>ID of this zone within this backend</entry>
	      </row>
	      <row>
		<entry>string master</entry><entry>IP address of the master of this domain, if any</entry>
	      </row>
	      <row>
		<entry>u_int32_t serial</entry><entry>Serial number of this zone</entry>
	      </row>
	      <row>
		<entry>u_int32_t notified_serial</entry><entry>Last serial number of this zone that slaves have seen</entry>
	      </row>
	      <row>
		<entry>time_t last_check</entry><entry>Last time this zone was checked over at the master for changes</entry>
	      </row>
	      <row>
		<entry>enum {Master,Slave,Native} kind</entry><entry>Type of zone</entry>
	      </row>
	      <row>
		<entry>DNSBackend *backend</entry><entry>Pointer to the backend that feels authoritative for a domain and can act as a slave</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
      </para>
      <para>
	These functions all have a default implementation that returns false - which explains that these methods can be omitted in simple backends. 
	Furthermore, unlike with simple backends, a slave capable backend must make sure that the 'DNSBackend *db' field of the SOAData record is filled 
	out correctly - it is used to determine which backend will house this zone. 
	<variablelist>
	  <varlistentry>
	    <term>bool isMaster(const string &amp;name, const string &amp;ip);</term>
	    <listitem>
	      <para>
		If a backend considers itself a slave for the domain <command>name</command> and if the IP address in <command>ip</command>
		is indeed a master, it should return true. False otherwise. This is a first line of checks to guard against reloading a domain
		unnecessarily.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>void getUnfreshSlaveInfos(vector&lt;DomainInfo&gt;* domains)</term>
	    <listitem>
	      <para>
		When called, the backend should examine its list of slave domains and add any unfresh ones to the domains vector.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>bool getDomainInfo(const string &amp;name, DomainInfo &amp; di)</term>
	    <listitem>
	      <para>
                This is like getUnfreshSlaveInfos, but for a specific domain. If the backend considers itself authoritative for the named
                zone, <function>di</function> should be filled out, and 'true' be returned. Otherwise return false.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>bool startTransaction(const string &amp;qname, int id)</term>
	    <listitem>
	      <para>
		When called, the backend should start a transaction that can be committed or rolled back atomically later on. 
		In SQL terms, this function should <command>BEGIN</command> a transaction and <command>DELETE</command> all
		records.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>bool feedRecord(const DNSResourceRecord &amp;rr)</term>
	    <listitem>
	      <para>
		Insert this record.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>bool commitTransaction();</term>
	    <listitem>
	      <para>
		Make the changes effective. In SQL terms, execute <command>COMMIT</command>.
	      </para>
	    </listitem>
	  </varlistentry>
	      
	  <varlistentry>
	    <term>bool abortTransaction();</term>
	    <listitem>
	      <para>
		Abort changes. In SQL terms, execute <command>ABORT</command>.
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>bool setFresh()</term>
	    <listitem>
	      <para>
		Indicate that a domain has either been updated or refreshed without the need for a retransfer. This causes
		the domain to vanish from the vector modified by <function>getUnfreshSlaveInfos()</function>.
	      </para>
	    </listitem>
	  </varlistentry>

	</variablelist>
      </para>
      <para>
	PDNS will always call <function>startTransaction()</function> before making calls to <function>feedRecord()</function>.
	Although it is likely that <function>abortTransaction()</function> will be called in case of problems, backends should also
	be prepared to abort from their destructor.
      </para>
      <para>
	The actual code in PDNS is currently (1.99.9):
	<programlisting>
    Resolver resolver;
    resolver.axfr(remote,domain.c_str());

    db->startTransaction(domain, domain_id);
    
    L&lt;&lt;Logger::Error&lt;&lt;"AXFR started for '"&lt;&lt;domain&lt;&lt;"'"&lt;&lt;endl;
    Resolver::res_t recs;
    
    while(resolver.axfrChunk(recs)) {
      for(Resolver::res_t::const_iterator i=recs.begin();i!=recs.end();++i) {
	db->feedRecord(*i);
      }
    }
    db->commitTransaction();
    db->setFresh(domain_id);
    L&lt;&lt;Logger::Error&lt;&lt;"AXFR done for '"&lt;&lt;domain&lt;&lt;"'"&lt;&lt;endl;
	</programlisting>
      </para>
      <sect2><title>Supermaster/Superslave capability</title>
        <para>
          A backend that wants to act as a 'superslave' for a master should implement the following method:
          <programlisting>
            class DNSBackend 
            {
               virtual bool superMasterBackend(const string &amp;ip, const string &amp;domain, const vector&lt;DNSResourceRecord&gt;&amp;nsset, string *account, DNSBackend **db)
            };
          </programlisting>
          This function gets called with the IP address of the potential supermaster, the domain it is sending a notification for and the set of NS records
          for this domain at that IP address. 
        </para>
        <para>
          Using the supplied data, the backend needs to determine if this is a bonafide 'supernotification' which should be honoured. If it decides that it
          should, the supplied pointer to 'account' needs to be filled with the configured name of the supermaster (if accounting is desired), and the 
          db needs to be filled with a pointer to your backend.
        </para>
        <para>
          Supermaster/superslave is a complicated concept, if this is all unclear see <xref linkend="supermaster">.
      </sect2>
    </sect1>
    <sect1 id="master-backends"><title>Read/write master-capable backends</title>
      <para>
        In order to be a useful master for a domain, notifies must be sent out whenever a domain is changed. Periodically, PDNS
        queries backends for domains that may have changed, and sends out notifications for slave nameservers.
      </para>
      <para>
        In order to do so, PDNS calls the <function>getUpdatedMasters()</function> method. Like the <function>getUnfreshSlaveInfos()</function>
        function mentioned above, this should add changed domain names to the vector passed.
      </para>
      <para>
	The following excerpt from the DNSBackend shows the relevant functions:
      </para>
      <para>
	<programlisting>
	  class DNSBackend {
	  public:
           /* ... */
	   virtual void getUpdatedMasters(vector&lt;DomainInfo&gt;* domains);
	   virtual void setNotifed(int id, u_int32_t serial);
           /* ... */
	 }
	</programlisting>
      </para>
      <para>
	These functions all have a default implementation that returns false - which explains that these methods can be omitted in simple backends. 

	Furthermore, unlike with simple backends, a slave capable backend must make sure that the 'DNSBackend *db' field of the SOAData record is filled 
	out correctly - it is used to determine which backend will house this zone. 

	<variablelist>
	  <varlistentry>
	    <term>void getUpdatedMasters(vector&lt;DomainInfo&gt;* domains)</term>
	    <listitem>
	      <para>
		When called, the backend should examine its list of master domains and add any changed ones to the DomainInfo vector
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>bool setNotified(int domain_id, u_int32_t serial)</term>
	    <listitem>
	      <para>
                Indicate that notifications have been queued for this domain and that it need not be considered 'updated' anymore
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
    </sect1>

  </appendix>
  <appendix id="compiling-powerdns"><title>Compiling PowerDNS</title>
    <para>
      For now, see <ulink url="http://www.powerdns.org">the Open Source PowerDNS site</ulink>. 
      <command>./configure --enable-mysql ; make ; make install</command> will do The Right Thing for most people.
    </para>
    <sect1 id="on-windows"><title>Compiling PowerDNS on Windows</title>
      <para>
	By Michel Stol (<email>michel@powerdns.com</email>).
      <sect2><title>Assumptions</title>
        <para>
	  I will assume these things from you:      
	</para>
	<variablelist>
          <varlistentry>
	    <term>
	      You have the PowerDNS sources.
	    </term>
	    <listitem>        
	      <para>
		There's not much to compile without the source files, eh? :)
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>      
	    <term>
	      You are using Microsoft Visual C++. If you get it to compile using a free compiler, please let us know!
	    </term>
	    <listitem>        
	      <para>
		From the day that we began porting the <acronym>UNIX</acronym> PowerDNS sources to Microsoft Windows
		we used Microsoft Visual C++ as our development environment of choice.            
	      </para>
	      
	      <para>
		We used Visual C++ 6.0 to compile all sources (both standard version and SP5). Other versions
		(including Visual C++ .NET) are untested.
	      </para>
	    </listitem>
	  </varlistentry>
	  
	  <varlistentry>
	    <term>
	      You are using Microsoft Windows NT, 2000 or XP
	    </term>
	    <listitem>        
	      <para>
		I will assume that the system where you want to compile the sources on is running
		Microsoft Windows NT, 2000 or XP. These are the operating systems that where found
		running PowerDNS for Windows.
		
	      </para>          
	      
	      <note>
		<para>
		  You probably can compile the sources on other Windows versions too, but that is currently untested.
		</para>
	      </note>
	    </listitem>
	  </varlistentry>
	  
	  <varlistentry>      
	    <term>
	      You are using an English Windows version.
	    </term>
	    <listitem>        
	      <para>
		Troughout this document I will use the English names for menu items, names etc., so if you are
		running a non-English Windows or <acronym>MSVC</acronym> version you have to translate those things yourself. But 
		I don't think that would be a big problem.
	      </para>          
	    </listitem>
	  </varlistentry>
	  
	</variablelist>
	
      </sect2>
      
      <sect2>
	<title>Prequisites</title>
	
	<para>
	  Although we tried to keep PowerDNS for Windows' dependencies down to a minimum, you will still need some
	  programs and libraries to be able to compile the sources.
	</para>
	
      <sect3>
	<title>pthreads for Windows</title>
	
	<para>
	  The pthreads for Windows library is a Windows implementation of the <acronym>POSIX</acronym> threads
	  specification, which is used a lot in <acronym>UNIX</acronym> programs.
	</para>
	
	<para>
	  PowerDNS uses pthreads too, and to ease the porting process we decided not to reinvent the wheel,
	  but to use pthreads for Windows instead.
	</para>
	
	<sect4>
	  <title>Getting pthreads for Windows</title>
	  
	  <para>
	    Pthreads for Windows is available from anonymous ftp at <ulink url="ftp://sources.redhat.com/pub/pthreads-win32/">ftp://sources.redhat.com/pub/pthreads-win32/</ulink>.
	    You should download the latest <filename>pthreads-YYYY-MM-DD.exe</filename> file.
	  </para>
	  
	  <note>
	    <para>
	      PowerDNS for Windows was tested with the snapshot of 2002-03-02 of the library.
	    </para>
	  </note>
	  
	  <para>
	    For more information you can visit the pthreads for Windows homepage at <ulink url="http://sources.redhat.com/pthreads-win32/">http://sources.redhat.com/pthreads-win32/</ulink>
	  </para>          
	</sect4>
	
	<sect3>
	  <title>Installing pthreads for Windows</title>
	  
	  <para>
	    To install the pthreads for Windows library you have to locate your <filename>pthreads-YYYY-MM-DD.exe</filename> 
	    file and start it.
	  </para>
	  
	  <para>
	    After starting the executable a self-extractor dialog will show up where you can specify where to extract
	    the contents of the file. When you selected a location you can press the <guibutton>Extract</guibutton> button
	    to extract all content to the target directory.
	  </para>
	  
	  <para>
	    The library is now installed, we still have to tell Visual C++ where it's located though, more
	    on that later.
	  </para>        
	</sect3>
	
      </sect2>
      
      <sect2>
	<title>Nullsoft Installer</title>
	
	<para>
	  For our installation program we used Nullsoft's Installer System (<acronym>NSIS</acronym>). We used 
	  <acronym>NSIS</acronym> because it's easy to use, versatile and free (and it uses <acronym><trademark>SuperPiMP</trademark></acronym> technology, but
	  they refuse to tell us what it is ;)). If the name Nullsoft rings a bell, it's because they're the guys who made
	  <ulink url="http://www.winamp.com/">winamp</ulink>.
	</para>
	
	<sect3>
	  <title>Getting the Nullsoft Installer</title>
	  
	  <para>
	    The Nullsoft Installer can be downloaded at their website, which is
	    located at <ulink url="http://www.nullsoft.com/free/nsis/">http://www.nullsoft.com/free/nsis/</ulink>.
	    The file that you should download is called <filename>nsisXXX.exe</filename> (where XXX is the latest version).
	  </para>
	  
	  <note>
	    <para>
	      You can find the <acronym>NSIS</acronym> documentation at that website too.
	    </para>
	  </note>
	</sect3>
	
	<sect3>
	  <title> Installing the Nullsoft Installer</title>
	  
	  <para>
	    Installing <acronym>NSIS</acronym> is easy. All there is to it is locating the installer and execute it.
	    Then just follow the installation steps.
	  </para>
	</sect3>
	
      </sect2>
      
    <sect2>
      <title>Setting up the build-environment</title>
      
      <para>
	Before starting Microsoft Visual C++ and compile PowerDNS for Windows, you first
	have to set up your build environment.
      </para>
      
      <sect3>
	<title>Make Microsoft Visual C++ recognize <filename>*.cc</filename> and <filename>*.hh</filename> (optional)</title>
	
        <para>
          All PowerDNS source files are in the form <filename>name.cc</filename>, and all header files in the form
          <filename>name.hh</filename>. These extensions aren't recognized by <acronym>MSVC</acronym> by default, so
          you might want to change that first.
        </para>
        
        <note>
          <para>
            Only perform this step if you want to be able to edit the <filename>*.cc</filename> 
            and <filename>*.hh</filename> files in <acronym>MSVC</acronym>.
          </para>
        </note>
        
        <caution>
          <para>
            If you decide to perform this step, remember that it requires modification of the Windows registry, 
            always make a backup before modifying!
          </para>
        </caution>
        
        <para>
          Ok, after that word of caution we can now proceed. You have to follow these steps:
        </para>

        <orderedlist>
	  
          <listitem>
            <para>
              Start the registry editor by entering <filename>regedit.exe</filename> in the run prompt
              (<guimenu>Start-&gt;Run...</guimenu>).
            </para>
          </listitem>

          <listitem>
            <para>
              Right click on <filename>HKEY_CLASSES_ROOT</filename> and select <guimenu>New-&gt;Key</guimenu>. 
              A new key will appear, change that key to <quote><filename>.cc</filename></quote>, then change the default
              value to <quote>cppfile</quote>
            </para>

            <para>
              Then perform the same step for <quote><filename>.hh</filename></quote> (use <quote>hfile</quote> instead of <quote>cppfile</quote>).
            </para>
          </listitem>

          <listitem>
            <para>
              Go to <filename>HKEY_CURRENT_USER\Software\Microsoft\DevStudio\6.0\Build System\Components\Platforms\Win32 (x86)\Tools\32-bit C/C++ Compiler for 80x86</filename>. And
              add <quote>;*.cc</quote> to the <filename>Input_Spec</filename> value (so that it becomes <quote>*.c;*.cpp;*.cxx;*.cc</quote>).
            </para>

            <note>
              <para>
                If you happen to use another platform (like alpha) to compile the sources, you have to do the step above for that platform.
              </para>
            </note>
          </listitem>

          <listitem>
            <para>
              Go to <filename>HKEY_CURRENT_USER\Software\Microsoft\DevStudio\6.0\Search</filename>. And
              add <quote>;*.cc;*.hh</quote> to the <filename>FIF_Filter</filename> value (so that it becomes <quote>*.c;*.cpp;*.cxx;*.tli;*.h;*.tlh;*.inl;*.rc;*.cc;*.hh</quote>).
            </para>
          </listitem>

          <listitem>
            <para>
              Finally change <filename>HKEY_CURRENT_USER\Software\Microsoft\DevStudio\6.0\Text Editor\Tabs/Language Settings\C/C++</filename>. And
              add <quote>;cc;hh</quote> to the <filename>FileExtensions</filename> value (so that it becomes <quote>cpp;cxx;c;h;hxx;hpp;inl;tlh;tli;rc;rc2;hh;cc</quote>).
            </para>
          </listitem>
          
          <listitem>
            <para>
              Close the registry editor.
            </para>
          </listitem>
          
        </orderedlist>       
        
        <para>
          Now should <acronym>MSVC</acronym> properly recognize the files as being C++.
        </para>
	
      </sect3>
      
      <sect3>
	<title>Setting Microsoft Visual C++'s directories</title>
	
	<para>
	  <acronym>MSVC</acronym> needs to locate some include files, libraries and executables
	  when it has to build PowerDNS for Windows. We are now going to tell <acronym>MSVC</acronym> where
	  to find those.
	</para>
	
	<para>
	  To enter the directory dialog you have to go to <guimenu>Tools-&gt;Options...-&gt;Directories</guimenu>.
	</para>
	
	<sect4>
	  <title>Setting the pthreads directories</title>
	  
	  <para>
	    When you are in the directory dialog you can add the pthreads for Windows directory.
	  </para>
	  
	  <para>
	    First add the include directory, to do this you have to select <guilabel>Include files</guilabel>
	    from the <guilabel>Show directories for:</guilabel> combobox. Then press the <guibutton>New</guibutton>
	    button and browse to the <emphasis>include</emphasis> directory of pthreads (ie. <filename>C:\pthreads\include</filename>).
	  </para>
	  
	  <para>
	    Then switch to <guilabel>Library files</guilabel> and add the <emphasis>library</emphasis> directory
	    (ie. <filename>C:\pthreads\lib</filename>) using the same method as above.
	  </para>        
	</sect4>
	
	<sect4>
	  <title>Setting the Nullsoft Installer directory</title>
	  
	  <para>
	    While still being in the directory dialog, switch to <guilabel>Executable files</guilabel>
	    and add the Nullsoft Installer directory (ie. <filename>C:\Program Files\NSIS</filename>) to the list.
	  </para>
	</sect4>
	
      
    </sect3>
      </sect2>
    
    <sect2>
      <title>Compilation</title>
      
      <para>
	Finally, after all the reading, installing and configuring we are ready to start compiling
	PowerDNS for Windows.
      </para>
      
      <sect3>
	<title>Starting the compilation</title>  
	
	<para>
	  To start the compilation you first have to open the PowerDNS workspace (<filename>powerdns.dsw</filename>) using explorer or
	  from the <guimenu>File-&gt;Open Workspace...</guimenu> menu in <acronym>MSVC</acronym>.
	</para>
	
	<para>
	  After you opened the workspace you can start compiling. Check all the checkboxes in the
	  <guimenu>Build-&gt;Batch Build...</guimenu> menu and press the <guibutton>Build</guibutton> button.
	</para>
	
	<para>
	  Now cross your fingers and go make some coffee or tea while compiling PowerDNS for Windows. :)
	</para>
	
      </sect3>
      
      <sect3>
	<title>Yay! It compiled</title>
	
	<para>
	  Congratulations, you have now compiled PowerDNS for Windows!
	</para>
	
	<para>
	  All the release builds of the binaries are in the <filename>Release</filename> directory (including the
	  generated installer). The debug builds are in the, guess what, <filename>Debug</filename> directory.
	</para>
	
	<para>
	  Now you can start installing PowerDNS, but that's beyond the scope of this document. See
	  the <ulink url="http://downloads.powerdns.com/documentation/html/">online documentation</ulink> for
	  more information about that.
	</para>
      </sect3>
      
      <sect3>
	<title>What if it went wrong?</title>
	
	<para>
	  If the compilation fails, then try reading this article again, and again to see if you did something wrong.
	</para>
	
	<para>
	  If you are pretty sure that it's a bug, either in the PowerDNS sources, the build
	  system or in this article, then please send an e-mail to <email>pdns-dev@mailman.powerdns.com</email> describing your
	  problem. We will then try to fix it.
	</para>
	
      </sect3>
      
    </sect2>
    
    <sect2>
      <title>Miscellaneous</title>

      <para>
	Some miscellaneous information.
      </para>
      
      <sect3>
	<title>Credits</title>

	<variablelist>
	  <title>Michel Stol would like to thank these people:</title>
	  
	  <varlistentry>
	    <term>
	      Bert Hubert
	    </term>
	    <listitem>
	      <para>
		For writing the wonderfull PowerDNS software and learning me stuff
		that I'd otherwise never had learned.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>
	      PowerDNS B.V.
	    </term>
	    <listitem>
	      <para>
		For being great colleagues.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>
	      The pthreads-win32 crew (see the pthreads-win32 <filename>CONTRIBUTORS</filename> file).
	    </term>
	    <listitem>
	      <para>
		For easing our porting process by writing a great Windows implementation of pthreads.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>
	      The guys over at Nullsoft.
	    </term>
	    <listitem>
	      <para>
		For creating the Nullsoft Installer System (<acronym>NSIS</acronym>), and Winamp, the program we use every
		day to make a lot of noise in the office.
	      </para>
	    </listitem>
	  </varlistentry>
	  
	</variablelist>
	
      </sect3>
      
      <sect3>
	<title>Contact information</title>
	
	<para>
	  If you have a comment, or a bug report concerning either this document or the PowerDNS sources
	  you can contact <email>pdns-dev@mailman.powerdns.com</email>
	</para>
	
	<para>
	  For general information about PowerDNS, the pdns server, express, documentation etc. I advice you to visit
	  <ulink url="http://www.powerdns.com/">http://www.powerdns.com/</ulink>
	</para>

	<para>
	  If you are interested in buying PowerDNS you can send a mail to <email>sales@powerdns.com</email>
	  or you can visit the PowerDNS website at <ulink url="http://www.powerdns.com/pdns/">http://www.powerdns.com/pdns/</ulink>
	</para>      
	
	<para>
	  If you want to praise my work, ask me to marry you, deposit $1.000.000 on my bank account or flame me to death, then 
	  you can mail me at <email>michel@powerdns.com</email> :)
	</para>
	
      </sect3>
      
      <sect3>
	<title>Legal information</title>
	
	<para>
	  Microsoft, Visual C++, Windows, Windows NT, Windows 2000, Windows XP and Win32 are 
	  either registered trademarks or trademarks of Microsoft Corporation in the U.S.A. and/or other countries.
	</para>
	
	<para>
	  Other product and company names mentioned herein may be the trademarks of their respective owners.
	</para>
	
	</sect3>
      
      </sect2>
    </sect1>

  </book>
